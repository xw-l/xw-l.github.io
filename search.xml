<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用FRP转NAT机器的SSH端口</title>
    <url>/2023/08/23/FRP%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近买了几台国外nat鸡，然后IP又被墙了，恰好又买了国内商家的1元NAT鸡，正好可以利用起来去做个转发，切勿用作违法行为(ps:FRP流量特征明显，切勿作死，可以使用GOST等其他开源工具)</p>
<h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>下载系统对应FRP二进制包</li>
<li>中转机安装FRPS</li>
<li>被转发机安装FRPC</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>这里我自己写了一个简易的FRPC简易脚本,我转发的是ssh端口，FRPS这里就不介绍，跟FRPC相差无几。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">SERVER_PORT=30212</span><br><span class="line"><span class="comment">#all port 30211-30219</span></span><br><span class="line"><span class="comment">#usable port 30213-30218</span></span><br><span class="line">SERVER_IP=mhy7.muhanyun.cn</span><br><span class="line">FRP_PATH=/etc/frp</span><br><span class="line">REMOTE_PORT=30219</span><br><span class="line"><span class="comment">#FRP_VERSION=v0.51.2</span></span><br><span class="line"><span class="comment">#FRP_PLATFROM=amd64 </span></span><br><span class="line"><span class="comment">#!! windows need .bat script or .ps1 (powershell) and nssm or other self-starting service</span></span><br><span class="line"><span class="comment">#FRP_OS=linux</span></span><br><span class="line">FRPDOWNLOAD_URL=https://github.com/fatedier/frp/releases/download/v0.51.2/frp_0.51.2_linux_amd64.tar.gz</span><br><span class="line"><span class="comment">#FRPDOWNLOAD_URL=https://pan.alybaba.top/soft/frp_0.51.2_linux_amd64.tar.gz</span></span><br><span class="line"><span class="comment">#!! if you network unreachable,use this link</span></span><br><span class="line">FRP=$(<span class="built_in">basename</span> <span class="variable">$&#123;FRPDOWNLOAD_URL&#125;</span>)</span><br><span class="line">FRP_DIR=$(<span class="built_in">basename</span> <span class="variable">$&#123;FRP&#125;</span> .tar.gz)</span><br><span class="line">FRP_TOKEN=you_token</span><br><span class="line">LOCAL_PORT=22</span><br><span class="line">FRP_SERVICE_NAME=SSH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">frpc_install</span></span>() &#123;</span><br><span class="line"><span class="comment">#Download FRPC</span></span><br><span class="line">    [ -d <span class="variable">$&#123;FRP_PATH&#125;</span> ] || <span class="built_in">mkdir</span> <span class="variable">$&#123;FRP_PATH&#125;</span></span><br><span class="line">    <span class="built_in">command</span> -v wget &amp;&gt;/dev/null || apt install wget -y &amp;&gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;just download frp,plz wait moment...&quot;</span></span><br><span class="line">    wget  <span class="variable">$&#123;FRPDOWNLOAD_URL&#125;</span> &amp;&gt;/dev/null &amp;&amp; tar -xf <span class="variable">$&#123;FRP&#125;</span> -C <span class="variable">$&#123;FRP_PATH&#125;</span> || <span class="built_in">exit</span> 66 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;download failed,please check you network&quot;</span></span><br><span class="line"><span class="comment">#    read -p  &quot;plz input you ssh connect port: &quot; REMOTE_PORT </span></span><br><span class="line"><span class="comment">#FRPC CONFIG</span></span><br><span class="line">    <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; $&#123;FRP_PATH&#125;/$&#123;FRP_DIR&#125;/frpc.ini</span></span><br><span class="line"><span class="string">#FRPS SETTING</span></span><br><span class="line"><span class="string">[common]</span></span><br><span class="line"><span class="string">server_addr = $&#123;SERVER_IP&#125;</span></span><br><span class="line"><span class="string">server_port = $&#123;SERVER_PORT&#125;</span></span><br><span class="line"><span class="string">token = $&#123;FRP_TOKEN&#125;</span></span><br><span class="line"><span class="string">tls_enable = true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#FRPC SETTING</span></span><br><span class="line"><span class="string">[$&#123;FRP_SERVICE_NAME&#125;]</span></span><br><span class="line"><span class="string">type = tcp</span></span><br><span class="line"><span class="string">local_ip = 127.0.0.1</span></span><br><span class="line"><span class="string">local_port = $&#123;LOCAL_PORT&#125;</span></span><br><span class="line"><span class="string">remote_port = $&#123;REMOTE_PORT&#125;</span></span><br><span class="line"><span class="string">use_compression = true</span></span><br><span class="line"><span class="string">use_encryption = true</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;frpc install finished&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> frpc &amp;&gt;/dev/null || useradd  -s /sbin/nologin frpc</span><br><span class="line">    <span class="built_in">chown</span> -R frpc.frpc <span class="variable">$&#123;FRP_PATH&#125;</span>/<span class="variable">$&#123;FRP_DIR&#125;</span></span><br><span class="line"><span class="comment">#FRPC DAEMON FILE</span></span><br><span class="line">      <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/systemd/system/frpc.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Frp Client Service</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">User=frpc</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">RestartSec=5s</span></span><br><span class="line"><span class="string">ExecStart=$&#123;FRP_PATH&#125;/$&#123;FRP_DIR&#125;/frpc -c $&#123;FRP_PATH&#125;/$&#123;FRP_DIR&#125;/frpc.ini</span></span><br><span class="line"><span class="string">ExecReload=$&#123;FRP_PATH&#125;/$&#123;FRP_DIR&#125;/frpc reload -c $&#123;FRP_PATH&#125;/$&#123;FRP_DIR&#125;/frpc.ini</span></span><br><span class="line"><span class="string">LimitNOFILE=1048576</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">#START FRPC</span></span><br><span class="line">    systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now frpc</span><br><span class="line">    <span class="built_in">sleep</span> 1;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;you frps forward domain is <span class="variable">$&#123;SERVER_IP&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;you frps forward port is <span class="variable">$&#123;REMOTE_PORT&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#frps_install() &#123;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">frpc_install</span><br><span class="line"><span class="comment">#frps_install</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>脚本只是简单的转发了SSH端口，有兴趣可以参考官网做更进一步的配置，如TCP,UDP,tcpmux等。</li>
<li>如果有多个ssh端口需要转发，可尝试tcpmux(tcp多路复用)，开始我以为是不可以的，看了下官方文档是可以的，不过这里我就没尝试了</li>
<li>本脚本只是自用，所以并没有写判断（GO语言就是牛逼），只使用了简单的短路符</li>
<li>可以转发3389端口，利用一些工具将FRPC设置自启，如nssm。我自己家里的电脑就是转发出去了，方便在公司远程，当然也可反向把公司某些服务转发出来，注意安全</li>
<li>切记密码设置复杂，因为FRP流量特征是明显，很多兄弟都能嗅探到，直接开启暴力破解，token到无所谓，顶多浪费你硬件资源</li>
<li>我朋友拿ESXi 开了个虚拟机做转发3389端口，密码没有配置复杂，直接被勒索。当然只是测试，无所谓，安全推荐stcp</li>
<li>记得开启对应端口防火墙，如不指定用户则为nobody，FRP为C&#x2F;S架构</li>
<li>除去平台架构和系统外，基本上全平台通用，这也是为什么我使用FRP的原因，配置来说也相对较为简便</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>FRP官方文档<a href="https://gofrp.org/docs/reference/">https://gofrp.org/docs/reference/</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>frp</tag>
        <tag>代理</tag>
        <tag>转发</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat和JDK源码简单安装</title>
    <url>/2023/05/24/JDK_or_Tomcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="简单介绍下JDK"><a href="#简单介绍下JDK" class="headerlink" title="简单介绍下JDK"></a>简单介绍下JDK</h3><h3 id="JDK（Java-Development-Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。"><a href="#JDK（Java-Development-Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。" class="headerlink" title="JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。"></a>JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。</h3><h3 id="Oracle-JDK-Version"><a href="#Oracle-JDK-Version" class="headerlink" title="Oracle JDK Version"></a>Oracle JDK Version</h3><p><img src="/images/JDK.png" alt="Oracle JDK Version"></p>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h3 id="Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java-Servlet、JavaServer-Pages（JSP）和Java-WebSocket等技术的支持，用于构建和运行Java-Web应用程序。"><a href="#Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java-Servlet、JavaServer-Pages（JSP）和Java-WebSocket等技术的支持，用于构建和运行Java-Web应用程序。" class="headerlink" title="Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。"></a>Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。</h3><h3 id="Tomcat-Version"><a href="#Tomcat-Version" class="headerlink" title="Tomcat Version"></a>Tomcat Version</h3><p><img src="/images/tomcat.png" alt="Tomcat Version"></p>
<h3 id="那么接下来我们就来简单的安装一下"><a href="#那么接下来我们就来简单的安装一下" class="headerlink" title="那么接下来我们就来简单的安装一下"></a>那么接下来我们就来简单的安装一下</h3><h2 id="JDK源安装"><a href="#JDK源安装" class="headerlink" title="JDK源安装"></a>JDK源安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list |grep jdk</span><br><span class="line"><span class="comment">#rhel系列查看包信息，注意如果没有安装JDK，将会附加安装</span></span><br><span class="line">apt list| grep jdk</span><br><span class="line"><span class="comment">#debian系列查看包信息</span></span><br><span class="line">yum install jdk-version</span><br><span class="line"><span class="comment">#rhel系列安装</span></span><br><span class="line">apt install jdk-version</span><br><span class="line"><span class="comment">#debian系列安装</span></span><br><span class="line">java -version</span><br><span class="line"><span class="comment">#如果没问题的话，这里可以查看java版本了</span></span><br></pre></td></tr></table></figure>
<h2 id="JDK包安装"><a href="#JDK包安装" class="headerlink" title="JDK包安装"></a>JDK包安装</h2><ul>
<li><a href="https://www.oracle.com/java/technologies/downloads/#java17">https://www.oracle.com/java/technologies/downloads/#java17</a></li>
<li><a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></li>
</ul>
<h3 id="我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装"><a href="#我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装" class="headerlink" title="我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装"></a>我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install jdk-version.rpm</span><br><span class="line">vim   /etc/profile.d/jdk.sh</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/default</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#配置变量</span></span><br><span class="line"><span class="comment">#export JRE_HOME=$JAVA_HOME/jre</span></span><br><span class="line"><span class="comment">#export CLASSPATH=$JAVA_HOME/lib/:$JRE_HOME/lib/</span></span><br><span class="line"><span class="comment">#这两项非必需</span></span><br><span class="line"><span class="built_in">source</span>  /etc/profile.d/jdk.sh或</span><br><span class="line">.  /etc/profile.d/jdk.sh</span><br><span class="line"><span class="comment">#生效变量</span></span><br><span class="line">java -version</span><br><span class="line">rpm -ql jdk-version.rpm</span><br><span class="line"><span class="comment">#查看安装信息</span></span><br></pre></td></tr></table></figure>
<h2 id="JDK二进制文件安装"><a href="#JDK二进制文件安装" class="headerlink" title="JDK二进制文件安装"></a>JDK二进制文件安装</h2><h3 id="链接在上方，tar-gz为编译好的二进制文件，下载即可。"><a href="#链接在上方，tar-gz为编译好的二进制文件，下载即可。" class="headerlink" title="链接在上方，tar.gz为编译好的二进制文件，下载即可。"></a>链接在上方，tar.gz为编译好的二进制文件，下载即可。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf    jdk-version.tar.gz   -C   /usr/local/</span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">ln</span> -s jdk-name    jdk</span><br><span class="line">vim   /etc/profile.d/jdk.sh</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/:<span class="variable">$JRE_HOME</span>/lib/</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/jdk.sh</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h2 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.89/bin/apache-tomcat-8.5.89.tar.gz</span><br><span class="line">tar  xf  apache-tomcat-8.5.89.tar.gz -C /usr/local</span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">ln</span> -s  apache-tomcat-8.5.89  tomcat </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class="line">.  /etc/profile.d/tomcat.sh</span><br><span class="line">useradd -r -s /sbin/nologin tomcat</span><br><span class="line"><span class="comment">#创建运行用户</span></span><br><span class="line"><span class="built_in">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class="line"><span class="built_in">echo</span>   <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>   /usr/local/tomcat/conf/tomcat.conf</span><br><span class="line"><span class="comment">#写配置文件</span></span><br><span class="line">vim /lib/systemd/system/tomcat.service</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class="line"><span class="comment">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class="line"><span class="comment">#如果没有写配置文件可启用此选项</span></span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">User=tomcat</span><br><span class="line">Group=tomcat</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment">#只要修改了systemctl service文件，都需要运行该命令</span></span><br><span class="line">sysemctl start tomcat</span><br><span class="line">systemctl status tomcat</span><br><span class="line">ss -ntl</span><br><span class="line"><span class="comment">#默认是8080tcp端口</span></span><br></pre></td></tr></table></figure>
<h3 id="到这里，我们的JDK和Tomcat就部署完毕了，Tomcat-是一个受欢迎的-Java-Web-应用服务器，适用于中小型项目和简单的-Web-应用。它的轻量级、易用性和良好的-Java-EE-兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root-ps：不合理操作，不建议。反正tomcat也不会部署在公网-生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。"><a href="#到这里，我们的JDK和Tomcat就部署完毕了，Tomcat-是一个受欢迎的-Java-Web-应用服务器，适用于中小型项目和简单的-Web-应用。它的轻量级、易用性和良好的-Java-EE-兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root-ps：不合理操作，不建议。反正tomcat也不会部署在公网-生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。" class="headerlink" title="到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。"></a>到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。</h3><h3 id="部分参考文献"><a href="#部分参考文献" class="headerlink" title="部分参考文献"></a>部分参考文献</h3><ul>
<li><a href="https://cwiki.apache.org/confluence/display/tomcat/">https://cwiki.apache.org/confluence/display/tomcat/</a></li>
<li><a href="https://tomcat.apache.org/whichversion.html">https://tomcat.apache.org/whichversion.html</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS-NAT四层+nginx七层</title>
    <url>/2023/05/30/LVS%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%8E%A8%E8%BF%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><h4 id="多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下"><a href="#多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下" class="headerlink" title="多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下"></a>多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下</h4><p><img src="/images/high_use.png" alt="高可用"></p>
<h4 id="IP分配无"><a href="#IP分配无" class="headerlink" title="IP分配无"></a>IP分配无</h4><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>关闭selinux和防火墙还有把默认表清空一下，实际生产案例可能会配置专有端口，这个自己注意</li>
<li>NAT和仅主机仅仅是模拟内外网不同网段，一定要理解含义</li>
<li>这里只使用了LVS-NAT负载均衡转发，DR多网段和tunnel模式可参考我前面写的修改，删除和增加部分网络参数即可</li>
<li>默认使用ROOT用户</li>
<li>一步一步来，喝杯咖啡</li>
</ol>
<h4 id="普及下LVS和Nginx"><a href="#普及下LVS和Nginx" class="headerlink" title="普及下LVS和Nginx"></a>普及下LVS和Nginx</h4><ol>
<li>四层转发不握手</li>
<li>七层转发需要握手</li>
<li>LVS只支持四层转发</li>
<li>nginx支持七层和虚拟四层转发</li>
<li>LVS基于内核转发，LVS适合高并发，大规模的网络负载均衡场景</li>
<li>nginx更适合HTTP转发</li>
</ol>
<h3 id="2-LVS配置"><a href="#2-LVS配置" class="headerlink" title="2. LVS配置"></a>2. LVS配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">iptables -F</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">hostnamectl set-hostname LVS</span><br><span class="line"><span class="comment">#添加第二块网卡，这里偷懒使用自动获取的IP，格式如下</span></span><br><span class="line"><span class="comment">#centos网卡配置</span></span><br><span class="line">NAME=ens160</span><br><span class="line"><span class="comment">#我这是ens160，这个名是别名，但也是命令行操作网卡的名称</span></span><br><span class="line">DEVICE=ens160</span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="comment">#这里写none也ok，意思是静态配置，如果为dhcp则是自动获取</span></span><br><span class="line">IPADDR=10.0.0.100</span><br><span class="line">GATEWAY=10.0.0.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="comment">#PREFIX=CIDR MASK，掩码两种格式，3个255为24</span></span><br><span class="line">DNS=you dns</span><br><span class="line">DNS1=you dns1</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"><span class="comment">#开启启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ubuntu网卡配置 这里注意，ubuntu是用的netplan管理网卡，格式是yaml，需要注意层级格式</span></span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: <span class="literal">false</span></span><br><span class="line">      <span class="comment">#这里改为no也行</span></span><br><span class="line">      addresses:</span><br><span class="line">        - 10.0.0.100/24</span><br><span class="line">      gateway4: 10.0.0.2</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [10.0.0.2,223.5.5.5]</span><br><span class="line">  version: 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#网卡2同理，网卡名不同而已，注意层级格式就ok，这里就不在过多赘述</span></span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">yum install ipvsadm keepalived -y</span><br><span class="line"><span class="comment">#这里采用源安装，如果是其他方式安装请注意路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment">#这里是临时生效，永久生效请写sysctl配置文件</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#这里要注意，默认配置文件名不可自定义,为keepalived.conf,如需自定义请使用keepalived -f /you/config/path</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">    <span class="comment">#全局配置</span></span><br><span class="line">   notification_email &#123;</span><br><span class="line">    you.example@mail.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from  you.example@mail.com</span><br><span class="line">   smtp_server mail.domob.cn</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   <span class="comment">#邮箱配置</span></span><br><span class="line">   router_id LVS_1</span><br><span class="line">   <span class="comment">#唯一性</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#节点配置</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment">#主为MASTER，备为BACKUP</span></span><br><span class="line">    interface ens224</span><br><span class="line">    <span class="comment">#绑定的网卡</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment">#组ID，同一组的主备需一样</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment">#启动时的优先级谁高则谁成为MASTER</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment">#主备同步检查，默认1秒</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">    <span class="comment">#主备之间认证，防止其他节点窜入</span></span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    <span class="comment">#对外公网IP</span></span><br><span class="line">        192.168.59.135</span><br><span class="line">    <span class="comment">#LVS主IP</span></span><br><span class="line">        192.168.59.136</span><br><span class="line">    <span class="comment">#LVS备IP</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance LAN_GATEWAY &#123;</span><br><span class="line">    <span class="comment">#内网定义</span></span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens160</span><br><span class="line">    virtual_router_id 62</span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment">#NVIP漂移地址，一定要和启动优先级一样，不然我估计会出错</span></span><br><span class="line">    advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">    auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.0.0.10</span><br><span class="line">    <span class="comment">#NVIP，漂移VIP</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.135 80&#123;</span><br><span class="line">    <span class="comment">#主机配置</span></span><br><span class="line">    delay_loop 6</span><br><span class="line">    <span class="comment">#健康检查间隔6秒</span></span><br><span class="line">    lb_algo rr</span><br><span class="line">    <span class="comment">#LVS调度算法为rr也就是轮询。rr|wrr|lc|wlc|lblc|sh|dh</span></span><br><span class="line">    lb_kind NAT</span><br><span class="line">    <span class="comment">#负载均衡转发规则为NAT。DR|TUN|FULLTUN</span></span><br><span class="line">    !nat_mask 255.255.255.0</span><br><span class="line">    <span class="comment">#我在ubuntu上可指定掩码，rokey上检查时会报错，所以我注释了，无伤大雅</span></span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    <span class="comment">#50秒内访问同一台后端服务器，可注释</span></span><br><span class="line">    protocol TCP</span><br><span class="line">    <span class="comment">#协议为TCP</span></span><br><span class="line"></span><br><span class="line">    real_server 10.0.0.202 80 &#123;</span><br><span class="line">        <span class="comment">#后端真实服务器配置</span></span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment">#权重</span></span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                <span class="comment">#连接超时时间</span></span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                <span class="comment">#重连次数，这里检查配置时也出错，干脆注释了</span></span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                <span class="comment">#重连间隔时间</span></span><br><span class="line">                connect_port 80</span><br><span class="line">                <span class="comment">#健康检查时的端口</span></span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 10.0.0.203 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.136 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    !nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 10.0.0.202 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 10.0.0.203 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#然后配置文件是叹号注释，写#纯属习惯</span></span><br><span class="line"></span><br><span class="line">keepalived -t</span><br><span class="line"><span class="comment">#检查配置文件，没有输出则正确。默认为/etc/keepalived/keepalived.conf,可自定义路径</span></span><br><span class="line">systemctl start keepalived </span><br><span class="line">systemctl status keepalived </span><br><span class="line"><span class="comment">#这里应看到以下信息，备用机则会显示remove VIPs。这里是根据启动优先级来决定谁是主备，而不是MSTER，BACKUP名称来决定，NVIP也是根据优先级</span></span><br><span class="line">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) Entering MASTER STATE</span><br><span class="line">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) setting VIPs.</span><br><span class="line">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) Sending/queueing gratuitous ARPs on ens160 <span class="keyword">for</span> 10.0.0.10</span><br><span class="line">LVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 <span class="keyword">for</span> 10.0.0.10</span><br><span class="line">LVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 <span class="keyword">for</span> 10.0.0.10</span><br><span class="line">ipvsadm -Ln</span><br><span class="line"><span class="comment">#keepalived配置里会自动配置ipvsadm，所以输入命令可直接查看</span></span><br><span class="line">systemctl stop keepalived </span><br><span class="line"><span class="comment">#如果你停止服务，那么备用机会立马抢占NVIP，成为新的MASTR进行转发服务</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;10.0.0.202 www.lee.com\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>


<h3 id="3-LVS-BAK配置"><a href="#3-LVS-BAK配置" class="headerlink" title="3. LVS-BAK配置"></a>3. LVS-BAK配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname LVS-BAK</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">iptables -F</span><br><span class="line"><span class="comment">#ip配置同LVS</span></span><br><span class="line">mount /dev/sr0 /mnt/</span><br><span class="line"><span class="comment">#sr0和cdrom都是指光盘的意思，因为我挂了光盘的原因，安装软件会报错，所以必须挂载，没有装AUTO挂载</span></span><br><span class="line">yum -y install ipvsadm keepalived</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    you.example@mail.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from  you.example@mail.com</span><br><span class="line">   smtp_server mail.domob.cn</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_2</span><br><span class="line">   <span class="comment">#唯一标识</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment">#备份</span></span><br><span class="line">    interface ens224</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 99</span><br><span class="line">    <span class="comment">#优先级不能超过MASTER，不然VIP会漂移过来</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.59.135</span><br><span class="line">        192.168.59.136</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance LAN_GATEWAY &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens160</span><br><span class="line">    virtual_router_id 62</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.0.0.10</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.135 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    !nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 10.0.0.202 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">               connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 10.0.0.203 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.136 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    !nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 10.0.0.202 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 10.0.0.203 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                !nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">keepalived -t</span><br><span class="line">systemctl start keepalived </span><br><span class="line">systemctl status keepalived</span><br><span class="line">ipvsadm -Ln</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;10.0.0.202 www.lee.com\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<h3 id="4-Nginx-1配置"><a href="#4-Nginx-1配置" class="headerlink" title="4. Nginx-1配置"></a>4. Nginx-1配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Nginx-1</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">iptables -F</span><br><span class="line"><span class="comment">#一定要关闭selinux</span></span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line"><span class="comment">#因为我写了本地yum仓配置，又没装auto挂载，所以需要手动挂载，可以安装软件包的话，就忽略这步</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"><span class="comment">#这里就源安装了，如果是编译安装，请注意自己自己的配置</span></span><br><span class="line">route del default</span><br><span class="line"><span class="comment">#删除默认路由，临时删除，重启会重新生成，主要是改文件比较烦</span></span><br><span class="line">route add default gw 10.0.0.10</span><br><span class="line"><span class="comment">#添加到LVS的默认路由</span></span><br><span class="line">route -n</span><br><span class="line"><span class="comment">#查看路由</span></span><br><span class="line">vim /etc/nginx/conf.d/10.0.0.130.conf</span><br><span class="line"><span class="comment">#名字随意，需.conf结尾</span></span><br><span class="line">upstream wordpress &#123;</span><br><span class="line">        server 10.0.0.130;</span><br><span class="line">        <span class="comment">#这里是后端的wordpress，默认算法是轮询，权重都为1</span></span><br><span class="line">        server 10.0.0.134;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        <span class="comment">#这里配置为默认主页，检查配置时如果报错请删除其他文件的default_server即可</span></span><br><span class="line">        server_name www.lee.com;      </span><br><span class="line">        <span class="comment">#配置域名解析，感兴趣的可自行配置，2种方法，一是搭建DNS server，二是直接在hosts文件添加解析</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://wordpress;</span><br><span class="line">        <span class="comment">#反代后端wordpress服务器</span></span><br><span class="line">        &#125;</span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="comment">#这里没有编译安装nginx，如果是编译安装，配置文件目录可能不同，请注意</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;10.0.0.202 www.lee.com\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<h3 id="5-Nginx-2配置"><a href="#5-Nginx-2配置" class="headerlink" title="5. Nginx-2配置"></a>5. Nginx-2配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Nginx-2</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">iptables -F</span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">yum install nginx -y</span><br><span class="line">vim /etc/nginx/conf.d/10.0.0.204.conf</span><br><span class="line">upstream jpress&#123;</span><br><span class="line">        server 10.0.0.204:8080;</span><br><span class="line">        <span class="comment">#这里是后端的jpress</span></span><br><span class="line">        server 10.0.0.205:8080;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        server_name www.lee.org;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://jpress;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">nginx -t </span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;10.0.0.202 www.lee.com\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<h3 id="6-LNP-1配置"><a href="#6-LNP-1配置" class="headerlink" title="6. LNP-1配置"></a>6. LNP-1配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname LNP-1</span><br><span class="line">systemctl stop ufw</span><br><span class="line"><span class="comment">#ubuntu默认防火墙是ufw</span></span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line"><span class="comment">#-F是清空filter表所有规则，流量信息等，如果你其他表有规则，请注意是否冲突</span></span><br><span class="line">apt install nginx php-fpm php-mysql php-json unzip -y </span><br><span class="line"><span class="comment">#安装若干软件</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/nginx/sites-enabled/default</span><br><span class="line"><span class="comment">#改default_server还是提示冲突，我直接删</span></span><br><span class="line">vim /etc/nginx/conf.d/sever130.conf</span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        root /data/wordpress/www;</span><br><span class="line">        index index.php;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        <span class="comment">#限制客户端上传文件大小，不配置为不限制</span></span><br><span class="line">        location ~ \.php$|/ping|/php_status&#123;</span><br><span class="line">            <span class="comment">#正则匹配以.php,.ping,.php_status结尾</span></span><br><span class="line">                fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">                <span class="comment">#php监控端口，可统一更改为socket路径</span></span><br><span class="line">                fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">                <span class="comment">#指定了FastCGI处理程序需要执行的脚本路径</span></span><br><span class="line">                include fastcgi_params;</span><br><span class="line">                <span class="comment">#这个是相对路径，也可绝对路径。fastcgi_params文件会包含一些常用的FastCGI参数配置</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#php配置</span></span><br><span class="line">vim /etc/php/8.1/fpm/pool.d/www.conf</span><br><span class="line">;listen = /run/php/php8.1-fpm.sock</span><br><span class="line"><span class="comment">#这个是socket路径，这里就演示端口了</span></span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"><span class="comment">#可修改0.0.0.0，或者在nginx改为进程文件</span></span><br><span class="line">pm.status_path = /php_status</span><br><span class="line"><span class="comment">#php部分数据监控</span></span><br><span class="line">ping.path = /ping</span><br><span class="line"><span class="comment">#检查php存活</span></span><br><span class="line"></span><br><span class="line">vim /etc/php/8.1/fpm/php.ini</span><br><span class="line">post_max_size = 100M</span><br><span class="line">upload_max_filesize = 100M</span><br><span class="line"><span class="comment">#这里是修改上传文件限制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/wordpress/www</span><br><span class="line">vim /data/wordpress/www/phpinfo.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#测试php是否被解析</span></span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl start php8.1-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment">### wordpress配置</span></span><br><span class="line">wget https://wordpress.org/latest.zip</span><br><span class="line"><span class="built_in">chown</span> www-data.www-data  wordpress -R</span><br><span class="line"><span class="built_in">mv</span> wordpress/* /data/wordpress/www</span><br><span class="line"><span class="comment">#配置完mysql，然后输入本机IP，可以配置wordpress站点了，实测上传大于20mb的文件会出现json错误，需要在NGINX配置文件将client_max_body_size改成你想要的大小，我改成了100就行了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NFS做完开始在这里挂载</span></span><br><span class="line">rsync -a  /data/wordpress/www/*  root@10.0.0.135:/data/wordpress/www/</span><br><span class="line"><span class="comment">#rsync默认递归复制，可 --no-recursion 取消递归，这里把文件复制到NFS</span></span><br><span class="line"><span class="built_in">rm</span> -rf /data/wordpress/www/*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class="line"><span class="comment">#这里注意别清空了，两个大于号要看清</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment">#挂载fstab文件</span></span><br></pre></td></tr></table></figure>

<h3 id="7-LNP-2配置"><a href="#7-LNP-2配置" class="headerlink" title="7. LNP-2配置"></a>7. LNP-2配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname LNP-2</span><br><span class="line">systemctl stop ufw</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line">apt install nginx php-fpm php-mysql php-json -y</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/nginx/sites-enabled/default</span><br><span class="line">vim /etc/nginx/conf.d/sever130.conf</span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        root /data/wordpress/www;</span><br><span class="line">        index index.php;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        <span class="comment">#限制客户端上传文件大小，不配置为不限制</span></span><br><span class="line">        location ~ \.php$|/ping|/php_status&#123;</span><br><span class="line">                fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">                fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">                include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">php</span><br><span class="line">vim /etc/php/8.1/fpm/pool.d/www.conf</span><br><span class="line">;listen = /run/php/php8.1-fpm.sock</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line">pm.status_path = /php_status</span><br><span class="line">ping.path = /ping</span><br><span class="line"></span><br><span class="line">vim /etc/php/8.1/fpm/php.ini</span><br><span class="line">post_max_size = 100M</span><br><span class="line">upload_max_filesize = 100M</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/wordpress/www</span><br><span class="line">vim /data/wordpress/www/phpinfo.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#测试php是否被解析</span></span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl start php8.1-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载NFS</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>

<h3 id="8-mysql-Mast配置"><a href="#8-mysql-Mast配置" class="headerlink" title="8. mysql-Mast配置"></a>8. mysql-Mast配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Mysql-Mast</span><br><span class="line">systemctl stop ufw</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line">apt install mysql-server -y</span><br><span class="line"><span class="comment">#如果是编译安装，请注意自定义路径，可能会有不同</span></span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#开启监听，默认是localhost</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;server-id = 131 &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class="line"><span class="string">#做集群的话每台mysql都需要一个ID识别</span></span><br><span class="line"><span class="string">systemctl start mysql.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql</span></span><br><span class="line"><span class="string">mysql&gt; create user backuser@&#x27;10.0.0.%&#x27; identified by &#x27;1234567890&#x27;;</span></span><br><span class="line"><span class="string">mysql&gt; grant replication slave on *.* to backuser@&#x27;10.0.0.%&#x27;;</span></span><br><span class="line"><span class="string">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;</span></span><br><span class="line"><span class="string">#安装master半同步插件</span></span><br><span class="line"><span class="string">mysql&gt; \! echo  &quot;</span>rpl_semi_sync_master_enable<span class="string">&quot; &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class="line"><span class="string">#开启master半同步策略</span></span><br><span class="line"><span class="string">mysql&gt; \! systemctl restart mysql</span></span><br><span class="line"><span class="string">mysql&gt; select @@rpl_semi_sync_master_enabled;</span></span><br><span class="line"><span class="string">#查看半同步策略是否开启</span></span><br><span class="line"><span class="string">mysql&gt; reset master;</span></span><br><span class="line"><span class="string">#重置binlog日志，也可以不重置</span></span><br><span class="line"><span class="string">mysql&gt; show master status;</span></span><br><span class="line"><span class="string">#接下来创建wordpress数据库和用户，顺便也可验证主从同步</span></span><br><span class="line"><span class="string">mysql&gt; create database wordpress;</span></span><br><span class="line"><span class="string">mysql&gt; create user wordpress@&#x27;10.0.0.%&#x27; identified by &#x27;0987654321&#x27;;</span></span><br><span class="line"><span class="string">mysql&gt; grant all  on wordpress.* to wordpress@&#x27;10.0.0.%&#x27;;</span></span><br><span class="line"><span class="string">mysql&gt; select host,user from mysql.user;</span></span><br><span class="line"><span class="string">#在slave执行该命令，如果有，mysql就完事了，可去lnp配置wordpress</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h3 id="9-mysql-Slave-1配置"><a href="#9-mysql-Slave-1配置" class="headerlink" title="9. mysql-Slave-1配置"></a>9. mysql-Slave-1配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Slave-1</span><br><span class="line">systemctl stop ufw</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line">apt install mysql-server -y</span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;server-id = 132\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#实际生产案例中slave应只读</span></span><br><span class="line">systemctl start mysql.service</span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line"><span class="comment">#安装slave半同步插件</span></span><br><span class="line">mysql&gt; \! <span class="built_in">echo</span>  <span class="string">&quot;rpl_semi_sync_slave_enabled&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">mysql&gt; \! <span class="built_in">echo</span>  <span class="string">&quot;require_secure_transport = 1&quot;</span>&gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#死活连不上，发现开启安全连接秒连，查看master上安全连接是关闭的，百思不得其解，估计只要是master就会默认要求slave开启安全连接</span></span><br><span class="line">mysql&gt; \! systemctl restart mysql.service</span><br><span class="line">mysql&gt; select @@rpl_semi_sync_slave_enabled; </span><br><span class="line"><span class="comment">#查看半同步插件是否启用</span></span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;10.0.0.131&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;1234567890&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=157;</span><br><span class="line"><span class="comment">#这里是连接master的配置</span></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line"><span class="comment">#启动slave</span></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line"><span class="comment">#如果没有error，就ok了</span></span><br></pre></td></tr></table></figure>

<h3 id="10-mysql-Slave-2配置"><a href="#10-mysql-Slave-2配置" class="headerlink" title="10. mysql-Slave-2配置"></a>10. mysql-Slave-2配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Slave-2</span><br><span class="line">systemctl stop ufw</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line">apt install mysql-server -y</span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;server-id = 133\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">systemctl start mysql.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line">mysql&gt; \! <span class="built_in">echo</span>  <span class="string">&quot;rpl_semi_sync_slave_enabled&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">mysql&gt; \! <span class="built_in">echo</span>  <span class="string">&quot;require_secure_transport = 1&quot;</span>&gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">systemctl restart mysql.service</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@rpl_semi_sync_slave_enabled; </span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;10.0.0.131&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;1234567890&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=157;</span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="11-NFS配置"><a href="#11-NFS配置" class="headerlink" title="11. NFS配置"></a>11. NFS配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nfs配置</span></span><br><span class="line">hostnamectl set-hostname NFS</span><br><span class="line">systemctl stop ufw</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line">apt install nfs-kernel-server</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/&#123;wordpress,tomcat&#125;/&#123;www,www&#125;  -p &amp;&amp; <span class="built_in">mkdir</span> /etc/exports.d</span><br><span class="line">vim /etc/exports.d/wordpress.exports</span><br><span class="line">/data/wordpress/www 10.0.0.0/24(rw)</span><br><span class="line"><span class="comment">#这里是wordpress的目录</span></span><br><span class="line"></span><br><span class="line">vim /etc/exports.d/tomcat.exports</span><br><span class="line">/data/tomcat/www 10.0.0.0/24(rw)</span><br><span class="line"><span class="comment">#这里我把配置文件分开了，也可以放一起</span></span><br><span class="line"></span><br><span class="line">exportfs -v</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">exportfs -r</span><br><span class="line"><span class="comment">#重读配置文件</span></span><br><span class="line"><span class="built_in">chown</span> -R www-data.www-data /data/wordpress</span><br><span class="line"><span class="built_in">chown</span> -R tomcat.tomcat /data/tomcat</span><br><span class="line">wget http://pan.alybaba.top/soft/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line"><span class="comment">#下载监控软件</span></span><br><span class="line">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin</span><br><span class="line"><span class="comment">#软连接</span></span><br><span class="line">或者</span><br><span class="line"><span class="built_in">cp</span> -a GNU-Linux-x86   /usr/local/sersync</span><br><span class="line"><span class="comment">#改名复制过来，推荐软连接，容错率高点感觉</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/sersync:$PATH&#x27;</span> &gt; /etc/profile.d/sersync.sh</span><br><span class="line"><span class="comment">#写默认路径</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/sersync.sh</span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line">vim /usr/local/sersync/confxml.xml</span><br><span class="line"><span class="comment">#文件太长，我只记几个要改的点</span></span><br><span class="line">&lt;attrib start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line"><span class="comment">#这里是监控权限变化，最好开启，默认关闭</span></span><br><span class="line">&lt;sersync&gt;</span><br><span class="line">            &lt;localpath watch=<span class="string">&quot;/data&quot;</span>&gt;</span><br><span class="line">            &lt;!--需要监控的目录--&gt;</span><br><span class="line">            &lt;remote ip=<span class="string">&quot;10.0.0.136&quot;</span> name=<span class="string">&quot;backup&quot;</span>/&gt;</span><br><span class="line">            &lt;!--rsync服务器IP，也就是备份服务器地址，name是rsync模块名需一致--&gt;</span><br><span class="line">            &lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.39&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.40&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">        &lt;rsync&gt;</span><br><span class="line">            &lt;commonParams params=<span class="string">&quot;-artuz&quot;</span>/&gt;</span><br><span class="line">            &lt;auth start=<span class="string">&quot;true&quot;</span> <span class="built_in">users</span>=<span class="string">&quot;rsyncuser&quot;</span> passwordfile=<span class="string">&quot;/etc/rsync.pas&quot;</span>/&gt;</span><br><span class="line">            &lt;!--这里start需改为<span class="literal">true</span>，<span class="built_in">users</span>和密码存放位置可自定义--&gt;</span><br><span class="line">            &lt;userDefinedPort start=<span class="string">&quot;false&quot;</span> port=<span class="string">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">            &lt;<span class="built_in">timeout</span> start=<span class="string">&quot;false&quot;</span> time=<span class="string">&quot;100&quot;</span>/&gt;&lt;!-- <span class="built_in">timeout</span>=100 --&gt;</span><br><span class="line">            &lt;ssh start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">        &lt;/rsync&gt;</span><br><span class="line"><span class="comment">#其实还可以使用ssh协议，我前面应该用过</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 123456 &gt; /etc/rsync.pas</span><br><span class="line"><span class="built_in">chmod</span> 600   /etc/rsync.pas</span><br><span class="line">rsync --password-file=/etc/rsync.pas rsync://rsymcser@10.0.0.136/backup</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="built_in">nohup</span> sersync2 -dro /usr/local/sersync/confxml.xml &amp;&gt;/dev/null &amp;</span><br><span class="line"><span class="comment">#后台运行，记得测试文件同步</span></span><br></pre></td></tr></table></figure>



<h3 id="11-NFS-BAK配置"><a href="#11-NFS-BAK配置" class="headerlink" title="11. NFS-BAK配置"></a>11. NFS-BAK配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname NFS-BAK</span><br><span class="line">systemctl stop ufw</span><br><span class="line">systemctl <span class="built_in">disable</span> ufw</span><br><span class="line">iptables -F</span><br><span class="line">vim /etc/rsyncd.conf</span><br><span class="line">    uid = root</span><br><span class="line">    gid = root</span><br><span class="line">    max connections = 0</span><br><span class="line">    ignore errors</span><br><span class="line">    exclude = lost+found/</span><br><span class="line">    <span class="built_in">log</span> file = /var/log/rsyncd.log</span><br><span class="line">    pid file = /var/run/rsyncd.pid</span><br><span class="line">    lock file = /var/run/rsyncd.lock</span><br><span class="line">    reverse lookup = no</span><br><span class="line">    [backup]</span><br><span class="line">    path = /data</span><br><span class="line">    comment = backup <span class="built_in">dir</span></span><br><span class="line">    <span class="built_in">read</span> only = no</span><br><span class="line">    auth <span class="built_in">users</span> = rsyncuser</span><br><span class="line">    secrets file = /etc/rsync.pas</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/wordpress/www</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rsyncuser:123456&quot;</span> &gt; /etc/rsync.pas</span><br><span class="line"><span class="built_in">chmod</span> 600  /etc/rsync.pas</span><br><span class="line">systemctl restart rsync</span><br><span class="line"><span class="comment">#这里做完反手去LNP操作，当然如果同步出问题，请systemctl status rsync,查看连接日志排查</span></span><br></pre></td></tr></table></figure>

<h3 id="13-Tomcat-1配置"><a href="#13-Tomcat-1配置" class="headerlink" title="13. Tomcat-1配置"></a>13. Tomcat-1配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Tomcat-1</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line">iptables -F</span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">yum install wget rsync -y</span><br><span class="line"><span class="comment">#这里我已经提前下载好了tomcat和jdk</span></span><br><span class="line">tar xf apache-tomcat-8.5.89.tar.gz -C /usr/local/</span><br><span class="line">tar xf jdk-8u371-linux-x64.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">ln</span> -s jdk1.8.0_371 jdk</span><br><span class="line">vim /etc/profile.d/jdk.sh</span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line">    <span class="comment">#指定JDK的安装路径</span></span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">    <span class="comment">#将JDK的bin目录添加到默认PATH </span></span><br><span class="line">    <span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">    <span class="comment">#指定JRE的安装路径</span></span><br><span class="line">    <span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/:<span class="variable">$JRE_HOME</span>/lib/</span><br><span class="line">    <span class="comment">#指定Java类的搜索路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/jdk.sh</span><br><span class="line">java -v</span><br><span class="line"><span class="comment">#测试是否生效</span></span><br><span class="line"><span class="built_in">ln</span> -s apache-tomcat-8.5.89 tomcat</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class="line"><span class="comment">#添加tomcat到默认PATH</span></span><br><span class="line">.  /etc/profile.d/tomcat.sh</span><br><span class="line">useradd -r -s /sbin/nologin tomcat</span><br><span class="line"><span class="comment">#生产环境最好指定特定统一用户，-r是系统用户，也就是id为1000以下</span></span><br><span class="line"><span class="built_in">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class="line"><span class="built_in">echo</span>   <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>  &gt;  /usr/local/tomcat/conf/tomcat.conf</span><br><span class="line">vim /lib/systemd/system/tomcat.service</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class="line"><span class="comment">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class="line"><span class="comment">#如果没有写配置文件可启用此选项</span></span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">User=tomcat</span><br><span class="line">Group=tomcat</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start tomcat.service</span><br><span class="line">systemctl status tomcat.service</span><br><span class="line">rsync -a ./jdk1.8.0_371  root@10.0.0.205:/usr/local/</span><br><span class="line">rsync -a ./apache-tomcat-8.5.89  root@10.0.0.205:/usr/local/</span><br><span class="line">wget wget -O jpress-v5.1.0.tar.gz  <span class="string">&#x27;https://gitee.com/JPressProjects/jpress/repository/archive/v5.1.0?format=tar.gz&#x27;</span></span><br><span class="line">tar xf jpress-v5.1.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> jpress-v5.1.0/</span><br><span class="line">yum install maven</span><br><span class="line"><span class="comment">#jave编译器，奇怪的是我装这个的时候，附带给我来了一个openjdk8版本的全家桶</span></span><br><span class="line">vim /etc/maven/settings.xml</span><br><span class="line"> &lt;mirror&gt;</span><br><span class="line">                &lt;<span class="built_in">id</span>&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">                &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">                &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">                &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line"><span class="comment">#在mirrors里添加这个镜像，主要是编译的时候加速用</span></span><br><span class="line"></span><br><span class="line">mvn clean install package -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line"><span class="comment">#编译语句</span></span><br><span class="line"><span class="built_in">mv</span> /usr/local/tomcat/webapps/ROOT  /usr/local/tomcat/webapps/ROOT1</span><br><span class="line"><span class="comment">#把root移走，默认读取的是root下的内容</span></span><br><span class="line"><span class="built_in">cp</span> starter-tomcat/target/starter-tomcat-5.0.war /usr/local/tomcat/webapps/ROOT.war</span><br><span class="line"><span class="comment">#把jpress移进来，改名ROOT</span></span><br><span class="line"><span class="built_in">chown</span> tomcat.tomcat -R  /usr/local/tomcat/webapps/</span><br><span class="line">vim /usr/local/tomcat/conf/server.xml</span><br><span class="line">&lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/data/tomcat/www/webapps&quot;</span></span><br><span class="line"><span class="comment">#这里我修改到其他的目录，方便统一挂载NFS</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/tomcat/www/webapps/</span><br><span class="line"><span class="comment">#如果没有目录重启会报错</span></span><br><span class="line"><span class="built_in">chown</span> tomcat.tomcat /data -R</span><br><span class="line"><span class="built_in">cp</span> -a /usr/local/tomcat/webapps/*  ./</span><br><span class="line">systemctl restart tomcat</span><br><span class="line">rsync ./*  -a root@10.0.0.135:/data/tomcat/www/webapps/</span><br><span class="line"><span class="comment">#跟LNP一样，把文件传至nfs</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class="line"><span class="comment">#写nfs挂载配置</span></span><br><span class="line">yum install nfs-utils -y</span><br><span class="line"><span class="comment">#这里报错了，因为这里用的rocky，没有安装nfs，需要安装一下</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">mount -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#同时jpress只支持5.6和5.7的mysql，那么其实只要把master换为5.7就行了，下面是方法</span></span><br><span class="line"><span class="comment">#ubuntu</span></span><br><span class="line">apt install software-properties-common</span><br><span class="line">add-apt-repository -y ppa:ondrej/mysql-5.7</span><br><span class="line">apt update</span><br><span class="line">apt install mysql-server-5.7</span><br><span class="line"><span class="comment">#rhel</span></span><br><span class="line">vim /etc/yum.repos.d/mysql5.7.repo</span><br><span class="line">[mysql5.7]</span><br><span class="line"><span class="comment">#名随意</span></span><br><span class="line">name=MySQL 5.7</span><br><span class="line"><span class="comment">#随意也要见名知意</span></span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="comment">#仓库链接</span></span><br><span class="line">enabled=1</span><br><span class="line"><span class="comment">#是否启用,1为启用</span></span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="comment">#是否检查gpg密钥，这里我就不检查了</span></span><br><span class="line"></span><br><span class="line">yum repolist -v</span><br><span class="line"><span class="comment">#刷新仓库包，顺便看下仓库配置是否出从</span></span><br><span class="line">yum  install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后也是一样配置账号密码权限</span></span><br><span class="line">mysql</span><br><span class="line">mysql&gt; create user jpress@<span class="string">&#x27;10.0.0.%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; grant all on jpress.* to jpress@<span class="string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="14-Tomcat-2配置"><a href="#14-Tomcat-2配置" class="headerlink" title="14. Tomcat-2配置"></a>14. Tomcat-2配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Tomcat-2</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line">iptables -F</span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">yum install wget rsync -y</span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">ln</span> -s jdk1.8.0_371 jdk</span><br><span class="line">vim /etc/profile.d/jdk.sh</span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME=/usr/local/jdk  </span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">    <span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre    </span><br><span class="line">    <span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/:<span class="variable">$JRE_HOME</span>/lib/</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/jdk.sh</span><br><span class="line">java -v</span><br><span class="line"><span class="built_in">ln</span> -s apache-tomcat-8.5.89 tomcat</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class="line">.  /etc/profile.d/tomcat.sh</span><br><span class="line">useradd -r -s /sbin/nologin tomcat</span><br><span class="line"><span class="built_in">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class="line"><span class="built_in">echo</span>   <span class="string">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>  &gt;  /usr/local/tomcat/conf/tomcat.conf</span><br><span class="line">vim /lib/systemd/system/tomcat.service</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class="line"><span class="comment">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class="line"><span class="comment">#如果没有写配置文件可启用此选项</span></span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">User=tomcat</span><br><span class="line">Group=tomcat</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start tomcat.service</span><br><span class="line">systemctl status tomcat.service</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/tomcat/www/webapps/</span><br><span class="line"><span class="built_in">chown</span> tomcat.tomcat /data -R</span><br><span class="line">vim /usr/local/tomcat/conf/server.xml</span><br><span class="line">&lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/data/tomcat/www/webapps&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class="line">yum install nfs-utils -y</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>
<h3 id="15-配置小坑总结"><a href="#15-配置小坑总结" class="headerlink" title="15. 配置小坑总结"></a>15. 配置小坑总结</h3><h4 id="到这里我们的高服务大致就完成了，但是还是有点小问题，因为-keepalived-配置是轮询，而jpress又有验证码，导致登录不进去，我只好把-keepalived-的-persistence-timeout-开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用-sieesion-会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是-rr-算法-跟nginx搞混了-，要配置成wrr，权重才会生效…-然后也出现了很多小问题，比如rhel系列必须关闭-selinux，否则-nginx-无法配置转发，机器重启后还是得-iptables-F-刷一下，我忘记-disable-防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx-proxy我临时配的下一跳地址，老是会自动删除，导致-user-访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把-keepalived-删除了，直接使用-ipvsadm-配置……这个-IP-配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个-VPN-和-jumpserver-因为时间问题就先不看了，jumpserver-环境其实很简单，官方文档讲的很清晰-ps-主要是有脚本，真舒服-最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如-Ceph，HDFS，GlusterFS-等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲-wq保存文件。"><a href="#到这里我们的高服务大致就完成了，但是还是有点小问题，因为-keepalived-配置是轮询，而jpress又有验证码，导致登录不进去，我只好把-keepalived-的-persistence-timeout-开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用-sieesion-会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是-rr-算法-跟nginx搞混了-，要配置成wrr，权重才会生效…-然后也出现了很多小问题，比如rhel系列必须关闭-selinux，否则-nginx-无法配置转发，机器重启后还是得-iptables-F-刷一下，我忘记-disable-防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx-proxy我临时配的下一跳地址，老是会自动删除，导致-user-访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把-keepalived-删除了，直接使用-ipvsadm-配置……这个-IP-配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个-VPN-和-jumpserver-因为时间问题就先不看了，jumpserver-环境其实很简单，官方文档讲的很清晰-ps-主要是有脚本，真舒服-最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如-Ceph，HDFS，GlusterFS-等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲-wq保存文件。" class="headerlink" title="到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效….然后也出现了很多小问题，比如rhel系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置……这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。"></a>到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效….然后也出现了很多小问题，比如rhel系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。<del>然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置……</del>这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。</h4><h3 id="16-架构总结优缺点"><a href="#16-架构总结优缺点" class="headerlink" title="16. 架构总结优缺点"></a>16. 架构总结优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><h4 id="1-高可用性：通过-Keepalived-实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。"><a href="#1-高可用性：通过-Keepalived-实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。" class="headerlink" title="1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。"></a>1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。</h4><h4 id="2-负载均衡：通过-LVS-NAT-和-Nginx-实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。"><a href="#2-负载均衡：通过-LVS-NAT-和-Nginx-实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。" class="headerlink" title="2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。"></a>2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。</h4><h4 id="3-扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。"><a href="#3-扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。" class="headerlink" title="3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。"></a>3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。</h4><h4 id="4-弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。"><a href="#4-弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。" class="headerlink" title="4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。"></a>4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。</h4><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><h4 id="1-复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。"><a href="#1-复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。" class="headerlink" title="1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。"></a>1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。</h4><h4 id="2-单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。"><a href="#2-单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。" class="headerlink" title="2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。"></a>2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。</h4><h4 id="3-数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。"><a href="#3-数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。" class="headerlink" title="3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。"></a>3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。</h4><h4 id="4-配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。"><a href="#4-配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。" class="headerlink" title="4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。"></a>4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。</h4><h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><h4 id="1-建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用"><a href="#1-建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用" class="headerlink" title="1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用"></a>1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用</h4><h4 id="2-NFS方案可替换"><a href="#2-NFS方案可替换" class="headerlink" title="2. NFS方案可替换"></a>2. NFS方案可替换</h4><h4 id="3-因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构"><a href="#3-因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构" class="headerlink" title="3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构"></a>3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构</h4><h4 id="4-少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus"><a href="#4-少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus" class="headerlink" title="4. 少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus"></a>4. <del>少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus</del></h4>]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>LVS</tag>
        <tag>Nginx</tag>
        <tag>NFS</tag>
        <tag>Keepalived</tag>
        <tag>Tomcat</tag>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS-NAT,DR,TUNNL模式简单实现</title>
    <url>/2023/05/13/LVS%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LVS-NAT简单实战"><a href="#LVS-NAT简单实战" class="headerlink" title="LVS-NAT简单实战"></a>LVS-NAT简单实战</h1><p>注意：请关闭所有主机selinux和firewalld，架构图如下<br><img src="/images/LVS-NAT.png" alt="LVS-NAT"></p>
<h2 id="LVS配置"><a href="#LVS配置" class="headerlink" title="LVS配置"></a>LVS配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname lvs</span><br><span class="line"><span class="comment">#修改主机名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt;  /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment">#开启ip转发，回包是需要经过LVS</span></span><br><span class="line">apt update &amp;&amp; apt install ipvsadm</span><br><span class="line"><span class="comment">#安装软件</span></span><br><span class="line">ipvsadm -A -t 172.18.0.100:80 -s wrr</span><br><span class="line"><span class="comment">#新增VS配置，-t为tcp，-s为模式，wrr为权重轮询</span></span><br><span class="line">ipvsadm -a -t 172.18.0.100:80 -r 192.168.59.131:80 -m</span><br><span class="line"><span class="comment">#新增RS配置,-r表示后端服务器，-m为NAT模式</span></span><br><span class="line">ipvsadm -a -t 172.18.0.100:80 -r 192.168.59.132:80 -m</span><br><span class="line">vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">        - 172.18.0.100/24</span><br><span class="line">      gateway4: 172.18.0.1</span><br><span class="line">      nameservers:</span><br><span class="line">         addresses: [172.18.0.1,8.8.8.8]</span><br><span class="line">    ens37:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.59.100/24</span><br><span class="line">  version: 2</span><br><span class="line"><span class="comment">#修改网卡文件</span></span><br><span class="line"></span><br><span class="line">ipvsadm -Ln</span><br><span class="line"><span class="comment">#查看集群配置信息</span></span><br><span class="line">ipvsadm-save -n &gt; ipvsadm.rule</span><br><span class="line"><span class="comment">#以数字方式保存配置</span></span><br><span class="line">ipvsadm-restore &lt;  ipvsadm.rule</span><br><span class="line"><span class="comment">#从文件加载配置</span></span><br></pre></td></tr></table></figure>

<h2 id="RS1配置"><a href="#RS1配置" class="headerlink" title="RS1配置"></a>RS1配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install ngixn -y</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;仅主机 192.168.59.131&quot;</span> &gt; /var/www/html/index.nginx-debian.html</span><br><span class="line">systemctl start nginx</span><br><span class="line">vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">          - 192.168.59.131/24</span><br><span class="line">      gateway4: 192.168.59.100</span><br><span class="line">  version: 2</span><br><span class="line"></span><br><span class="line">netplan apply</span><br></pre></td></tr></table></figure>
<h2 id="RS2配置"><a href="#RS2配置" class="headerlink" title="RS2配置"></a>RS2配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ngixn -y</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;仅主机 192.168.59.132&quot;</span> &gt; /var/www/html/index.nginx-debian.html</span><br><span class="line">systemctl start nginx</span><br><span class="line">vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">          - 192.168.59.132/24</span><br><span class="line">      gateway4: 192.168.59.100</span><br><span class="line">  version: 2</span><br><span class="line"></span><br><span class="line">netplan apply</span><br></pre></td></tr></table></figure>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>在Client上curl 172.18.0.100，在这里我们配置的权重轮询，但是没有配置weight，所以每curl一次都会换一次主机，一定程度上进行了负载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -e -t 172.18.0.100:80 -r 192.168.59.131:80 -m -w 3</span><br><span class="line"><span class="comment">#这里我们修改了131主机权重为3，也就是比如客户机每访问4次，3次为131，1次为132。比例为3比1</span></span><br></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>请记得一定要关闭防火墙，如果为rhel，请禁用selinux。其次NAT模式需要在LVS主机上进行IP地址的转换，会产生额外的网络开销，降低了网络性能，所以LVS主机需要具备较高的性能和带宽。在本次实验中的NAT模式存在单点故障的风险，实际生产最好使用主备，有兴趣的可自行尝试，这里就不再做过多叙述。</p>
<h1 id="LVS-DR模式单网段案例"><a href="#LVS-DR模式单网段案例" class="headerlink" title="LVS-DR模式单网段案例"></a>LVS-DR模式单网段案例</h1><p>注意：请关闭所有主机selinux和firewalld，架构图如下<br><img src="/images/LVS-DR-single.png" alt="LVS-DR-单网段"></p>
<h2 id="CIP配置"><a href="#CIP配置" class="headerlink" title="CIP配置"></a>CIP配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname CIP</span><br><span class="line">route del default</span><br><span class="line"><span class="comment">#删除默认路由</span></span><br><span class="line">route add default gw 172.18.0.100</span><br><span class="line"><span class="comment">#增加默认路由，也就是网关，下一跳地址</span></span><br><span class="line">route -n</span><br><span class="line"><span class="comment">#打印路由</span></span><br></pre></td></tr></table></figure>
<h2 id="Route配置"><a href="#Route配置" class="headerlink" title="Route配置"></a>Route配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname route</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt;  /proc/sys/net/ipv4/ip_forward</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">vim  ifcfg-ens160</span><br><span class="line">	BOOTPROTO=static</span><br><span class="line">	IPADDR=172.18.0.100</span><br><span class="line">	NETMASK=255.255.255.0</span><br><span class="line">	NAME=ens160</span><br><span class="line">	DEVICE=ens160</span><br><span class="line">	ONBOOT=<span class="built_in">yes</span></span><br><span class="line"><span class="built_in">cp</span> ifcfg-ens160  ifcfg-ens224</span><br><span class="line">vim  ifcfg-ens224</span><br><span class="line">	BOOTPROTO=static</span><br><span class="line">	IPADDR=192.168.59.200</span><br><span class="line">	NETMASK=255.255.255.0</span><br><span class="line">	NAME=ens224</span><br><span class="line">	DEVICE=ens224</span><br><span class="line">	ONBOOT=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">nmcli con reload; nmcli con up ens160;nmcli con up ens224</span><br><span class="line"><span class="comment">#重加载配置文件，并不会启动，所以后面还要加启动命令</span></span><br><span class="line"><span class="comment">#注意，Router用的是rhel系列，如果是debian系列，网卡配置可能稍有不同</span></span><br></pre></td></tr></table></figure>
<h2 id="LVS配置-1"><a href="#LVS配置-1" class="headerlink" title="LVS配置"></a>LVS配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname lvs</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">apt update &amp;&amp; apt install ipvsadm</span><br><span class="line">vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens37:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.59.130/24</span><br><span class="line">      gateway4: 192.168.59.200</span><br><span class="line"></span><br><span class="line">  version: 2</span><br><span class="line"></span><br><span class="line">netplan apply</span><br><span class="line"><span class="comment">#重载网卡配置文件，且重启网卡</span></span><br><span class="line">ifconfig lo:1 192.168.59.100 netmask 255.255.255.255</span><br><span class="line"><span class="comment">#为环回网口配置IP</span></span><br><span class="line">ipvsadm -A -t 192.168.59.100:80 -s rr</span><br><span class="line"><span class="comment">#rr为轮询算法</span></span><br><span class="line">ipvsadm -a -t 192.168.59.100:80 -r 192.168.59.131:80 -g</span><br><span class="line"><span class="comment">#-g为DR模式</span></span><br><span class="line">ipvsadm -a -t 192.168.59.100:80 -r 192.168.59.132:80 -g</span><br><span class="line">ipvsadm -Ln</span><br></pre></td></tr></table></figure>
<h2 id="RS1配置-1"><a href="#RS1配置-1" class="headerlink" title="RS1配置"></a>RS1配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IP配置参考LVS</span><br><span class="line">hostnamectl set-hostname RS1</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"><span class="comment">#ignore=1使该网卡只响应LVS的请求</span></span><br><span class="line"><span class="comment">#announce=2，忽略IP数据包的源IP地址</span></span><br><span class="line">ifconfig lo:1 192.168.59.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<h2 id="RS2配置-1"><a href="#RS2配置-1" class="headerlink" title="RS2配置"></a>RS2配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname RS2</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<p>LVS的eth0的网关可否不配置？如果随便配置，发现什么问题？如果不配置，怎么解决<br>可以，修改一下内核参数就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/LVS 网卡名/rp_filter</span><br><span class="line"><span class="comment">#关闭反向路径过滤，所有数据包均允许通过。</span></span><br><span class="line"></span><br><span class="line">rhel</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class="line"><span class="comment">#参数rp_filter用来控制系统是否开启对数据包源地址的校验。</span></span><br><span class="line"><span class="comment">#0表示不校验</span></span><br><span class="line"><span class="comment">#1表开启严格的反向路径校验。对每一个收到的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包；</span></span><br><span class="line"><span class="comment">#2表示开启松散的反向路径校验，对每个收到的数据包，校验其源地址是否可以到达，即反向路径是否可以ping通，如反向路径不通，则直接丢弃该数据包。</span></span><br></pre></td></tr></table></figure>
<p>LVS的VIP可以配置到lo网卡,但必须使用32位的netmask,为什么?</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">由于回环地址是一个单独的网络，因此需要使用32位掩码来配置回环网口的地址，以确保只有该地址的唯一性，避免因为掩码设置错误而导致不必要的网络通信和安全问题。</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crul 192.168.59.100</span><br><span class="line"><span class="comment">#这里访问的是lvs，终端应轮询返回RS1和RS2的网址信息</span></span><br></pre></td></tr></table></figure>
<h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><p>LVS-DR模式单网段可能更容易被黑客扫描，因为LVS-DR模式下，虚拟服务器和Real Server都使用了同一网段，这使得黑客更容易发现虚拟服务器所在的IP地址。而且，由于Real Server的响应包不会经过Director，所以在单网段情况下，Real Server的响应包直接返回给客户端，黑客可以通过分析这些响应包来发现Real Server的IP地址。其次LVS主机和后端RS在同一个子网内，因此可能存在ARP欺骗的风险。同时要注意的是我在这里修改内核参数只是临时修改，重启后参数会复位，回环网卡ip也是同理。如果需要永久生效，请修改网卡配置文件。ipvsadm也可配置开机自启。</p>
<h1 id="LVS-DR模式多网段案例"><a href="#LVS-DR模式多网段案例" class="headerlink" title="LVS-DR模式多网段案例"></a>LVS-DR模式多网段案例</h1><p>我们可直接在单网端上稍作修改即可，架构图如下<br><img src="/images/LVS-DR-more.png" alt="LVS-DR-多网段"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在LVS，RS1，RS2上删除原来地址，然后添加新地址</span><br><span class="line">ifconfig  lo:1 del 192.168.59.100</span><br><span class="line">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<h2 id="Router配置"><a href="#Router配置" class="headerlink" title="Router配置"></a>Router配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>
<h2 id="LVS配置-2"><a href="#LVS配置-2" class="headerlink" title="LVS配置"></a>LVS配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvsadm -C</span><br><span class="line">ipvsadm  -A -t 10.0.0.100:80 -s wrr</span><br><span class="line">ipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.131:80 -g -w 1</span><br><span class="line">ipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.132:80 -g -w 1</span><br><span class="line"><span class="comment">#-w可不写，权重默认为1</span></span><br></pre></td></tr></table></figure>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crul 10.0.0.200</span><br><span class="line"><span class="comment">#终端应轮询返回RS1和RS2的网址信息</span></span><br></pre></td></tr></table></figure>
<h2 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h2><p>LVS-DR多网段模式是在LVS-DR单网段模式的基础上进行改进的，多个网段来增加LVS集群的可扩展性，同时避免了单网段模式中可能出现的ARP攻击问题。此外，多网段模式还可以让LVS集群在多个物理网络上分布，以提高整个集群的可靠性。但相应而来的缺点是需要在路由器上配置静态路由或动态路由协议，这可能会增加一些管理成本。其次，LVS-DR多网段模式还可能会增加一些网络延迟，特别是当LVS集群分布在多个物理网络上时。LVS-DR多网段模式适合于大型网络环境中需要高可扩展性和高可靠性的应用场景，例如互联网数据中心、大型企业应用、电子商务等场景。同时，也适合于需要通过LVS来实现负载均衡和高可用性的应用程序。</p>
<h1 id="LVS-TUNNEL隧道模式"><a href="#LVS-TUNNEL隧道模式" class="headerlink" title="LVS-TUNNEL隧道模式"></a>LVS-TUNNEL隧道模式</h1><p>根据DR多网段进行修改，架构图如下<br><img src="/images/LVS-TUNNEL.jpg" alt="LVS-DR-隧道"></p>
<h2 id="为LVS，RS1，RS2添加tun0隧道地址"><a href="#为LVS，RS1，RS2添加tun0隧道地址" class="headerlink" title="为LVS，RS1，RS2添加tun0隧道地址"></a>为LVS，RS1，RS2添加tun0隧道地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig  lo:1 del 10.0.0.100</span><br><span class="line"><span class="comment">#添加tunl隧道方法1</span></span><br><span class="line">ifconfig tunl0 192.168.59.100 netmask 255.255.255.255 up</span><br><span class="line"><span class="comment">#添加tun隧道方法2</span></span><br><span class="line">ip addr add 192.168.59.100/32 dev tunl0</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> up tunl0</span><br></pre></td></tr></table></figure>
<h2 id="Router配置-1"><a href="#Router配置-1" class="headerlink" title="Router配置"></a>Router配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip address delete  10.0.0.200/24 dev ens224</span><br></pre></td></tr></table></figure>

<h2 id="LVS配置-3"><a href="#LVS配置-3" class="headerlink" title="LVS配置"></a>LVS配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route add default gw 192.168.59.200</span><br><span class="line"><span class="comment">#上次实验在最后把网关给删了，在这里我们给他加上</span></span><br></pre></td></tr></table></figure>
<h2 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 192.168.59.200</span><br><span class="line"><span class="comment">#在这里我们可以使用wireshark进行抓包</span></span><br></pre></td></tr></table></figure>
<h2 id="抓包图"><a href="#抓包图" class="headerlink" title="抓包图"></a>抓包图</h2><p><img src="/images/LVS-TUNNEL-%E6%8A%93%E5%8C%85.png" alt="LVS-TUNNEL-抓包"></p>
<h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><h3 id="LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real-Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real-Server的IP地址，这样数据包才能传递到Real-Server上。"><a href="#LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real-Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real-Server的IP地址，这样数据包才能传递到Real-Server上。" class="headerlink" title="LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。"></a>LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。</h3><h2 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h2><p>tunnel模式的优点是支持跨网段的负载均衡，因为请求数据包经过封装后，可以通过IP网络传输到不同网段中的Real Server上。但是由于封装和解封装的过程会增加额外的延迟和负担，因此性能比直接路由的DR模式差。同时，tunnel模式也需要额外的配置和管理工作，增加了部署和维护的难度。</p>
<h1 id="LVS高可用"><a href="#LVS高可用" class="headerlink" title="LVS高可用"></a>LVS高可用</h1><h2 id="LVS和RS故障"><a href="#LVS和RS故障" class="headerlink" title="LVS和RS故障"></a>LVS和RS故障</h2><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="LVS-keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。"><a href="#LVS-keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。" class="headerlink" title="LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。"></a>LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。</h4><h4 id="LVS-heartbeat-x2F-corosync：heartbeat-x2F-corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。"><a href="#LVS-heartbeat-x2F-corosync：heartbeat-x2F-corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。" class="headerlink" title="LVS + heartbeat&#x2F;corosync：heartbeat&#x2F;corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。"></a>LVS + heartbeat&#x2F;corosync：heartbeat&#x2F;corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。</h4><h4 id="LVS-ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat-x2F-corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。"><a href="#LVS-ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat-x2F-corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。" class="headerlink" title="LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat&#x2F;corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。"></a>LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat&#x2F;corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。</h4>]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>代理服务器</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS-NAT和Keepalived的高可用</title>
    <url>/2023/05/14/LVS-NAT%E5%92%8CKeepalived%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="LVS-NAT-Keepalived-LAMP-NFS-Mysql"><a href="#LVS-NAT-Keepalived-LAMP-NFS-Mysql" class="headerlink" title="LVS-NAT+Keepalived+LAMP+NFS+Mysql"></a>LVS-NAT+Keepalived+LAMP+NFS+Mysql</h1><h2 id="架构图如下"><a href="#架构图如下" class="headerlink" title="架构图如下"></a>架构图如下</h2><p><img src="/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png" alt="LVS-NAT+Keepalived高可用"></p>
<h2 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname LVS</span><br><span class="line">vim /etc/netplan/00-installer-config.yaml</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: <span class="literal">true</span></span><br><span class="line">    ens37:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.59.100/24</span><br><span class="line"></span><br><span class="line">  version: 2</span><br><span class="line"><span class="comment">#这里偷懒了。。</span></span><br><span class="line">apt update &amp;&amp; apt install ipvsadm keepalived</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    you.example@mail.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from  you.example@mail.com</span><br><span class="line">   smtp_server mail.domob.cn</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.59.100</span><br><span class="line">        192.168.59.200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance LAN_GATEWAY &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 62</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line"> auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.100 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.142 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">               connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 172.18.0.141 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.200 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.142 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 172.18.0.141 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#keepalived会根据配置文件配置LVS和LVS-BAK的ipvsadm</span></span><br><span class="line">systemctl start keepalived </span><br><span class="line">systemctl status keepalived </span><br></pre></td></tr></table></figure>

<h2 id="LVS-BAK"><a href="#LVS-BAK" class="headerlink" title="LVS-BAK"></a>LVS-BAK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname LVS-BAK</span><br><span class="line"><span class="comment">#ip配置同LVS</span></span><br><span class="line">apt update &amp;&amp; apt install ipvsadm keepalived</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    you.example@mail.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from  you.example@mail.com</span><br><span class="line">   smtp_server mail.domob.cn</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_2</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens37</span><br><span class="line">    virtual_router_id 50</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.59.100</span><br><span class="line">        192.168.59.200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance LAN_GATEWAY &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 62</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.100 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.142 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">               connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 172.18.0.141 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.59.200 80&#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.142 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 172.18.0.141 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">           TCP_CHECK &#123;</span><br><span class="line">                connect_timeout 10</span><br><span class="line">                nb_get_retry 3</span><br><span class="line">                delay_before_retry 3</span><br><span class="line">                connect_port 80</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">systemctl start keepalived </span><br><span class="line">systemctl status keepalived </span><br></pre></td></tr></table></figure>

<h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname web1</span><br><span class="line">apt update &amp;&amp; apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y</span><br><span class="line">ufw allow 80/tcp</span><br><span class="line">wget https://cn.wordpress.org/latest-zh_CN.zip</span><br><span class="line">route del  default</span><br><span class="line">route add default gw 172.18.0.100</span><br><span class="line">unzip wordpress-6.2-zh_CN.zip &amp;&gt;/dev/null</span><br><span class="line"><span class="built_in">rm</span> /var/www/html/index.html</span><br><span class="line"><span class="built_in">mv</span> wordpress/* /var/www/html/</span><br><span class="line"><span class="built_in">chown</span> -R www-data.www-data wordpress</span><br><span class="line"><span class="comment">#在配置完mysql后，请访问80端配置好wordpress连接</span></span><br><span class="line">systemctl restart apache2.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完NFS后才能做以下配置</span></span><br><span class="line">rsync -av /var/www/html/* 172.18.0.145:/data/wordpress</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0&quot;</span>  &gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>
<p>Web2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname web2</span><br><span class="line">apt update &amp;&amp; apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y</span><br><span class="line">ufw allow 80/tcp</span><br><span class="line">route del  default</span><br><span class="line">route add default gw 172.18.0.100</span><br><span class="line"><span class="comment">#web2同理</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0&quot;</span>  &gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>
<h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname Master</span><br><span class="line">apt update &amp;&amp;  apt install mysql-server -y</span><br><span class="line">ufw allow 3306/tcp</span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span>  /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;server-id = 147&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">systemctl start mysql</span><br><span class="line">create user backuser@<span class="string">&#x27;172.18.0.%&#x27;</span> identified by <span class="string">&#x27;1234567890&#x27;</span>;</span><br><span class="line">grant replication slave on *.* to backuser@<span class="string">&#x27;172.18.0.%&#x27;</span>;</span><br><span class="line">reset master;</span><br><span class="line">create user wordpress@<span class="string">&#x27;172.18.0.%&#x27;</span> identified by <span class="string">&#x27;wordpress123&#x27;</span></span><br><span class="line">grant all on wordpress.* to wordpress@<span class="string">&#x27;172.18.0.%&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp;  apt install mysql-server -y</span><br><span class="line">ufw allow 3306/tcp</span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;server-id = 146\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">systemctl start mysql</span><br><span class="line"><span class="comment">#复制以下语句</span></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.18.0.147&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;1234567890&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=157;</span><br><span class="line"><span class="comment">#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步</span></span><br><span class="line">show slave status\G</span><br><span class="line"><span class="comment">#查看slave同步状态</span></span><br><span class="line">select user,host from mysql.user;</span><br><span class="line"><span class="comment">#测试woedpress账号是否同步</span></span><br></pre></td></tr></table></figure>

<h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname NFS</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/wordpress ; <span class="built_in">mkdir</span> /etc/exports.d ;<span class="built_in">chown</span> -R www-data.www-data /data</span><br><span class="line">vim /etc/exports.d/wordpress.exports</span><br><span class="line">/data/wordpress 172.18.0.0/24(rw)</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">exportfs -r</span><br><span class="line">exportfs -v</span><br><span class="line">systemctl restart nfs-server.service</span><br><span class="line">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line"><span class="built_in">cp</span> -a GNU-Linux-x86   /usr/local/sersync</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/sersync:$PATH&#x27;</span> &gt; /etc/profile.d/sersync.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/sersync.sh</span><br><span class="line">vim /usr/local/sersync/confxml.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span><br><span class="line">&lt;<span class="built_in">head</span> version=<span class="string">&quot;2.5&quot;</span>&gt;</span><br><span class="line">    &lt;host hostip=<span class="string">&quot;localhost&quot;</span> port=<span class="string">&quot;8008&quot;</span>&gt;&lt;/host&gt;</span><br><span class="line">    &lt;debug start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">    &lt;fileSystem xfs=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">    &lt;filter start=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">        &lt;exclude expression=<span class="string">&quot;(.*)\.svn&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">        &lt;exclude expression=<span class="string">&quot;(.*)\.gz&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">        &lt;exclude expression=<span class="string">&quot;^info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">        &lt;exclude expression=<span class="string">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;inotify&gt;</span><br><span class="line">        &lt;delete start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;createFolder start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;createFile start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">        &lt;closeWrite start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;moveFrom start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;moveTo start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;attrib start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;modify start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">    &lt;/inotify&gt;</span><br><span class="line"></span><br><span class="line">    &lt;sersync&gt;</span><br><span class="line">        &lt;localpath watch=<span class="string">&quot;/data/wordpress&quot;</span>&gt;</span><br><span class="line">		&lt;!--本地需要监控的目录--&gt;</span><br><span class="line">            &lt;remote ip=<span class="string">&quot;172.18.0.148&quot;</span> name=<span class="string">&quot;backup&quot;</span>/&gt;</span><br><span class="line">                      &lt;!--rsync服务器IP，以及rsync模块名--&gt;</span><br><span class="line">            &lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.39&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.40&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">        &lt;rsync&gt;</span><br><span class="line">            &lt;commonParams params=<span class="string">&quot;-artuz&quot;</span>/&gt;</span><br><span class="line">            &lt;auth start=<span class="string">&quot;true&quot;</span> <span class="built_in">users</span>=<span class="string">&quot;rsyncuser&quot;</span> passwordfile=<span class="string">&quot;/etc/rsync.pas&quot;</span>/&gt;</span><br><span class="line">							&lt;!--远程用户名，以及密码文件--&gt;</span><br><span class="line">            &lt;userDefinedPort start=<span class="string">&quot;false&quot;</span> port=<span class="string">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">            &lt;<span class="built_in">timeout</span> start=<span class="string">&quot;false&quot;</span> time=<span class="string">&quot;100&quot;</span>/&gt;&lt;!-- <span class="built_in">timeout</span>=100 --&gt;</span><br><span class="line">            &lt;ssh start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">        &lt;/rsync&gt;</span><br><span class="line">        &lt;failLog path=<span class="string">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class="string">&quot;60&quot;</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class="line">        &lt;crontab start=<span class="string">&quot;false&quot;</span> schedule=<span class="string">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt;</span><br><span class="line">            &lt;crontabfilter start=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">                &lt;exclude expression=<span class="string">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">                &lt;exclude expression=<span class="string">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">            &lt;/crontabfilter&gt;</span><br><span class="line">        &lt;/crontab&gt;</span><br><span class="line">        &lt;plugin start=<span class="string">&quot;false&quot;</span> name=<span class="string">&quot;command&quot;</span>/&gt;</span><br><span class="line">    &lt;/sersync&gt;</span><br><span class="line"></span><br><span class="line">    &lt;plugin name=<span class="string">&quot;command&quot;</span>&gt;</span><br><span class="line">        &lt;param prefix=<span class="string">&quot;/bin/sh&quot;</span> suffix=<span class="string">&quot;&quot;</span> ignoreError=<span class="string">&quot;true&quot;</span>/&gt;  &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class="line">        &lt;filter start=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">            &lt;include expression=<span class="string">&quot;(.*)\.php&quot;</span>/&gt;</span><br><span class="line">            &lt;include expression=<span class="string">&quot;(.*)\.sh&quot;</span>/&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">    &lt;plugin name=<span class="string">&quot;socket&quot;</span>&gt;</span><br><span class="line">        &lt;localpath watch=<span class="string">&quot;/opt/tongbu&quot;</span>&gt;</span><br><span class="line">            &lt;deshost ip=<span class="string">&quot;192.168.138.20&quot;</span> port=<span class="string">&quot;8009&quot;</span>/&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">    &lt;plugin name=<span class="string">&quot;refreshCDN&quot;</span>&gt;</span><br><span class="line">        &lt;localpath watch=<span class="string">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br><span class="line">            &lt;cdninfo domainname=<span class="string">&quot;ccms.chinacache.com&quot;</span> port=<span class="string">&quot;80&quot;</span> username=<span class="string">&quot;xxxx&quot;</span> passwd=<span class="string">&quot;xxxx&quot;</span>/&gt;</span><br><span class="line">            &lt;sendurl base=<span class="string">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br><span class="line">            &lt;regexurl regex=<span class="string">&quot;false&quot;</span> match=<span class="string">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 123456 &gt; /etc/rsync.pas</span><br><span class="line"><span class="built_in">chmod</span> 600   /etc/rsync.pas</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置完rsync服务器后才能进行以下步骤</span></span><br><span class="line">rsync --password-file=/etc/rsync.pas rsync://rsymcser@172.18.0.148/backup</span><br><span class="line"><span class="comment">#测试连通性，如果报错，请检查rsync配置是否出错</span></span><br><span class="line">sersync2 -dro /usr/local/sersync/confxml.xml</span><br><span class="line"><span class="comment">#开启rsync自动监控</span></span><br></pre></td></tr></table></figure>
<h2 id="NFS-BAK"><a href="#NFS-BAK" class="headerlink" title="NFS-BAK"></a>NFS-BAK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname NFS-BAK</span><br><span class="line"><span class="comment">#我所有主机已经安装了rsync服务了</span></span><br><span class="line">vim /etc/rsyncd.conf </span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">max connections = 0</span><br><span class="line">ignore errors</span><br><span class="line">exclude = lost+found/</span><br><span class="line"><span class="built_in">log</span> file = /var/log/rsyncd.log</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.lock</span><br><span class="line">reverse lookup = no</span><br><span class="line">[backup]</span><br><span class="line">path = /data/wordpress/</span><br><span class="line">comment = backup <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">read</span> only = no</span><br><span class="line">auth <span class="built_in">users</span> = rsyncuser</span><br><span class="line">secrets file = /etc/rsync.pas</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/wordpress/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rsyncuser:123456&quot;</span> &gt; /etc/rsync.pas</span><br><span class="line"><span class="built_in">chmod</span> 600  /etc/rsync.pas</span><br><span class="line">systemctl restart rsync</span><br></pre></td></tr></table></figure>

<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在NFS-BAK上查看</span></span><br><span class="line"><span class="built_in">ls</span> /data/wordpress</span><br><span class="line"><span class="comment">#此刻没有意外的话你已经同步了 172.18.0.145上 NFSserver 下 /data/wordpress 的文件</span></span><br><span class="line">tree   /data/wordpress/wp-content/uploads/</span><br><span class="line"><span class="comment">#然后在Web1或Web2的wordpress上传图片，查看172.18.0.148也就是NFS-BAK是否同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在LVS上down掉keepalived</span></span><br><span class="line">systemctl stop keepalived </span><br><span class="line"><span class="comment">#在lvs上停掉keepalived服务,查看NVIP是否漂移，备份机是否生效</span></span><br><span class="line">curl 172.18.0.100</span><br><span class="line"><span class="comment">#不出意外的话，依旧会返回wordpress网站信息</span></span><br></pre></td></tr></table></figure>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h3 id="到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel-需要编译内核-模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG"><a href="#到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel-需要编译内核-模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG" class="headerlink" title="到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG"></a>到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG</h3>]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>LVS</tag>
        <tag>负载均衡</tag>
        <tag>loadblance</tag>
        <tag>四层代理</tag>
      </tags>
  </entry>
  <entry>
    <title>开源仓库管理器Nexus</title>
    <url>/2023/05/30/Nexus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Nexus介绍"><a href="#Nexus介绍" class="headerlink" title="Nexus介绍"></a>Nexus介绍</h3><h4 id="Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。"><a href="#Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。" class="headerlink" title="Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。"></a>Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。</h4><h4 id="以下是Nexus的一些主要特点和功能："><a href="#以下是Nexus的一些主要特点和功能：" class="headerlink" title="以下是Nexus的一些主要特点和功能："></a>以下是Nexus的一些主要特点和功能：</h4><h4 id="1-仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。"><a href="#1-仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。" class="headerlink" title="1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。"></a>1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。</h4><h4 id="2-依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。"><a href="#2-依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。" class="headerlink" title="2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。"></a>2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。</h4><h4 id="3-安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。"><a href="#3-安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。" class="headerlink" title="3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。"></a>3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。</h4><h4 id="4-代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。"><a href="#4-代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。" class="headerlink" title="4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。"></a>4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。</h4><h4 id="5-搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。"><a href="#5-搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。" class="headerlink" title="5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。"></a>5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。</h4><h4 id="6-企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。"><a href="#6-企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。" class="headerlink" title="6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。"></a>6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。</h4><h4 id="总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。"><a href="#总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。" class="headerlink" title="总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。"></a>总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。</h4><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="1-内存需要4G以上-其实可修改配置"><a href="#1-内存需要4G以上-其实可修改配置" class="headerlink" title="1. 内存需要4G以上(其实可修改配置)"></a>1. 内存需要4G以上(其实可修改配置)</h4><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库"><a href="#一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库" class="headerlink" title="一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库"></a>一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库</h4><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure>
<h3 id="安装Nexus"><a href="#安装Nexus" class="headerlink" title="安装Nexus"></a>安装Nexus</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.sonatype.com/nexus/3/nexus-3.54.1-01-unix.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="解压Nexus"><a href="#解压Nexus" class="headerlink" title="解压Nexus"></a>解压Nexus</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf nexus-3.54.1-01-unix.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br></pre></td></tr></table></figure>
<h3 id="添加Nexus默认路径"><a href="#添加Nexus默认路径" class="headerlink" title="添加Nexus默认路径"></a>添加Nexus默认路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s nexus-3.54.1-01 nexus</span><br><span class="line"><span class="built_in">ln</span> -s nexus/bin/nexus /usr/bin/</span><br><span class="line">或</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/usr/local/nexus/bin:$PATH&#x27;</span> &gt; /etc/profile.d/nexus.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/nexus.sh</span><br></pre></td></tr></table></figure>
<h3 id="配置Nexus启动用户"><a href="#配置Nexus启动用户" class="headerlink" title="配置Nexus启动用户"></a>配置Nexus启动用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nexus/bin/nexus.rc</span><br><span class="line">run_as_user=<span class="string">&quot;root&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置Nexus启动端口"><a href="#配置Nexus启动端口" class="headerlink" title="配置Nexus启动端口"></a>配置Nexus启动端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim nexus/etc/nexus-default.properties</span><br><span class="line"><span class="comment">## DO NOT EDIT - CUSTOMIZATIONS BELONG IN $data-dir/etc/nexus.properties</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Jetty section</span></span><br><span class="line">application-port=8081</span><br><span class="line">application-host=0.0.0.0</span><br><span class="line">nexus-args=<span class="variable">$&#123;jetty.etc&#125;</span>/jetty.xml,<span class="variable">$&#123;jetty.etc&#125;</span>/jetty-http.xml,<span class="variable">$&#123;jetty.etc&#125;</span>/jetty-requestlog.xml</span><br><span class="line">nexus-context-path=/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nexus section</span></span><br><span class="line">nexus-edition=nexus-pro-edition</span><br><span class="line">nexus-features=\</span><br><span class="line"> nexus-pro-feature</span><br><span class="line"></span><br><span class="line">nexus.hazelcast.discovery.isEnabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="启动Nexus"><a href="#启动Nexus" class="headerlink" title="启动Nexus"></a>启动Nexus</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nexus run</span><br><span class="line"><span class="comment">#前台启动</span></span><br><span class="line">nexus start</span><br><span class="line"><span class="comment">#后台启动</span></span><br><span class="line">nexus stop</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">nexus status</span><br><span class="line"><span class="comment">#查看状态</span></span><br></pre></td></tr></table></figure>
<h3 id="查看内存，这里不贴图了，可以看到使用了2-1G，我还没去打开网页"><a href="#查看内存，这里不贴图了，可以看到使用了2-1G，我还没去打开网页" class="headerlink" title="查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页"></a>查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          3.5Gi       2.1Gi       856Mi        16Mi       625Mi       1.2Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>
<h3 id="查看端口监听"><a href="#查看端口监听" class="headerlink" title="查看端口监听"></a>查看端口监听</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -ntpl</span><br></pre></td></tr></table></figure>
<h3 id="创建service文件"><a href="#创建service文件" class="headerlink" title="创建service文件"></a>创建service文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/nexus.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">ExecStart=/usr/local/nexus/bin/nexus start</span><br><span class="line">ExecStop=/usr/local/nexus/bin/nexus stop</span><br><span class="line">User=root</span><br><span class="line"><span class="comment">#User=nexus</span></span><br><span class="line">Restart=on-abort</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl status nexus</span><br><span class="line"><span class="comment">#注意，即使前面启动了，这里也会显示没有启动</span></span><br><span class="line">nexus stop</span><br><span class="line">systemctl <span class="built_in">enable</span> --now nexus.service</span><br><span class="line"><span class="comment">#配置自启</span></span><br></pre></td></tr></table></figure>
<h3 id="查看Nexus面板初始密码"><a href="#查看Nexus面板初始密码" class="headerlink" title="查看Nexus面板初始密码"></a>查看Nexus面板初始密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/local/sonatype-work/nexus3/admin.password</span><br><span class="line"><span class="comment">#第一次登录需要修改密码，同时提示是否开启匿名下载，一般选择还是开启，如果你的仓库不对外又没有特殊要求的话</span></span><br></pre></td></tr></table></figure>
<h3 id="Nexus优化"><a href="#Nexus优化" class="headerlink" title="Nexus优化"></a>Nexus优化</h3><h4 id="默认maven仓是国外，修改至国内"><a href="#默认maven仓是国外，修改至国内" class="headerlink" title="默认maven仓是国外，修改至国内"></a>默认maven仓是国外，修改至国内</h4><p><img src="/images/Nexus%E4%BC%98%E5%8C%96.png" alt="修改maven-central默认仓"><br><img src="/images/Nexus%E4%BC%98%E5%8C%962.png" alt="修改为maven-central为国内源"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改为https://maven.aliyun.com/mvn/guide</span><br></pre></td></tr></table></figure>
<h3 id="修改Maven配置文件指向nexus"><a href="#修改Maven配置文件指向nexus" class="headerlink" title="修改Maven配置文件指向nexus"></a>修改Maven配置文件指向nexus</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/maven/settings.xml</span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;my-nexus&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;My-Nexus&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://10.0.0.201:8081/repository/maven-central/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>
<h3 id="添加自定义存储目录"><a href="#添加自定义存储目录" class="headerlink" title="添加自定义存储目录"></a>添加自定义存储目录</h3><h4 id="names可自定义，路径会自动创建"><a href="#names可自定义，路径会自动创建" class="headerlink" title="names可自定义，路径会自动创建"></a>names可自定义，路径会自动创建</h4><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95.png" alt="添加自定义存储路径"></p>
<h3 id="配置apt仓"><a href="#配置apt仓" class="headerlink" title="配置apt仓"></a>配置apt仓</h3><h4 id="这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22-04是jammy，请注意"><a href="#这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22-04是jammy，请注意" class="headerlink" title="这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意"></a>这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意</h4><p><img src="/images/%E5%88%9B%E5%BB%BAapt%E4%BB%93%E5%BA%93%E6%BA%90.png" alt="配置apt仓"><br><img src="/images/apt-link.png" alt="复制apt仓库链接"></p>
<h3 id="在客户机配置"><a href="#在客户机配置" class="headerlink" title="在客户机配置"></a>在客户机配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>  /etc/apt/sources.list ./</span><br><span class="line">vim /etc/apt/sources.list</span><br><span class="line">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse</span><br><span class="line">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse</span><br><span class="line">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse</span><br><span class="line">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse</span><br><span class="line">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse</span><br><span class="line">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse</span><br><span class="line">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>
<h3 id="客户端主机测试"><a href="#客户端主机测试" class="headerlink" title="客户端主机测试"></a>客户端主机测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E6%B5%8B%E8%AF%95%E4%B8%8B%E8%BD%BD.png" alt="可以看到有数据了"></p>
<h3 id="yum源同理，这里就不在过多叙述"><a href="#yum源同理，这里就不在过多叙述" class="headerlink" title="yum源同理，这里就不在过多叙述"></a>yum源同理，这里就不在过多叙述</h3><h4 id="小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus-2，JFrog-Bintray等等，有兴趣的可自行尝试。"><a href="#小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus-2，JFrog-Bintray等等，有兴趣的可自行尝试。" class="headerlink" title="小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。"></a>小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。</h4><h3 id="常用Type"><a href="#常用Type" class="headerlink" title="常用Type"></a>常用Type</h3><ol>
<li>Hosted：本地仓库，通常我们会部署自己的构件到这一类型的仓库，比如公司的第三方库</li>
<li>Proxy：代理仓库，它们被用来代理远程的公共仓库，如maven 中央仓库(官方仓库)</li>
<li>Group：仓库组，用来合并多个 hosted&#x2F;proxy 仓库，当你的项目希望在多个repository 使用资源时就不需要多次引用了，只需要引用一个 group 即可</li>
</ol>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3">https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3</a></li>
<li><a href="https://help.sonatype.com/repomanager3/installation">https://help.sonatype.com/repomanager3/installation</a></li>
<li><a href="https://help.sonatype.com/repomanager3/installation/system-requirements">https://help.sonatype.com/repomanager3/installation/system-requirements</a></li>
</ol>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>创建物理卷，卷组，逻辑卷，挂载，扩容</title>
    <url>/2023/03/21/PV%EF%BC%8CVG%EF%BC%8CLV/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在生产实例中，突然会碰到磁盘告警爆满，而此时生产环境不能停止，所以我们用什么方法在不关机的情况下扩容磁盘呢，LVM应运而生。<br>LVM是什么？<br>LVM(Logical Volume Manager)逻辑卷管理是在Linux2.4内核以上实现的磁盘管理技术。它是Linux环境下对磁盘分区进行管理的一种机制。<br>现在不仅仅是Linux系统上可以使用LVM这种磁盘管理机制，对于其它的类UNIX操作系统，以及windows操作系统都有类似与LVM这种磁盘管理软件。<br>更通俗的说就是动态弹性管理磁盘，下面我们就来操作操作</p>
<p>1-我们在虚拟机上添加一块新的硬盘，大小随意，重启或者输入partprobe刷新，输入lsblk查看，一般来说是sdb</p>
<p>2-使用磁盘管理工具进行操作，fdisk一般来说是mbr，gdisk一般来说是gpt，这里我们就用fdisk来操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	fdisk /dev/sdb</span><br><span class="line">	输入m可以查看帮助，p命令打印分区信息，n命令创建新分区，t命令修改现在有分区的格式，w命令保存退出，q命令退出不保存</span><br><span class="line">	首先我们输入n，可以看到有两个选项，第一个是主分区，第二个是扩展分区（如果选择扩展分区，则后续的第二个选项为逻辑分区</span><br><span class="line">逻辑分区属于扩展分区，也就是说后续逻辑分区不限数量，但受限于你扩展分区的容量，有点绕）</span><br><span class="line">	第一个选项分区号，逻辑分区无所谓，主分区必须是1-4以内4后面都属于逻辑分区，这里直接敲回车默认就行</span><br><span class="line">	第二个选项起始扇区，如没有特殊要求还是敲回车默认就好</span><br><span class="line">	第三个选项我们敲+10G，也可以是+10000M，自己怎么理解怎么来，意思是分配10G空间（1G=1024M，不够严谨）</span><br><span class="line">	接着提示创建成功，这里解释一下，相当于套娃又在sdb下面套了一个10G的sdb<span class="comment">#，还是没用，需要在下面继续划分逻辑分区才能使用</span></span><br><span class="line">	所以我我们重复一遍，选择第二个选项，再划分一个逻辑分区，我们给他+2G，同时注意大小不能超过10G，上面已经说了</span><br><span class="line">	p打印出来，可以看到我们刚刚做的操作，使用w命令保存退出</span><br><span class="line">	lsblk查看，可以看到扩展分区显示1kb，这就是我上面说的，实际上他是有10G可用存储的，然后sdb5的可用2G就是使用的扩展分区所划分的10GB存储</span><br><span class="line">	接着我们重复一边操作，fdisk /dev/sdb，这次我们划分主分区，容量+8G，w保存退出</span><br><span class="line">	到这里，我们已经做好的前期准备，虽然没有贴图（懒），但是绝对够保姆级</span><br><span class="line">	忘记一个，使用t命令把主分区和逻辑分区变更一下格式”8e“，8e为LVM卷，一个简单的分区就完成了</span><br></pre></td></tr></table></figure>
<p>3-选择之前的主分区和逻辑分区，这里就不解释pv了，可以看我关于disk的文章<br>pvcreate   &#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb5   </p>
<p>4-100M可以理解为dd命令中的bs（反正我是这样理解的），这里是指创建了一个名为”zhougege“的卷组<br>vgcreate -s 100M zhougege &#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb5 </p>
<p>5-在卷组中创建一个卷 大小2G，这里的20可以理解为dd命令中的count，所以总大小&#x3D;bs*count<br>lvcreate -l 20 -n zhoulv zhougege<br>    当然我们也可以直接指定大小，在卷组中再创建一个5G的卷<br>lvcreate -L +5G -n zhoulv2 zhougege<br>    这里我们再输入pvs可以查看剩余存储，接下来我们个“zhoulv”扩容一下，还有3G空间可以使用<br>lvextend -L +1g &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>    或者缩减<br>lvreduce -L -1G &#x2F;dev&#x2F;zhougege&#x2F;zhoulv</p>
<p>6-这里我们还没有挂载，挂载需要文件系统，值得注意的是要进行删除逻辑卷操作的时候，记得unmount &#x2F;dev&#x2F;you&#x2F;device<br>mkfs -t &#x2F;dev&#x2F;zhougege&#x2F;zholv 或者mkfs.ext4 &#x2F;dev&#x2F;zhougegezhoulv   &#x2F;&#x2F;选择你想要的格式</p>
<p>7-挂载，可以创建目录进行挂载，这里就不创建了<br>mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv &#x2F;mnt</p>
<p>8-查看，可以看到文件系统和挂载点了<br>lsblk -f</p>
<p>9-这里要注意的是，想要永久挂载，必须写入fstab，同时如果是逻辑分区不要使用路径挂载，最好指定卷名或者是uuid，懂得的都懂，不懂请点击<a href="https://www.baidu.com/">这里</a>查看<br>echo “UUID&#x3D;you device uuid  &#x2F;monuntpoint filesystem defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab<br>echo “UUID&#x3D;xxxx  &#x2F;mnt ext4 defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab</p>
<p>10-快照，相信大家很多人都去过网吧，这里的快照类似于网吧的无盘系统，这样就很好理解了，50m大小只是测试，实际看你想要存储文件大小<br>lvcreate -n zhoulv_snap -s -L 50m -p r &#x2F;dev&#x2F;zhougege&#x2F;zhoulv  &#x2F;&#x2F;s&#x3D;snap快照，p为权限有rw和r选项，作为快照来说当然是只读了,感觉不选也行，mount的时候加个-o r也不是不行	<br>    还原快照，试试往mnt里面写入或删除文件<br>rm  -fr &#x2F;mnt&#x2F;*<br>    挂载快照卷，这里忘了挂载快照了，不过在创建快照的那一刻，已经保留了你被快照逻辑卷的状态，所以dont worry。挂载一下就好了<br>mkdir &#x2F;zhoulv_snap &amp;&amp; mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap  &#x2F;zhoulv_snap<br>lsblk和lvs都可以看到snap的状态<br>    还原快照，该命令需要卸载两个卷，所以复制来的简单一点，还是写一下把，推荐cp -r，快照之后就没了，很鸡儿垃圾<br>cp  -rv &#x2F;zhoulv_snap &#x2F;mnt<br>umount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap ; umount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>lvconvert –merge &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv &#x2F;mnt&#x2F;<br>ls &#x2F;mnt</p>
<p>11-然后疯狂删除，记得先卸载<br>umount &#x2F;mnt<br>lvremove &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>lvremove &#x2F;dev&#x2F;zhougege&#x2F;zhoulv2<br>vgremove zhougege<br>pvremove</p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tips 1</title>
    <url>/2023/02/28/Tip/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>为history设置时间和用户log</p>
<p>vi打开&#x2F;etc&#x2F;profile<br>输入i进入输入模式<br>page dn 在文件最下方添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HISTTIMEFORMAT=<span class="string">&quot;%Y-%m-%d:%T:`whoami` &quot;</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT</span><br><span class="line">输入esc，:wq</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p>然后在终端输入history可以发现执行命令时会有时间以及角色了。（感觉无卵用）</p>
<p>Tips 2</p>
<p>快速切换ROOT用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sudoers.d/fastchangeusers</span><br><span class="line">输入i进入编辑模式</span><br><span class="line">输入：<span class="built_in">users</span>(你使用的普通用户名) ALL=(ALL) NOPASSWD:ALL</span><br><span class="line">输入esc</span><br><span class="line">:wq保存退出</span><br></pre></td></tr></table></figure>
<p>然后使用普通user切换root就不用密码了,其实也可以通过visudo添加该内容<br>效果是一样的，或者直接编辑&#x2F;etc&#x2F;sudoers文件也可以</p>
<p>Tips 3</p>
<p>解决centos网卡问题</p>
<p>有时候重启虚拟机后，网卡莫名其妙就获取不到地址了，百思不得其解。（可能电脑太垃圾！！）<br>网上找到方法解决，如下：</p>
<p>临时解决方案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhclient 网卡名称 //为网卡获取ip地址</span><br></pre></td></tr></table></figure>

<p>永久解决方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli networking // 查看托管状态</span><br><span class="line">如果显示disabled，则：</span><br><span class="line"></span><br><span class="line">nmcli networking on //开启托管</span><br><span class="line"></span><br><span class="line">systemctl restart NetworkManager //重启网络管理服务</span><br><span class="line"></span><br><span class="line">ip a  //可查看能够正常获取ip地址</span><br></pre></td></tr></table></figure>

<p>注意如果不是disabled,强烈建议点击该<a href="https://www.baidu.com/">button</a>获取答案</p>
<p>Tips 4</p>
<p>统计ssh登录失败的用户，ip，尝试登录次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lastb  | <span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> |<span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f1,3 |<span class="built_in">uniq</span> -c |<span class="built_in">head</span> -n 2 &gt; sshfaild.list</span><br><span class="line"></span><br><span class="line">lastb //输出ssh失败的用户</span><br><span class="line"><span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> //把空格变成1个</span><br><span class="line"><span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> // 使用空格进行分割 -f1,3 //显示第一列和第三列</span><br><span class="line"><span class="built_in">uniq</span> -c //统计</span><br><span class="line"><span class="built_in">head</span> -n 2 去掉最后两条</span><br><span class="line">·&gt;· sshfaild.list 将输出结果重定向到该文件。</span><br></pre></td></tr></table></figure>
<p>（ps：使用密钥的不用看了）</p>
<p>Tips 5</p>
<p>使用管道符得到”ip a”的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a| grep inet | <span class="built_in">head</span> -n3 |<span class="built_in">tail</span> -n1 |<span class="built_in">tr</span> -s <span class="string">&#x27; &#x27;</span> |<span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f3</span><br><span class="line"></span><br><span class="line"><span class="comment">#10.0.0.153/24</span></span><br><span class="line">不知道怎么去掉/24</span><br><span class="line"></span><br><span class="line">建议直接输入：hostname -I 或者使用awk 取列</span><br><span class="line"></span><br><span class="line">注意，如果有docker，openvpn...等软件，可能会有多块网卡。</span><br></pre></td></tr></table></figure>
<p>Tips 6</p>
<p>查看前10cpu，mem占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | <span class="built_in">head</span> -1;ps aux |grep -v PID |<span class="built_in">sort</span> -rn -k +3 | <span class="built_in">head</span> //cpu</span><br><span class="line">ps aux | <span class="built_in">head</span> -1;ps aux |grep -v PID |<span class="built_in">sort</span> -rn -k +4 | <span class="built_in">head</span> //mem</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker构建redis</title>
    <url>/2023/07/03/docker-redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>ubuntu 或其他主流发行版本</li>
<li>部署docker</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>安装docker,报错的话，一般是发行版不支持(脚本没有你的发行版名字)，可到官网查看使用其他方法(比如说rocky,可自己在脚本内加个 rocky 判断,或者把红帽系改成 rocky)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>
<p>拉取镜像，这里我就用 alpine 了.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull alpine:latest</span><br></pre></td></tr></table></figure>
<p>编写 dockerfile 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /images/alpine/redis -p &amp;&amp; <span class="built_in">cd</span> /images/alpine/redis </span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; dockerfile</span></span><br><span class="line"><span class="string">FROM alpine:latest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LABEL autor=&quot;lee&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ENV redis_version=redis-7.0.11   install_path=/usr/local/redis/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/&#x27;  /etc/apk/repositories \</span></span><br><span class="line"><span class="string">    &amp;&amp; export DEBIAN_FRONTEND=noninteractive \</span></span><br><span class="line"><span class="string">    #配置不交互</span></span><br><span class="line"><span class="string">    &amp;&amp; apk add --no-cache  --virtual .build-redis coreutils wget dpkg-dev dpkg gcc tzdata\</span></span><br><span class="line"><span class="string">        linux-headers make musl-dev openssl-dev \</span></span><br><span class="line"><span class="string">    #创建一个build-redis的虚拟软件包，方便删除,其他的都是编译相关</span></span><br><span class="line"><span class="string">    &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \</span></span><br><span class="line"><span class="string">    #修改时区</span></span><br><span class="line"><span class="string">    &amp;&amp; wget https://download.redis.io/releases/$&#123;redis_version&#125;.tar.gz \</span></span><br><span class="line"><span class="string">    &amp;&amp; tar xf $&#123;redis_version&#125;.tar.gz &amp;&amp; cd $&#123;redis_version&#125; \</span></span><br><span class="line"><span class="string">    &amp;&amp; make -j $(nproc -all) &amp;&amp; make install \</span></span><br><span class="line"><span class="string">    #拉满编译安装</span></span><br><span class="line"><span class="string">    &amp;&amp; mkdir -p $&#123;install_path&#125;etc $&#123;install_path&#125;log $&#123;install_path&#125;run $&#123;install_path&#125;data \</span></span><br><span class="line"><span class="string">    # 不支持花括号创建</span></span><br><span class="line"><span class="string">    &amp;&amp; addgroup -S redis &amp;&amp; adduser -Gredis -S -D -s /sbin/nologin  redis \</span></span><br><span class="line"><span class="string">    &amp;&amp; cp /$&#123;redis_version&#125;/redis.conf $&#123;install_path&#125;etc &amp;&amp; chown redis.redis $&#123;install_path&#125; \</span></span><br><span class="line"><span class="string">    &amp;&amp; sed -i -e &#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27; \</span></span><br><span class="line"><span class="string">            -e &#x27;/# requirepass/a requirepass 123456&#x27; \</span></span><br><span class="line"><span class="string">            -e &quot;s#pidfile \/var\/run\/redis_6379.pid#pidfile  $&#123;install_path&#125;pid\/redis_6379.pid#&quot; \</span></span><br><span class="line"><span class="string">            -e &quot;s#logfile \&quot;\&quot;#logfile \&quot;$&#123;install_path&#125;log\/redis_6379.log\&quot;#&quot; \</span></span><br><span class="line"><span class="string">            -e &quot;s#dir ./#dir $&#123;install_path&#125;data/#&quot; \</span></span><br><span class="line"><span class="string">            $&#123;install_path&#125;etc/redis.conf &amp;&amp; \</span></span><br><span class="line"><span class="string">    #修改部分配置文件，也可以-v挂到主机上</span></span><br><span class="line"><span class="string">    apk del --no-network .build-redis &amp;&amp; rm -rf /redis*</span></span><br><span class="line"><span class="string">    #删除之前安装的软件和下载解压的redis</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CMD [&quot;redis-server&quot;,&quot; /usr/local/redis/etc/redis.conf&quot;]</span></span><br><span class="line"><span class="string">#简单运行的命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EXPOSE 6379</span></span><br><span class="line"><span class="string">#容器默认暴漏端口</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t alpine:redis-v1.0 .</span><br></pre></td></tr></table></figure>
<p>可以看到编译很吃cpu</p>
<hr />

<p><img src="/images/alpine-build-redis-top.jpg"></p>
<p>编译成功</p>
<hr />

<p><img src="/images/alpine-build-succecd.jpg"><br>查看镜像大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">    REPOSITORY   TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">    alpine       redis-v1.0   0c2bbc93bd59   8 minutes ago   28.9MB</span><br><span class="line">    alpine       latest       c1aabb73d233   2 weeks ago     7.33MB</span><br></pre></td></tr></table></figure>
<p>启动看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name redis --restart=always alpine:redis-v1.0 </span><br><span class="line"><span class="comment">#可-v 挂载 /usr/local/redis 目录</span></span><br></pre></td></tr></table></figure>
<p>查看下映射端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker port redis</span><br><span class="line">    6379/tcp -&gt; 0.0.0.0:49162</span><br><span class="line">    6379/tcp -&gt; :::49162</span><br></pre></td></tr></table></figure>
<p>查看端口是否监听,可以看到我主机已经安装了redis了，49162端口也被监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ntpl</span><br><span class="line">    Active Internet connections (only servers)</span><br><span class="line">    Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">    tcp        0      0 127.0.0.1:39867         0.0.0.0:*               LISTEN      31145/containerd    </span><br><span class="line">    tcp        0      0 0.0.0.0:49162           0.0.0.0:*               LISTEN      54412/docker-proxy  </span><br><span class="line">    tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      30940/sshd: /usr/sb </span><br><span class="line">    tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      28950/redis-server  </span><br><span class="line">    tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      30928/systemd-resol </span><br><span class="line">    tcp        0      0 0.0.0.0:16379           0.0.0.0:*               LISTEN      28950/redis-server  </span><br><span class="line">    tcp6       0      0 :::49162                :::*                    LISTEN      54418/docker-proxy  </span><br><span class="line">    tcp6       0      0 :::22                   :::*                    LISTEN      30940/sshd: /usr/sb </span><br></pre></td></tr></table></figure>
<p>访问测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -a 123456 -h localhost -p 49162</span><br></pre></td></tr></table></figure>
<p>如下图,简单构建完成(ps 忘了起别名…)</p>
<hr />

<p><img src="/images/alpine-redis-run.jpg"></p>
<h1 id="部署问题"><a href="#部署问题" class="headerlink" title="部署问题"></a>部署问题</h1><ol>
<li>sh 和 bash 有所不同，可以apk add bash,然后再删除…</li>
<li>alpine 的 busybox 命令都是精简版的，要注意。</li>
<li>本次构建没有做到高度定制化。</li>
<li>后来发现我创建用户好像是多余，还是用root执行，没有指定 redis 用户运行，如果要 service 运行需要安装 openrc。我就暂时不折腾了</li>
</ol>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>简单构建tomcat镜像</title>
    <url>/2023/06/18/docker-simple-build/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>安装docker环境</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>安装docker环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p>拉取alpine和ubuntu镜像,这里也可以直接拉官方的，我是拉本地仓的<br><img src="/images/pull-images.jpg" alt="pull-images"><br>创建目录,先编译基于alpine镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /Dockerfile/web/tomcat/&#123;alpine,ubuntu&#125; -p &amp;&amp; <span class="built_in">cd</span> /Dockerfile/web/tomcat/alpine</span><br></pre></td></tr></table></figure>
<p>创建dockerfile文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; dockerfile</span></span><br><span class="line"><span class="string">FROM harbor.test.com/tomcat/alpine-tomcat:v1.0</span></span><br><span class="line"><span class="string">LABEL autor=&quot;lee&quot;</span></span><br><span class="line"><span class="string">ENV tomcat_version=8.5.90 PATH=/usr/local/tomcat/bin:$PATH</span></span><br><span class="line"><span class="string">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/&#x27;  /etc/apk/repositories \</span></span><br><span class="line"><span class="string">    &amp;&amp; apk add --no-cache openjdk8 \</span></span><br><span class="line"><span class="string">    #因为alpine要支持 oracle jdk 需要安装几个库依赖文件，这里就不折腾了</span></span><br><span class="line"><span class="string">    &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \</span></span><br><span class="line"><span class="string">    &amp;&amp; addgroup tomcat -g 2023 &amp;&amp; adduser -Gtomcat -u 2023 -D tomcat \</span></span><br><span class="line"><span class="string">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz \</span></span><br><span class="line"><span class="string">    #这里可使用 ADD 进行添加,我偷个懒...</span></span><br><span class="line"><span class="string">    &amp;&amp; tar xf /usr/local/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz -C /usr/local \</span></span><br><span class="line"><span class="string">    &amp;&amp; ln -s /usr/local/apache-tomcat-$&#123;tomcat_version&#125; /usr/local/tomcat \</span></span><br><span class="line"><span class="string">    &amp;&amp; rm -rf /usr/local/*.tar.gz \</span></span><br><span class="line"><span class="string">    &amp;&amp; chown -R tomcat.tomcat /usr/local/apache-tomcat-$&#123;tomcat_version&#125;/</span></span><br><span class="line"><span class="string">CMD [&quot;catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class="line"><span class="string">EXPOSE 8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>接下来执行build，可以看到没有问题,然后执行一下，一个简单的alpine+tomcat就完成了<br><img src="/images/build-images.jpg" alt="build-images"><br>web端查看,可以看到没有问题,接下来试试ubuntu<br><img src="/images/web-test.jpg" alt="web"><br>进入目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../ubuntu</span><br></pre></td></tr></table></figure>
<p>创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; dockerfile</span></span><br><span class="line"><span class="string">FROM harbor.test.com/tomcat/ubuntu-tomcat:v1.0 </span></span><br><span class="line"><span class="string">LABEL autor=&quot;lee&quot; </span></span><br><span class="line"><span class="string">ENV tomcat_version=8.5.90 jdk_version=1.8.0_371  PATH=/usr/local/tomcat/bin:$PATH  \</span></span><br><span class="line"><span class="string">    #JAVA_HOME=/usr/local/jdk \</span></span><br><span class="line"><span class="string">    #PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin  JRE_HOME=$&#123;JAVA_HOME&#125;/jre \</span></span><br><span class="line"><span class="string">    #CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/:$&#123;JRE_HOME&#125;/lib/ PATH=/usr/local/tomcat/bin:$&#123;PATH&#125;</span></span><br><span class="line"><span class="string">    #我在脚本source了，这里我也懒的给变量了</span></span><br><span class="line"><span class="string">RUN sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list \</span></span><br><span class="line"><span class="string">    &amp;&amp; apt update; export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt install -y tzdata wget \</span></span><br><span class="line"><span class="string">    &amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo Asia/Shanghai &gt; /etc/timezone \</span></span><br><span class="line"><span class="string">    &amp;&amp; groupadd tomcat -g 2023 &amp;&amp; useradd tomcat -u 2023 -g tomcat &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="string">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/jdk-$&#123;jdk_version&#125;-linux-x64.tar.gz \</span></span><br><span class="line"><span class="string">    #这里下载纯属偷懒，一般下载到构建目录用 ADD 复制进去，自动解压</span></span><br><span class="line"><span class="string">    &amp;&amp; tar xf /usr/local/jdk-$&#123;jdk_version&#125;-linux-x64.tar.gz -C /usr/local \</span></span><br><span class="line"><span class="string">    &amp;&amp; ln -s /usr/local/jdk$&#123;jdk_version&#125; /usr/local/jdk \</span></span><br><span class="line"><span class="string">    &amp;&amp; echo  &quot;export JAVA_HOME=/usr/local/jdk\nexport PATH=\$PATH:\$JAVA_HOME/bin\nexport JRE_HOME=\$JAVA_HOME/jre\nexport CLASSPATH=.:\$JAVA_HOME/lib/:\$JRE_HOME/lib/&quot; &gt; /etc/profile.d/jdk.sh  \</span></span><br><span class="line"><span class="string">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz \</span></span><br><span class="line"><span class="string">    &amp;&amp; tar xf /usr/local/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz -C /usr/local \</span></span><br><span class="line"><span class="string">    &amp;&amp; ln -s /usr/local/apache-tomcat-$&#123;tomcat_version&#125; /usr/local/tomcat &amp;&amp; apt autoremove -y  wget \</span></span><br><span class="line"><span class="string">    &amp;&amp; echo &#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27; &gt; /etc/profile.d/tomcat.sh  &amp;&amp; rm -rf /usr/local/*.tar.gz \</span></span><br><span class="line"><span class="string">    &amp;&amp; chown -R tomcat.tomcat /usr/local/tomcat  &amp;&amp; echo   &#x27;JAVA_HOME=/usr/local/jdk&#x27; &gt;  /usr/local/tomcat/conf/tomcat.conf</span></span><br><span class="line"><span class="string">COPY entrypoint.sh /</span></span><br><span class="line"><span class="string">ENTRYPOINT [&quot;/entrypoint.sh&quot;]</span></span><br><span class="line"><span class="string">EXPOSE 8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>创建entrypoint脚本………</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF entrypoint.sh</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">. /etc/profile.d/jdk.sh</span></span><br><span class="line"><span class="string">#tomcat的变量我写进去了....</span></span><br><span class="line"><span class="string">sleep 1</span></span><br><span class="line"><span class="string">catalina.sh run</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x entrypoint  &amp;&amp; docker build -t ubuntu-tomcat:v1.0.1 .</span><br></pre></td></tr></table></figure>
<p>可以看到很大….<br><img src="/images/build-images-2.jpg" alt="build-images"><br>那我们来访问试试，没问题。那么到这里就简单完成了docker镜像构建<br><img src="/images/web-test-2.jpg" alt="web-test-2"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>dockerfile 官方说明: <a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Docker</tag>
        <tag>容器</tag>
        <tag>Alpine</tag>
      </tags>
  </entry>
  <entry>
    <title>原来如此...</title>
    <url>/2023/06/28/h3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><del>防火墙问题,我裂开…</del></p>
<hr />

<p><img src="/images/h3-check.jpg"></p>
<hr />

<p><img src="/images/h3.jpg"></p>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Firewall</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装haproxy</title>
    <url>/2023/06/26/haproxy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>源安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install software-properties-common</span><br><span class="line"><span class="comment">#软件源管理工具</span></span><br></pre></td></tr></table></figure>
<p>添加 haproxy source 源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add-apt-repository ppa:vbernat/haproxy-2.0</span><br><span class="line"><span class="comment">#添加haproxy源，，红帽系列好像不被官方支持...但是源仓库是有的，版本低</span></span><br></pre></td></tr></table></figure>
<p>更新一下源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<p>查看选择需要安装的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache madison haproxy</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt -y install haproxy=2.8.\*</span><br></pre></td></tr></table></figure>
<p><code>编译安装</code><br>安装编译相关工具和依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt -y install gcc make libssl-dev libpcre3  libpcre3-dev zlib1g-dev libreadline-dev libsystemd-dev liblua5.4-dev</span><br></pre></td></tr></table></figure>
<p>下载源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf haproxy-2.8.0.tar.gz &amp;&amp; <span class="built_in">cd</span> haproxy-2.8.0</span><br></pre></td></tr></table></figure>
<p>构建编译的参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_PROMEX=1 USE_LUA=1</span><br></pre></td></tr></table></figure>
<p>安装到指定目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install PREFIX=/apps/haproxy</span><br></pre></td></tr></table></figure>
<p>创建软链接，也就是添加可执行路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /apps/haproxy/sbin/haproxy /usr/local/sbin/</span><br></pre></td></tr></table></figure>
<p>参考配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">    <span class="built_in">chroot</span> /apps/haproxy   改变根目录</span><br><span class="line">    deamon                 后台运行</span><br><span class="line">    mode tcp | http        转发类型 </span><br><span class="line">    stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin  proxess 1    这是socket文件,可用通过命令向该文件执行命令</span><br><span class="line">    user  gid | username</span><br><span class="line">    group uid | groupname 指定用户和组</span><br><span class="line">    nbproc n   该命令和nginx相似，开启n个进程，不过从2.5以后被弃用</span><br><span class="line">    nbthread n  指定每个进程开启的线程，默认为1，同时两者同时开启会报错，Centos8的1.8无此问题</span><br><span class="line">    cpu-map 1 0</span><br><span class="line">    cpu-map 2 1  亲缘性，CPU绑定进程，进程从1开始，cpu从0开始</span><br><span class="line">    cpu-map auto:1/1-8 0-7   自动绑定，每个进程的1-8个线程分别绑定0-7号cpu。haproxy2.4中为nbthreads</span><br><span class="line">    <span class="comment">#查看cpu绑定 ps axo pid,cmd,psr -L | grep haproxy</span></span><br><span class="line">    <span class="comment">#或者安装sysstat,pidstat -p  haproxy-pid -t </span></span><br><span class="line">    maxconn n       每个进程的最大连接数为n</span><br><span class="line">    maxsslconn n    每个进程的ssl最大连接数为n</span><br><span class="line">    maxconnrate n   每个进程每秒能创建的最多连接数为n</span><br><span class="line">    spread-checks n 后端server状态检查，建议为2-5，默认为0</span><br><span class="line">    pidfile   /some/path/haproxy.pid  PID文件路径</span><br><span class="line">    <span class="built_in">log</span> 127.0.0.1 local2 info   日志发送到本机，默认为514 udp端口</span><br><span class="line">    <span class="built_in">log</span> x.x.x.x local2 info     定义<span class="built_in">log</span>，和rsyslog配合使用，local3为名称，info为日志等级，需要开启UDP，最多可以定义两个</span><br><span class="line">        日志配置</span><br><span class="line">        vim /etc/rsyslog.conf</span><br><span class="line">        module(load=<span class="string">&quot;imudp&quot;</span>)</span><br><span class="line">        input(<span class="built_in">type</span>=<span class="string">&quot;imudp&quot;</span> port=<span class="string">&quot;514&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span>  local2.* /var/log/haproxy.log 或 local2.info  /var/log/haproxy.log &gt; /etc/rsyslog.d/50-default.conf</span><br><span class="line">        systemctl restart rsyslog</span><br><span class="line">defaults</span><br><span class="line">    option redispatch                   重定向其他正常服务器</span><br><span class="line">    option abortonclose                 自动结束连接时长较久的连接             </span><br><span class="line">    option http-keep-alive              开启与客户端的会话保持</span><br><span class="line">    option forwardfor                   透传真实IP至后端服务器,可自定义修改</span><br><span class="line">    mode http | tcp                     默认工作类型</span><br><span class="line">    <span class="built_in">timeout</span> http-keep-alive             会话保持时间</span><br><span class="line">    <span class="built_in">timeout</span> connect 120s                客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)默认单位 ms</span><br><span class="line">    <span class="built_in">timeout</span> server 600s                 客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，超时502</span><br><span class="line">    <span class="built_in">timeout</span> client 600s                 设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同</span><br><span class="line">    <span class="built_in">timeout</span> check 5s                    对后端服务器的默认检测超时时间</span><br><span class="line">    default-server inter 1000 weight 3  指定后端服务器的默认设置</span><br><span class="line"></span><br><span class="line">前后端整合</span><br><span class="line">listen nginx                            使用listen替换 frontend和backend的配置方式，可以简化设置，常用于TCP协议的应用       </span><br><span class="line">        <span class="built_in">bind</span> 公网IP:端口</span><br><span class="line">        mode tcp | http</span><br><span class="line">        server web1 后端IP:port</span><br><span class="line">        server web2 后端IP:port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前端服务器</span><br><span class="line">frontend  nginx</span><br><span class="line">    <span class="built_in">bind</span> 公网IP：端口</span><br><span class="line">    use_backend real-nginx</span><br><span class="line"></span><br><span class="line">后端服务器                                                                                 </span><br><span class="line">backend  real-nginx </span><br><span class="line">    redirect prefix http://www.baidu.com/                    全局重定向，只适合http</span><br><span class="line">    server web1 后端IP:port check inter 5000 fail 3 rise 3   每5秒检查一次，如果3次不通就挂，上线同理</span><br><span class="line">    server web2 后端IP:port weight 3                         权重</span><br><span class="line">    server web2 后端IP:port check backup                     备份服务器，可当sorry server</span><br><span class="line">        server后字段</span><br><span class="line">            check </span><br><span class="line">                addr &lt;IP&gt; 可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量</span><br><span class="line">                port &lt;num&gt; 指定的健康状态监测端口</span><br><span class="line">                inter &lt;num&gt; 健康状态检查间隔时间，默认2000 ms</span><br><span class="line">                fall &lt;num&gt; 后端服务器从线上转为线下的检查的连续失效次数，默认为3</span><br><span class="line">                rise &lt;num&gt; 后端服务器从下线恢复上线的检查的连续有效次数，默认为2</span><br><span class="line">            <span class="built_in">disable</span> 关闭服务器</span><br><span class="line">            maxconn 后端服务器最大连接数</span><br><span class="line">            redir http://x.x.x  局部302临时重定向到某url，只适合http</span><br><span class="line"></span><br><span class="line">listen mysql</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:3306           haproxy端口</span><br><span class="line">        mode tcp                    如果不指定tcp，会以http进行连接</span><br><span class="line">        server data1 x.x.x.x:3306   后端数据库地址和端口</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">        mode http</span><br><span class="line">        <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">        stats <span class="built_in">enable</span></span><br><span class="line">        <span class="built_in">log</span> global                  开启日志，默认不开启</span><br><span class="line">        stats uri /haproxy-status   访问后缀</span><br><span class="line">        stats auth admin:123456     开启认证</span><br><span class="line">        stats refresh 5             自动刷新，这里是每5s</span><br><span class="line">        stats admin <span class="keyword">if</span> TURE         如果是admin就允许访问stats页面</span><br></pre></td></tr></table></figure>
<p>检查配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">haproxy -c -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>
<p>创建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy</span><br><span class="line"><span class="comment">#如果没创建用户和组的话</span></span><br></pre></td></tr></table></figure>
<p>创建damon.service文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /usr/lib/systemd/system/haproxy.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=HAProxy Load Balancer</span></span><br><span class="line"><span class="string">After=syslog.target network.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStartPre=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -c -q</span></span><br><span class="line"><span class="string">#-f可指定文件，也可指定目录，目录一般存放子配置文件</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -p  /var/lib/haproxy/haproxy.pid</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -USR2 $MAINPID</span></span><br><span class="line"><span class="string">LimitNOFILE=100000</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl start haproxy</span><br></pre></td></tr></table></figure>
<p>web端访问 <a href="http://ip:9999/haproxy-status">http://ip:9999/haproxy-status</a></p>
<p>官方配置手册 <a href="http://docs.haproxy.org/2.8/configuration.html">http://docs.haproxy.org/2.8/configuration.html</a></p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>反向代理</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>开源Docker仓库管理器Harbor</title>
    <url>/2023/06/17/harbor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>安装docker和docker-compose</li>
<li>多台虚拟机…</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>10.0.0.133更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<p>这里使用官方脚本安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>
<p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start docker</span><br></pre></td></tr></table></figure>
<p>安装docker-compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /usr/bin/docker-compose -P /usr/bin  \</span><br><span class="line">https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64</span><br><span class="line">或</span><br><span class="line">wget -O /usr/bin/docker-compose -P /usr/bin http://pan.alybaba.top/soft/docker-compose-linux-x86_64</span><br></pre></td></tr></table></figure>
<p>添加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>
<p>下载Harbor镜像包,这里是离线安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.8.2/harbor-offline-installer-v2.8.2.tgz</span><br><span class="line">或</span><br><span class="line">wget http://pan.alybaba.top/soft/harbor-offline-installer-v2.8.2.tgz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local  </span><br></pre></td></tr></table></figure>
<p>自签证书,创建存放自签证书目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/harbor/certs &amp;&amp; <span class="built_in">cd</span>  /data/harbor/certs</span><br></pre></td></tr></table></figure>
<p>生成 CA（证书颁发机构）私钥 (ca.key) 和证书 (ca.crt)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out ca.key 4096</span><br><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650  \</span><br><span class="line">-subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=test.com&quot;</span> \ </span><br><span class="line">-key ca.key -out ca.crt</span><br></pre></td></tr></table></figure>
<p>生成 Harbor 服务器私钥 (harbor.test.com.key)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out harbor.test.com.key 4096</span><br></pre></td></tr></table></figure>
<p>生成 Harbor 服务器证书签名请求 (harbor.test.com.csr)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -sha512 -new -subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com&quot;</span> \</span><br><span class="line">-key harbor.test.com.key -out harbor.test.com.csr</span><br></pre></td></tr></table></figure>
<p>创建 v3.ext 文件，指定证书扩展属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; v3.ext </span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">DNS.1=test.com</span></span><br><span class="line"><span class="string">DNS.2=test</span></span><br><span class="line"><span class="string">DNS.3=harbor.test.com</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>使用 CA 证书和私钥，对之前生成的 CSR 进行签名，生成最终的 Harbor 服务器证书 (harbor.test.com.crt)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key \</span><br><span class="line">-CAcreateserial -<span class="keyword">in</span> harbor.test.com.csr -out harbor.test.com.crt</span><br></pre></td></tr></table></figure>
<p>修改 harbor 部分相关参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/harbor/harbor.yml.tmpl /usr/local/harbor/harbor.yml &amp;&amp; vim /usr/local/harbor/harbor.yml</span><br><span class="line">hostname: www.test.com</span><br><span class="line"><span class="comment">#这里需要修改hosts文件</span></span><br><span class="line">    certificate: /you/path/harbor.test.com.crt</span><br><span class="line">    private_key: /you/path/harbor.test.com.key</span><br><span class="line"><span class="comment">#你的证书和私钥存放的位置</span></span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"><span class="comment"># Harbor12345是登录密码，可以修改成你想要的密码，账号是admin</span></span><br><span class="line"><span class="comment">#这里值得注意的是，会自动修改nginx的配置文件自动跳转https</span></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>
<p><code>同时，这里要注意，因为是自签证书，浏览器访问还是会不信任，导致镜像无法推送</code><br><code>2种方法，第一，在客户端安装自签证书，第二写docker配置文件，这里就采用第二种了</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;&#123;\n&quot;insecure-registries&quot;: [&quot;harbor.test.com&quot;]\n&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class="line"><span class="comment">#意思是信任不安全的镜像仓库地址</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>启动仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/harbor  &amp;&amp; ./install.sh &amp;&amp; ./prepare &amp;&amp; docker-compose up -d</span><br><span class="line"><span class="comment">#这里也可以使用docker-compose -f /you/path/docker-compose.yml up -d 指定文件所在路径后台启动</span></span><br></pre></td></tr></table></figure>
<p>写入service文件，配置自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /lib/systemd/system/harbor.service </span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Harbor</span></span><br><span class="line"><span class="string">After=docker.service systemd-networkd.service systemd-resolved.service</span></span><br><span class="line"><span class="string">Requires=docker.service</span></span><br><span class="line"><span class="string">Documentation=http://github.com/vmware/harbor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">Restart=5</span></span><br><span class="line"><span class="string">ExecStart=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml up</span></span><br><span class="line"><span class="string">ExecStop=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml down</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>启动harbor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line"><span class="comment">#这里要注意，前面我们用docker-compose启动过的，这里我们关闭</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl start harbor.service</span><br></pre></td></tr></table></figure>
<p>linux登录仓库,输出Login Succeeded则成功，如出现其他报错，请检查日志或者报错原因</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login -u admin -p Harbor12345 harbor.test.com</span><br><span class="line"><span class="comment">#这里可以使用本机，也可以使用客户端，记得添加hosts解析以及docker信任配置</span></span><br></pre></td></tr></table></figure>
<p>接下来我们去网页端登录看看,可以看到还是提示不安全，不交钱就是这样<br><img src="/images/harbor-login.jpg" alt="logi-page"><br>登录进去创建一个项目,我这边已经创建了<br><img src="/images/harbor-create.jpg" alt="create-project"><br>然后我们就来推送一个镜像试试，首先看看有什么镜像<br><img src="/images/harbor-docker-images.jpg" alt="see-what-we-got"><br><code>可以看到，我已经操作了一边。</code><br>首先重命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag alpine-nginx:1.24.0-v3  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br><span class="line"><span class="comment">#harbor.test.com表示harbor仓库地址</span></span><br><span class="line"><span class="comment">#nginx表示你创建的项目的地址</span></span><br></pre></td></tr></table></figure>
<p>接着推送就完成了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br></pre></td></tr></table></figure>
<p>然后也可以把镜像拉下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br></pre></td></tr></table></figure>
<p><img src="/images/harbor-pull.jpg" alt="pull-images"><br>在web端我们也可以看到镜像，harbor还压缩了<br><img src="/images/harbor-images.jpg" alt="see-pull-images"><br><code>这里虽然完成的harbor的部署，但是始终是一个单点问题，所有接下来我们继续部署高可用harbor</code><br>使用另一台空闲机10.0.0.132安装 docker 和 docker-compose 环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh &lt;(curl -fsSL https://get.docker.com) &amp;&amp; wget -O /usr/bin/docker-compose  -P \</span><br><span class="line">/usr/bin  http://pan.alybaba.top/soft/docker-compose-linux-x86_64 \</span><br><span class="line">&amp;&amp; <span class="built_in">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>harbor包和service文件我已经用scp命令拷贝过来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local &amp;&amp; <span class="built_in">cd</span> /usr/local/harbor</span><br><span class="line">sed -i <span class="string">&#x27;s/hostname: reg.mydomain.com/hostname: 10.0.0.132/&#x27;</span>  harbor.yml</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;&#123;\n&quot;insecure-registries&quot;: [&quot;10.0.0.132&quot;]\n&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class="line">./install.sh  &amp;&amp; ./prepare &amp;&amp; systemctl daemon-reload</span><br><span class="line">systemctl start docker harbor.service</span><br></pre></td></tr></table></figure>
<p>那么我登上前面配置的harbor上进行高可用配置，前面的ip地址是133，它对应的仓库地址就是132<br><img src="/images/harbor-hight-use.jpg" alt="create-target"><br>做完这里，在 10.0.0.133  push镜像时已经可以同步到10.0.0.132了，那么132也同理配置，这里就不再过多叙述<br><img src="/images/harbor-hight-use-2.jpg" alt="create-policy"></p>
<h1 id="部分参考资料"><a href="#部分参考资料" class="headerlink" title="部分参考资料"></a>部分参考资料</h1><ul>
<li>docker-compose 官方下载地址: <a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></li>
<li>docker 官方文档安装地址：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li>
<li>harbor 下载地址: <a href="https://github.com/vmware/harbor/releases">https://github.com/vmware/harbor/releases</a></li>
<li>harbor 安装文档: <a href="https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md">https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>私有仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>if</title>
    <url>/2023/03/30/if/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>理解一:<br>if是条件判断语句，只有if的条件成立（表达式的值为真）后，才会执行if部分的代码，否则将会执行else的代码。<br>如果是if…else if，则满足第一个if执行第一个if里的代码，如果不满足第一个if，而满足第二个if，则执行第二个if（即else if）的代码，如果都不满足，就不执行，如果后面有else（不带if的else），则只要前面的if和else if都没执行，就执行最后一个else。</p>
<p>理解二:<br>if,else if都需要接判断表达式。else不需要判断表达式。使用else if和else，必须紧跟在if之后，形参if-esle if组或if-else对。 没有对应的if语句，else if和else语句都会在编译时报错。</p>
<p><strong><font size=4 color=#ff000>真不会<font></strong><br><audio controls><br>  <source src="mp3/以父之名周杰伦.mp3" type="audio/mpeg"><br>  Your browser does not support the audio tag.<br></audio></p>
<p><img src="/mp4/Av2047363.mp4" alt="Alt text"></p>
<video width="480" height="420" controls>
<source src="mp4/Av2047363.mp4">
</video>

]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装keepalived</title>
    <url>/2023/06/26/keeplived/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>ubuntu22.04</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>安装相关依赖和工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt -y install make gcc ipvsadm buildessential pkg-config \</span><br><span class="line">automake autoconf libipset-dev libnl-3-dev libnl-genl-3-dev \</span><br><span class="line">libssl-dev libxtables-dev libip4tc-dev libip6tc-dev libmagic-dev libsnmp-dev \</span><br><span class="line">libglib2.0-dev libpcre2-dev libnftnl-dev libmnl-dev libsystemd-dev</span><br></pre></td></tr></table></figure>
<p>下载源码包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://keepalived.org/software/keepalived-2.2.8.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf keepalived-2.2.8.tar.gz &amp;&amp; <span class="built_in">cd</span> keepalived-2.2.8/</span><br></pre></td></tr></table></figure>
<p>配置安装路径，禁用FW_MARK(可选)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived --disable-fwmark</span><br><span class="line"><span class="comment">#禁用 Keepalived 的 FW_MARK 功能，需配合防火墙打标签实现高级路由和策略</span></span><br><span class="line"><span class="comment">#未禁用该选项 使用nft list ruleset 可看到会生成一个基于nftables的规则集，导致 VIP 无法正常通信</span></span><br><span class="line"><span class="comment">#实际测试我无论是关闭还是未关闭，都会生成防火墙规则集</span></span><br><span class="line"><span class="comment">#需注释 vrrp_strict 可使 VIP 正常通信</span></span><br><span class="line"><span class="comment">#./configure 可用 --help 选项查看其他编译选项</span></span><br></pre></td></tr></table></figure>
<p>编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>拷贝 service 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -a /root/keepalived-2.2.8/keepalived/keepalived.service /lib/systemd/system/</span><br></pre></td></tr></table></figure>
<p>拷贝 conf 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span>  /usr/local/keepalived/etc/keepalived/keepalived.conf.sample  /usr/local/keepalived/etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl damon-reload  &amp;&amp;  systemctl <span class="built_in">enable</span> --now keepalived</span><br></pre></td></tr></table></figure>
<p>查看版本和编译相关参数，这里可添加路径到默认 PATH ，或软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/keepalived/sbin/keepalived -v</span><br></pre></td></tr></table></figure>
<p>查看相关参考手册</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man /usr/local/keepalived/share/man/man1/genhash.1</span><br><span class="line"><span class="comment">#keepalived 命令行工具手册页</span></span><br><span class="line">man /usr/local/keepalived/share/man/man5/keepalived.conf.5</span><br><span class="line"><span class="comment">#keepalived conf配置手册页</span></span><br><span class="line">man /usr/local/keepalived/share/man/man8/keepalived.8</span><br><span class="line"><span class="comment">#keepalived 系统管理员手册</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://keepalived.org/doc/installing_keepalived.html">https://keepalived.org/doc/installing_keepalived.html</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>keepalived</tag>
        <tag>编译</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>简单使用kvm</title>
    <url>/2023/06/08/kvm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>KVM是一种开源的虚拟化技术，它是基于Linux内核的虚拟化解决方案，全称是Kernel-based Virtual Machine。KVM利用Linux内核的虚拟化扩展，将物理主机转变为可以运行多个虚拟机的虚拟化平台。那么这里我将使用centos和ubuntu来进行简单相关部署<br><code>ubuntu 22.04部署步骤</code><br>安装相关软件,虚拟机需开启虚拟化,我这里给的内存和核心都为8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt -y install qemu-kvm virt-manager libvirt-daemon-system cockpit cockpit-machines  bridge-utils libosinfo-bin</span><br></pre></td></tr></table></figure>
<p>开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl enble --now libvirtd.service</span><br><span class="line"><span class="comment">#开源的虚拟化管理守护进程，用于支持多种虚拟化技术，包括 KVM、QEMU、Xen、LXC 等。</span></span><br></pre></td></tr></table></figure>
<p>web管理界面自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now  cockpit</span><br><span class="line">systemctl status libvirtd.service</span><br><span class="line">brctl show</span><br><span class="line"><span class="comment">#这里是查看网桥信息，该命令可添加，删除网桥，默认kvm是桥接了一个virbr0的网桥</span></span><br></pre></td></tr></table></figure>
<p>这里使用virt-manager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=10.0.0.1:0.0</span><br><span class="line"><span class="comment">#0.0为xmanager，这里我已经安装并打开了xmanager passive</span></span><br></pre></td></tr></table></figure>
<p>打开xmanager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-manager</span><br></pre></td></tr></table></figure>
<p><img src="/images/xmanager-ok.jpg" alt="X-manager"><br>乱码请选择英文</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localctl set-locale LANG=en-US.UTF-8</span><br></pre></td></tr></table></figure>
<p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/iso &amp;&amp; <span class="built_in">cd</span> /data/iso</span><br></pre></td></tr></table></figure>
<p>安装windows</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">--virt-type=kvm \</span><br><span class="line">--name win2016 \</span><br><span class="line">--ram 4096 \</span><br><span class="line">--vcpus 4 \</span><br><span class="line">--os-variant=win2k16 \</span><br><span class="line"><span class="comment">#注意，这里是根据libosinfo-bin | grep win查看到的</span></span><br><span class="line">--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \</span><br><span class="line">--network=bridge=virbr0,model=virtio \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 --noautoconsole \</span><br><span class="line">--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2</span><br></pre></td></tr></table></figure>
<p>进入控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-manager</span><br><span class="line"><span class="comment">#这里报错请export DISPLAY=你和虚拟机网卡的网关:0.0</span></span><br></pre></td></tr></table></figure>
<p>然后一直点下一步，直到这里，因为默认是不支持windows的virtio<br><img src="/images/win-1.jpg" alt="缺少驱动"></p>
<p>下载驱动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso</span><br></pre></td></tr></table></figure>
<p>然后重新来…记得删除或者暂停改个名也行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">--virt-type=kvm \</span><br><span class="line">--name win2016 \</span><br><span class="line">--ram 4096 \</span><br><span class="line">--vcpus 4 \</span><br><span class="line">--os-variant=win2k16 \</span><br><span class="line">--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \</span><br><span class="line">--network=bridge=virbr0,model=virtio \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 --noautoconsole \</span><br><span class="line">--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2 \</span><br><span class="line">--disk path=/data/iso/virtio-win-0.1.229.iso,device=cdrom</span><br><span class="line"><span class="comment">#这里就是下载的驱动，关联一下</span></span><br></pre></td></tr></table></figure>
<p>可以看到已经加载的原镜像和驱动<br><img src="/images/win-2.jpg" alt="成功加载"><br>选择加载驱动程序<br><img src="/images/win-3.jpg" alt="选择驱动"><br>选择2016，下一步<br><img src="/images/win-4.jpg" alt="加载驱动"><br>可以看到出来磁盘了，这里我就默认了<br><img src="/images/win-5.jpg" alt="配置磁盘"><br>等待安装…<br><img src="/images/win-6.jpg" alt="安装中..."><br>经过N遍重启成功进入<br><img src="/images/win-7.jpg" alt="安装中..."><br>安装网卡驱动<br><img src="/images/win-8.jpg" alt="安装网卡驱动"><br>安装PCI驱动<br><img src="/images/win-9.jpg" alt="安装PCI驱动"><br>其他驱动可依葫芦画瓢去挂载的驱动ISO里面去找，windows克隆可能会出现冲突，所以想要克隆可执行win自带初始化程序(谁会没事在linux克隆win？？？)<br><img src="/images/win-10.jpg" alt="初始化"><br>打快照，点击两个个电脑图标<br><img src="/images/win-11.jpg" alt="快照"><br>接着创建快照就行了<br><img src="/images/win-12.jpg" alt="快照"></p>
<p><code>rocky 8.x 部署步骤</code><br>centos我就用图形web安装了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install qemu-kvm libvirt virt-manager virt-install  virt-viewer   cockpit  cockpit-machines</span><br><span class="line">systemctl start --now cockpit.socket</span><br><span class="line">systemctl start --now libvirtd</span><br></pre></td></tr></table></figure>
<p>输入本机ip加port，我这里是10.0.0.200:9090<br><img src="/images/fist-page.jpg" alt="首页"><br>然后点击虚拟机，创建虚拟机，注意，我已经创建目录，上传了镜像，所有我选择本地安装，这里还能编辑配置，点击创建并运行或者安装即可<br><img src="/images/create-vm.jpg" alt="创建虚拟机"><br><img src="/images/more-setting.jpg" alt="更多硬件自定义配置"><br>点一下界面，用鼠标上下键选择安装centos7<br><img src="/images/create-ok.jpg" alt="安装centos7"><br>做好配置好进行安装，这里安装的mini版，所以就300个,完成后请用 TAB 键选择reboot重启<br><img src="/images/install-centos7.jpg" alt="安装centos7-1"><br>到这里就安装完成了<br><img src="/images/install-ok.jpg" alt="成功安装centos7"></p>
<p><code>命令行配置</code><br>创建一个20G的虚拟机磁盘文件，copy该文件，在图形化界面可导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-img create -f qcow2 /var/lib/libvirt/images/centos7.qcow2 20G</span><br></pre></td></tr></table></figure>
<p>初始化配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-install --virt-type kvm \</span><br><span class="line">--name centos7 \</span><br><span class="line">--ram 1024 \</span><br><span class="line">--vcpus 2 \</span><br><span class="line">--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \</span><br><span class="line">--disk path=/var/lib/libvirt/images/centos7.qcow2 \</span><br><span class="line">--network network=default \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--os-variant=centos7.0</span><br><span class="line"><span class="comment">#注意这里os-variant应该和支持的系统相同，这里必须先创建文件才能执行该命令</span></span><br><span class="line"><span class="comment">#--virt-type kvm意思是虚拟化类型为kvm</span></span><br><span class="line"><span class="comment">#--name centos7 虚拟机名称为centos7，可以自定义</span></span><br><span class="line"><span class="comment">#--ram 1024 内存分配1024mb，也可使用memory</span></span><br><span class="line"><span class="comment">#--vcpus 2 分配cpu核数为2核</span></span><br><span class="line"><span class="comment">#--cdrom= 指定光驱镜像路径为</span></span><br><span class="line"><span class="comment">#--disk=  指定虚拟机磁盘镜像为</span></span><br><span class="line"><span class="comment">#--network network=default 指定网络为系统默认</span></span><br><span class="line"><span class="comment">#--graphics vnc,listen=0.0.0.0 指定虚拟机使用 VNC 图形界面，并监听所有网络接口。</span></span><br><span class="line"><span class="comment">#--noautoconsole 不自动打开虚拟机的控制台</span></span><br><span class="line"><span class="comment">#--os-variant=centos7.0 指定虚拟机的操作系统为 CentOS 7</span></span><br></pre></td></tr></table></figure>
<p>或者指定虚拟机磁盘文件一步到位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-install --virt-type kvm \</span><br><span class="line">--name centos7 \</span><br><span class="line">--ram 1024 \</span><br><span class="line">--vcpus 2 \</span><br><span class="line">--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \</span><br><span class="line">--disk path=/var/lib/libvirt/images/centos7.qcow2,size=10,format=qcow2,bus=virtio \</span><br><span class="line">--network network=default \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--os-variant=centos7.0</span><br><span class="line"><span class="comment">#size=10,format=qcow2,bus=virtio,size=10为虚拟磁盘文件为10G，格式为qcow2，总线为virtio</span></span><br></pre></td></tr></table></figure>
<p><code>克隆机器</code><br>方法1，复制已经安装的虚拟机磁盘文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2</span><br></pre></td></tr></table></figure>
<p>在图形化界面选择导入<br><img src="/images/clone-1.jpg" alt="导入复制的虚拟机磁盘文件"><br>指定路径，选择操作系统<br><img src="/images/clone-2.jpg" alt="继续操作"><br>配置cpu和ram<br><img src="/images/clone-3.jpg" alt="配置硬件"><br>这里我改个名<br><img src="/images/clone-4.jpg" alt="修改虚拟机名称"><br>然后完成了<br><img src="/images/clone-5.jpg" alt="克隆完成"></p>
<p>方法2,复制虚拟机磁盘文件，注意前面的复制我删了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2</span><br></pre></td></tr></table></figure>
<p>命令行指定克隆机配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-install --virt-type kvm \</span><br><span class="line">--name centos7-2 \</span><br><span class="line">--ram 1024 --vcpus 2 \</span><br><span class="line">--disk path=/var/lib/libvirt/images/centos7-2.qcow2,bus=virtio \</span><br><span class="line">--network network=default,model=virtio \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--autostart \</span><br><span class="line">--boot hd</span><br><span class="line"><span class="comment">#--network network=default,model=virtio 使用virtio模型</span></span><br><span class="line"><span class="comment">#--autostart 虚拟机启动时自动启动</span></span><br><span class="line"><span class="comment">#--boot hd 启动顺序为从硬盘启动</span></span><br></pre></td></tr></table></figure>
<p>然后在控制台也可以看见了，直接双击打开就ok<br><img src="/images/clone-6.jpg" alt="命令行克隆"></p>
<p>方法3,基于现有虚拟机克隆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-clone -o centos7  -f /var/lib/libvirt/images/centos7-2.qcow2 -n centos7-2</span><br><span class="line"><span class="comment">#-o centos7 意思是根据现有虚拟机名称进行克隆</span></span><br><span class="line"><span class="comment">#-f /var/lib/libvirt/images/centos7-2.qcow2 新虚拟机磁盘文件的路径和名称</span></span><br><span class="line"><span class="comment">#-n centos7-2 新虚拟机的名称</span></span><br><span class="line"><span class="comment">#这里要注意的是，被克隆的虚拟机需要关机才行，不然会报错。然后克隆出来注意IP</span></span><br><span class="line"><span class="comment">#可写脚本批量创建</span></span><br></pre></td></tr></table></figure>
<p>部分参考链接和术语解释</p>
<ul>
<li><a href="https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md">https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md</a></li>
<li><a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/</a></li>
<li><a href="https://www.linux-kvm.org/">https://www.linux-kvm.org</a></li>
<li>QEMU-KVM 是一种开源的虚拟化解决方案，结合了QEMU和KVM两个组件，用于创建和管理虚拟机</li>
<li>virt-manager 是一个图形化的虚拟机管理工具，用于管理KVM和QEMU虚拟化环境。</li>
<li>libvirt 是一个开源的虚拟化管理工具，它提供了一个统一的接口和工具集，用于管理各种虚拟化平台（如KVM、QEMU、Xen等）上的虚拟机和虚拟化资源。</li>
<li>Cockpit 是一个用于管理Linux服务器的图形化Web界面工具</li>
<li>Cockpit Machines（也称为Virtual Machines）是Cockpit的一个插件，它提供了一个图形化的界面来管理和操作虚拟机。</li>
<li>Bridge-utils 是一个用于 Linux 系统的网络管理工具，它提供了创建和管理网络桥接的功能。</li>
<li>libosinfo-bin 是一个用于操作操作系统信息库（OS information database）的命令行工具。</li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Kvm</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL半同步复制简单实现</title>
    <url>/2023/05/05/mysql%E5%8D%8A%E5%A4%8D%E5%88%B6%E4%B8%BB%E4%BB%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在mysql8.0中实现半同步复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">主机IP 	         角色    MySQL版本</span><br><span class="line">172.18.0.127	master     8以上</span><br><span class="line">172.18.0.48	slave-1    8以上</span><br><span class="line">172.18.0.43 	slave-2    8以上</span><br></pre></td></tr></table></figure>
<p>master配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="string">&#x27;semisync_master.so&#x27;</span>;</span><br><span class="line">--安装半同步插件</span><br><span class="line">show master logs; </span><br><span class="line">--查看二进制文件,主从同步用</span><br><span class="line">create user  backuser@<span class="string">&#x27;172.18.0.%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span> </span><br><span class="line"> --创建主从账号</span><br><span class="line">grant replication slave on *.* to backuser@<span class="string">&#x27;172.18.0.%&#x27;</span>   </span><br><span class="line"> --给与相应权限</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=123</span><br><span class="line">rpl_semi_sync_master_enabled</span><br><span class="line">log-bin=/mysql/log/binlog</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /mysql/log &amp;&amp; <span class="built_in">chown</span> -R mysql.mysql /mysql</span><br><span class="line">systemctl restart mysqld.service</span><br><span class="line">select @@rpl_semi_sync_master_enabled;  </span><br><span class="line">--查看是否开启</span><br></pre></td></tr></table></figure>


<p>slave节点48配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line">--安装slave半同步插件</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=48</span><br><span class="line">rpl_semi_sync_master_enabled</span><br><span class="line">log-bin=/mysql/log/binlog</span><br><span class="line"><span class="built_in">mkdir</span> -p /mysql/log &amp;&amp; <span class="built_in">chown</span> -R mysql.mysql /mysql</span><br><span class="line">systemctl restart mysqld.service</span><br><span class="line">select @@rpl_semi_sync_slave_enabled;  </span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.18.0.127&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=157;</span><br><span class="line"></span><br><span class="line">strat slave;</span><br></pre></td></tr></table></figure>
<p>slave节点43配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="string">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class="line">--安装slave半同步插件</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=43</span><br><span class="line">rpl_semi_sync_slave_enabled</span><br><span class="line">log-bin=/mysql/log/binlog</span><br><span class="line"><span class="built_in">mkdir</span> -p /mysql/log &amp;&amp; <span class="built_in">chown</span> -R mysql.mysql /mysql</span><br><span class="line">systemctl restart mysqld.service</span><br><span class="line">select @@rpl_semi_sync_slave_enabled;  </span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.18.0.127&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=157;</span><br><span class="line"></span><br><span class="line">start slave</span><br></pre></td></tr></table></figure>
<p>到这里我们的半同步复制就基本上完成了，由于这里是基于全新机器，所以比较快，当然如果是现有数据，直接备份主机还原的从鸡上就行了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看半同步策略</span><br><span class="line">show global variables like <span class="string">&#x27;%semi%&#x27;</span>;</span><br><span class="line">--查看有几个节点</span><br><span class="line">show global status like <span class="string">&#x27;%semi%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这里我们来测试下半同步的原理（至少有一个节点同步成功才会给客户端返回成功，当然也有可能是超时，超时时间可自定义）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先我们测试从机是否能够同步</span></span><br><span class="line">Master</span><br><span class="line">mysql&gt; create database testdb1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Slave-1</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Database              |</span><br><span class="line">+-----------------------+</span><br><span class="line">| db1                   |</span><br><span class="line">| information_schema    |</span><br><span class="line">| mysql                 |</span><br><span class="line">| performance_schema    |</span><br><span class="line">| sys                   |</span><br><span class="line">| testdb1               |</span><br><span class="line">+-----------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Slave-2</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Database              |</span><br><span class="line">+-----------------------+</span><br><span class="line">| db1                   |</span><br><span class="line">| information_schema    |</span><br><span class="line">| mysql                 |</span><br><span class="line">| performance_schema    |</span><br><span class="line">| sys                   |</span><br><span class="line">| testdb1               |</span><br><span class="line">+-----------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>可以看到都没问题，那我们停掉一台从机，再写入数据试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br><span class="line"></span><br><span class="line">create database testdb2;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>还是没问题，我我们停掉第二台主机试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br><span class="line">create database testdb3;</span><br><span class="line">Query OK, 1 row affected (10.00 sec)</span><br></pre></td></tr></table></figure>
<p>现在可以看到，当我们把两台从机停了之后，主机不知道找谁写入了，虽然如此，但还是有一个超时机制，默认10s。10s后不管有没有其他从机连上，都会提交本次写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--修改超时配置my.cnf</span><br><span class="line">rpl_semi_sync_master_timeout=3000</span><br></pre></td></tr></table></figure>

<p>总结：半同步复制是 MySQL 的一种数据复制方式，相对于异步复制，它提高了数据复制的安全性，同时保持了较高的性能。半同步复制的基本思路是：当主库执行一个事务后，只有等到至少一个从库接收并写入了该事务才会提交成功。这样可以保证从库的数据和主库的数据是同步的。（PS：如果从机全部掉线也不是不可能）<br>半同步复制的好处是：提高数据复制的安全性，防止从库数据丢失。相对于同步复制，半同步复制的性能有所提高，因为主库不需要等待所有从库都接收并写入数据。半同步复制的缺点是：相对于异步复制，半同步复制会增加主库的负载，因为主库需要等待至少一个从库接收数据。但总的来说，半同步复制是一种较好的数据复制方式，它提高了数据复制的安全性，同时也能保持较高的性能。<br>同时我们还可以使用复制过滤器让从节点仅复制指定的数据库，或指定数据库的指定表，有兴趣的可以自行尝试。其实现方法就是往mysql配置文件写黑白名单。</p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让nginx支持QUIC和HTTP3</title>
    <url>/2023/05/21/nginx%E7%BC%96%E8%AF%912/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是-HTTP-x2F-3-和-QUIC-？"><a href="#什么是-HTTP-x2F-3-和-QUIC-？" class="headerlink" title="什么是 HTTP&#x2F;3 和 QUIC ？"></a>什么是 HTTP&#x2F;3 和 QUIC ？</h1><ul>
<li>HTTP&#x2F;3 是一种基于 QUIC（Quick UDP Internet Connections）协议的 HTTP 协议版本，它是 HTTP&#x2F;2 的后继者，旨在改进 Web 性能和安全性。</li>
<li>HTTP&#x2F;3 与之前的 HTTP 协议有很大的不同，最明显的区别是它使用 QUIC 协议而不是 TCP 协议来传输数据。</li>
<li>QUIC 是一种由 Google 开发的协议，基于 UDP，它在保持安全性的同时提供更快的连接和更少的延迟。与 TCP 不同，QUIC 允许多个请求同时在同一连接上进行，从而减少了网络拥塞和握手延迟的影响。</li>
</ul>
<h2 id="参考图"><a href="#参考图" class="headerlink" title="参考图"></a>参考图</h2><p><img src="/images/http.png" alt="http三种协议"></p>
<h2 id="那么接下来我将介绍几种常见nginx编译http3的方法"><a href="#那么接下来我将介绍几种常见nginx编译http3的方法" class="headerlink" title="那么接下来我将介绍几种常见nginx编译http3的方法"></a>那么接下来我将介绍几种常见nginx编译http3的方法</h2><h2 id="基于谷歌boringssl编译"><a href="#基于谷歌boringssl编译" class="headerlink" title="基于谷歌boringssl编译"></a>基于谷歌boringssl编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我直接在root家目录进行的操作，请注意你们的目录</span></span><br><span class="line">apt update &amp;&amp; apt install build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build hgsubversion</span><br><span class="line"><span class="comment">#安装相关依赖</span></span><br><span class="line">apt install software-properties-common -y</span><br><span class="line">add-apt-repository ppa:longsleep/golang-backports</span><br><span class="line">apt install golang</span><br><span class="line">go --version</span><br><span class="line"><span class="comment">#默认源安装的go版本过低...</span></span><br><span class="line">git <span class="built_in">clone</span>  https://github.com/google/boringssl.git</span><br><span class="line"><span class="comment">#拉取项目，国内兄弟自己找镜像站点，我服务器在国外，这玩意大的很</span></span><br><span class="line"><span class="built_in">cd</span> boringssl/</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="comment">#存放编译文件</span></span><br><span class="line"><span class="built_in">cd</span> build/</span><br><span class="line">cmake -GNinja ..</span><br><span class="line">ninja</span><br><span class="line"><span class="comment">#这个编译非常吃内存，我服务器一G内存直接原地爆炸，最好是拉到好点配置的机子上编译好，不然真的容易爆炸。</span></span><br><span class="line"><span class="comment">#我这里编译了一份，点击这里查看[openssl已编译打包好](http://pan.alybaba.top/openssl.tar.gz)</span></span><br><span class="line"></span><br><span class="line">hg <span class="built_in">clone</span> -b quic https://hg.nginx.org/nginx-quic</span><br><span class="line"><span class="comment">#hg跟git差不多</span></span><br><span class="line">或者wget https://hg.nginx.org/nginx-quic/archive/quic.tar.gz</span><br><span class="line">tar xf quic.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-quic-8057e053480a</span><br><span class="line">nginx -V</span><br><span class="line">./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module --with-cc-opt=<span class="string">&quot;-I../boringssl/include&quot;</span> --with-ld-opt=<span class="string">&quot;-L../boringssl/build/ssl -L../boringssl/build/crypto&quot;</span></span><br><span class="line"><span class="comment">#复制自己nginx的配置，然后把http3的选项加上即可，没什么问题就接着往下编译</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span> --all)</span><br><span class="line"><span class="comment">#我用虚拟机分的8核编译，没问题的话应该会多出来一个objs的目录,里面会有一个二进制文件</span></span><br><span class="line"><span class="built_in">cp</span> -af objs/nginx   /sbin/nginx </span><br><span class="line"><span class="comment">#替换当前</span></span><br><span class="line">vim /etc/nginx/conf.d/http3.conf</span><br><span class="line">server&#123;</span><br><span class="line">        listen 443 quic reuseport;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        server_name  you domain name;</span><br><span class="line">        ssl_certificate /you/path/you.pem;</span><br><span class="line">        ssl_certificate_key /you/path/you.key;</span><br><span class="line">        ssl_protocols  TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">        add_header alt-svc <span class="string">&#x27;h3-23=&quot;:443&quot;; ma=86400&#x27;</span>;</span><br><span class="line">        <span class="comment">#这个声明是必须的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#对了，想实现http3，必需要安装证书，推荐acme.sh或者certbot，实在不行就用openssl自签。</span></span><br><span class="line"></span><br><span class="line">iptables -IINPUT -p udp --dport 443 -j ACCEPT</span><br><span class="line">iptables -IINPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"><span class="comment">#最后的话去控制台防火墙开一下443的UDP端口，(ps:命令行不起作用，可能我太菜，最好还是去控制台开一下)TCP也要开一下</span></span><br><span class="line">netstat -nupl</span><br><span class="line"><span class="comment">#查看udp端口是否监听</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<h2 id="基于OpenSSL的quictlc编译"><a href="#基于OpenSSL的quictlc编译" class="headerlink" title="基于OpenSSL的quictlc编译"></a>基于OpenSSL的quictlc编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/quictls/openssl.git</span><br><span class="line"><span class="built_in">cd</span>  openssl</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line">./Configure --prefix=/root/openssl/build --openssldir=./build</span><br><span class="line"><span class="comment">#配置路径，第一个必须要绝对路径</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span> --all) &amp;&amp; make install_dev</span><br><span class="line"><span class="comment">#编译没问题的话，build文件夹里应该会有include和lib64的文件夹</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> ../nginx-quic-8057e053480a</span><br><span class="line">nginx -V</span><br><span class="line">./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module  --with-cc-opt=<span class="string">&quot;-I /root/openssl/include&quot;</span>  --with-ld-opt=<span class="string">&quot;-L /root/openssl/lib64&quot;</span></span><br><span class="line"><span class="comment">#那么没有问题的话这里也会生成objs目录，目录下也会有二进制文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里有一点要注意的是他那个那个没有集成到nginx里面，所以需要把 lib64的两个库文件给复制到 /lib 目录下</span></span><br><span class="line"><span class="built_in">cp</span> -a ../openssl/build/lib64/*.81.3  /lib</span><br><span class="line"><span class="comment">#接下来参考谷歌boringssl编译</span></span><br></pre></td></tr></table></figure>
<h2 id="基于Cloudflare的quiche编译"><a href="#基于Cloudflare的quiche编译" class="headerlink" title="基于Cloudflare的quiche编译"></a>基于Cloudflare的quiche编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br><span class="line"><span class="comment">#安装rust</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br><span class="line"><span class="comment">#生效变量</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class="line"><span class="comment">#支持1.19.4</span></span><br><span class="line">tar xf nginx-1.16.1.tar.gz</span><br><span class="line">git <span class="built_in">clone</span>  https://github.com/cloudflare/quiche</span><br><span class="line"><span class="built_in">cd</span>  nginx-1.16.1</span><br><span class="line">patch -p01 &lt; ../quiche/nginx/nginx-1.16.patch</span><br><span class="line"><span class="comment">#打补丁2选1，这个是官方的，版本老点</span></span><br><span class="line">或curl https://raw.githubusercontent.com/kn007/patch/master/nginx_with_quic.patch | patch -p1</span><br><span class="line"><span class="comment">#实测打这个补丁在make时会报错，需要从其他版本替换一个同名c文件，我替换的是1.14.1，其他自行测试</span></span><br><span class="line"></span><br><span class="line">curl https://raw.githubusercontent.com/kn007/patch/master/Enable_BoringSSL_OCSP.patch | patch -p1</span><br><span class="line"><span class="comment">#支持 OCSP Stapling</span></span><br><span class="line"></span><br><span class="line">./configure 你的其他nginx模块 --with-http_v3_module --with-openssl=../quiche/quiche/deps/boringssl --with-quiche=../quiche</span><br><span class="line"><span class="comment">#这是需要添加的项，后面两个请根据自己的路径来</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span> --all)</span><br><span class="line"><span class="comment">#接下来请参考boringssl编译</span></span><br></pre></td></tr></table></figure>
<h2 id="基于官方安装，rhel需9以上，ubuntu需22-04"><a href="#基于官方安装，rhel需9以上，ubuntu需22-04" class="headerlink" title="基于官方安装，rhel需9以上，ubuntu需22.04"></a>基于官方安装，rhel需9以上，ubuntu需22.04</h2><h3 id="请参考官网"><a href="#请参考官网" class="headerlink" title="请参考官网"></a>请参考<a href="https://quic.nginx.org/packages.html">官网</a></h3><h2 id="下载别人编译好的二进制文件或者安装包"><a href="#下载别人编译好的二进制文件或者安装包" class="headerlink" title="下载别人编译好的二进制文件或者安装包"></a>下载别人编译好的二进制文件或者安装包</h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -z -v -u IP地址 443 </span><br><span class="line"><span class="comment">#发送一个udp数据包</span></span><br><span class="line">tcpdump -i 你的网卡名 -A -s0 port 443 and udp</span><br><span class="line"><span class="comment">#打开浏览器的开发工具，通常是F12，点击网络，刷新也可查看当前使用的网络协议</span></span><br></pre></td></tr></table></figure>
<h2 id="在线测试链接"><a href="#在线测试链接" class="headerlink" title="在线测试链接"></a><a href="https://http3check.net/">在线测试链接</a></h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><del>反正我编译不下十遍了，一直不支持，怀疑是防火墙问题…</del></li>
<li>注意，QUICh还是一个相对较新的协议，在某些情况下可能与特定的网络环境不兼容。在使用QUIC时，建议测试和评估其在特定环境中的性能和兼容性，不建议生产环境使用…</li>
<li>国内对UDP不是太友好，容易qos。我指的是…其实是udp不容易溯源，且难以控制，对网络安全有一定的影响。</li>
<li><del>可能还有其他的安装方法，这里我就不再演示了，因为我魔怔了…</del></li>
<li>总的来说，HTTP&#x2F;3 的设计目标是通过减少延迟和提高性能，为 Web 应用程序提供更快、更安全和更高效的用户体验。感兴趣的可以自行尝试哈，毕竟是未来的趋势。</li>
</ol>
<h2 id="参考官方文献"><a href="#参考官方文献" class="headerlink" title="参考官方文献"></a>参考官方文献</h2><ul>
<li><a href="https://quic.nginx.org/readme.html">https://quic.nginx.org/readme.html</a></li>
<li><a href="http://nginx.org/en/docs/quic.html">http://nginx.org/en/docs/quic.html</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_v3_module.html">http://nginx.org/en/docs/http/ngx_http_v3_module.html</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>http3</tag>
        <tag>quic</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装和多实例</title>
    <url>/2023/06/30/redis-install/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>ubuntu22.04 或 CentOS 8</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p><code>源安装</code><br>如需安装较新版本，可添加对应源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install redis -y</span><br><span class="line">apt install redis -y</span><br></pre></td></tr></table></figure>
<p><code>编译安装</code><br>红帽系编译工具和依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y gcc make jemalloc-devel systemd-devel </span><br><span class="line"><span class="comment">#报错清yum install epel-release</span></span><br></pre></td></tr></table></figure>
<p>答辩系编译工具和依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y gcc make libjemalloc-dev libsystemd-dev</span><br></pre></td></tr></table></figure>
<p>下载源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-7.0.11.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf redis-7.0.11.tar.gz &amp;&amp; <span class="built_in">cd</span> redis-7.0.11</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j $(<span class="built_in">nproc</span> -all) USE_SYSTEMD=<span class="built_in">yes</span> PREFIX=/apps/redis install</span><br></pre></td></tr></table></figure>
<p>写变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=/apps/redis/bin:$PATH&#x27;</span> &gt; /etc/profiled.d/redis.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profiled.d/redis.sh</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">ln</span> -s /apps/redis/bin/redis-* /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>创建相关文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /apps/redis/&#123;etc,<span class="built_in">log</span>,run,data&#125;</span><br></pre></td></tr></table></figure>
<p>复制配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> redis.conf /apps/redis/etc/</span><br><span class="line">vim /apps/redis/etc/redis.conf</span><br><span class="line">    pidfile /apps/redis/run/redis_6379.pid</span><br><span class="line">    logfile <span class="string">&quot;/apps/redis/log/redis_6379.log&quot;</span></span><br><span class="line">    <span class="built_in">dir</span> /apps/redis/data   </span><br></pre></td></tr></table></figure>
<p>添加用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -r -s /sbin/nologin redis</span><br></pre></td></tr></table></figure>
<p>授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R redis.redis  /apps/redis/</span><br></pre></td></tr></table></figure>
<p>写daemon文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /lib/systemd/system/redis.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Redis persistent key-value database</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=/apps/redis/bin/redis-server /apps/redis/etc/redis.conf --supervised systemd</span></span><br><span class="line"><span class="string">ExecStop=/bin/kill -s QUIT \$MAINPID</span></span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">User=redis</span></span><br><span class="line"><span class="string">Group=redis</span></span><br><span class="line"><span class="string">RuntimeDirectory=redis</span></span><br><span class="line"><span class="string">RuntimeDirectoryMode=0755</span></span><br><span class="line"><span class="string">LimitNOFILE=1000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>大公告成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl <span class="built_in">enable</span> --now  redis </span><br></pre></td></tr></table></figure>
<h1 id="常见报错解决"><a href="#常见报错解决" class="headerlink" title="常见报错解决"></a>常见报错解决</h1><ul>
<li><p>Tcp backlog报错</p>
<ol>
<li>echo 4096 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn   全连接队列，需要511以上redis才不会报错</li>
<li>echo net.core.somaxconn &#x3D; 4096 &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</li>
</ol>
</li>
<li><p>Memory overcommit </p>
<ol>
<li>echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;overcommit_memory</li>
<li>echo vm.overcommit_memory &#x3D; 1 &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</li>
</ol>
<ul>
<li>0 表示有物理内存就分配，没有就返回错误</li>
<li>1 表示分配所有内存，无论是否有内存</li>
<li>2 表示分配超内存和交换空间总和的内存</li>
</ul>
</li>
<li><p>transparent hugepage</p>
<ol>
<li>echo never &gt; &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled</li>
<li>写入到开机执行脚本中，例如bashrc，profile</li>
</ol>
</li>
</ul>
<h1 id="常见配置文件选项"><a href="#常见配置文件选项" class="headerlink" title="常见配置文件选项"></a>常见配置文件选项</h1><p>sed -i ‘&#x2F;^bind&#x2F;s&#x2F;.*&#x2F;bind 0.0.0.0&#x2F;‘ redis.conf<br><code>替换本地监听</code><br>sed -i ‘s&#x2F;#save 3600 1 300 100 60 10000&#x2F;save 3600 1 300 100 60 10000&#x2F;‘ redis.conf<br><code>开启自动 bgsava</code><br>dir &#x2F;app&#x2F;redis&#x2F;data<br><code>数据文件存放位置</code><br>pidfile &#x2F;apps&#x2F;redis&#x2F;run&#x2F;redis_6379.pid<br><code>pid 文件存放位置</code><br>dbfilename dump6379.rdp<br><code>数据文件名</code><br>port 6379<br><code>端口</code><br>protected-mode yes<br><code>拒绝外部访问</code><br>requirepass “123456”<br><code>授权密码</code><br>··········</p>
<h1 id="多实例配置"><a href="#多实例配置" class="headerlink" title="多实例配置"></a>多实例配置</h1><p>配置文件多实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/6379/6380/g&#x27;</span> /app/redis/etc/redis.conf &gt; /app/redis/etc/redis6380.conf</span><br></pre></td></tr></table></figure>
<p>daemon文件多实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/redis.conf/redis6379.conf/&#x27;</span>  /lib/systemd/system.redis.service &gt; /lib/systemd/system.redis6380.service </span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl start redis*</span><br></pre></td></tr></table></figure>
<p><code>同理，只要端口，pid文件，配置文件，数据文件，service文件和日志文件名不一致，即可开启多实例</code></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>版本选择 <a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></li>
<li>官方安装教程参考 <a href="https://redis.io/docs/getting-started/installation/">https://redis.io/docs/getting-started/installation/</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Databases</tag>
      </tags>
  </entry>
  <entry>
    <title>kms active windows</title>
    <url>/2023/06/20/windows_active/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近有公司同事问我如何激活windows主机，它的系统不能改壁纸，屏幕上有未激活字样…由于系统太卡原因换了一块三星980pro(真尼玛有钱啊！！！)重装系统后未激活。百度了一下，我是想在公司本地虚拟机局域网搭建一个kms激活服务，由于它是家里的，不得已我在我其中的一台服务器上搭建一下，下面是部署步骤，本地和云通用</p>
<h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>准备一台机器，centos，ubuntu，debian，alma，rocky，版本不限</li>
<li>安装docker</li>
<li>运行kms激活服务</li>
<li>win端激活</li>
</ul>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>本机是ubuntu20.04，安装docker,我是添加源装的最新版。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install docker.io</span><br></pre></td></tr></table></figure>
<p>拉取运行kms服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1688:1688 --restart=always --name vlmcsd mikolatero/vlmcsd</span><br></pre></td></tr></table></figure>
<p>开启防火墙,我用的是iptables</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t filter -I INPUT -p tcp --dport 1688 -j ACCEPT</span><br><span class="line">ufw allow tcp/1688 &amp;&amp; ufw reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#在本机CMD测试端口是否开启</span></span><br><span class="line">telnet you_domian or you_ipaddress 1688</span><br></pre></td></tr></table></figure>
<p>然后在windows桌面新建一个文本文件，修改后缀名未.bat，把下面代码copy进去后，右击管理员运行该.bat文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 开始获取管理员权限...</span><br><span class="line"></span><br><span class="line">%1 %2</span><br><span class="line">mshta vbscript:createobject(&quot;shell.application&quot;).shellexecute(&quot;%~s0&quot;,&quot;goto :runas&quot;,&quot;goto :notadmin&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit</span><br><span class="line"></span><br><span class="line">:notadmin</span><br><span class="line">echo 获取管理员权限失败，请右键点击此文件，选择“以管理员身份运行”。</span><br><span class="line">pause</span><br><span class="line">EXIT</span><br><span class="line"></span><br><span class="line">:runas</span><br><span class="line">:: KMS 服务器地址</span><br><span class="line">SET KMSAddress=you_ipaddress or you domain</span><br><span class="line">:: KMS 服务器端口，默认为 1688，通常无需修改。</span><br><span class="line">SET KMSPort=1688</span><br><span class="line">:: Windows 10 Enterprise 的 GVLK 密钥</span><br><span class="line">:: NPPR9-FWDCX-D2C8J-H872K-2YT43</span><br><span class="line">SET GVLK=NPPR9-FWDCX-D2C8J-H872K-2YT43</span><br><span class="line">:: 这里用的是企业版，有其他需求可以去微软官方查找密钥，链接我放到下方了</span><br><span class="line">echo 已获取管理员权限，将开始为产品进行授权...</span><br><span class="line">echo=</span><br><span class="line">echo 开始卸载现有产品密钥...</span><br><span class="line">cscript //Nologo %windir%\system32\slmgr.vbs -upk</span><br><span class="line">echo 开始安装新的产品密钥...</span><br><span class="line">cscript //Nologo %windir%\system32\slmgr.vbs -ipk %GVLK%</span><br><span class="line">:: 指定 KMS（密钥管理服务） 服务器的 IP 地址或域名</span><br><span class="line">echo 开始设置 KMS 服务器...</span><br><span class="line">cscript //Nologo %windir%\system32\slmgr.vbs -skms %KMSAddress%</span><br><span class="line">:: 指定 KMS（密钥管理服务）服务器的 TCP 通信端口</span><br><span class="line">cscript //Nologo %windir%\system32\slmgr.vbs -sprt %KMSPort%</span><br><span class="line">echo 开始激活 Windows 10 企业版...</span><br><span class="line">cscript //Nologo %windir%\system32\slmgr.vbs -ato</span><br><span class="line">:: 显示当前许可证的有效日期</span><br><span class="line">cscript //Nologo %windir%\system32\slmgr.vbs -xpr</span><br><span class="line">pause</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>查看服务端日志,可以看到还支持office<br><img src="/images/kms_server.jpg"><br>往下翻查看连接信息,可以看到就是已经激活了，到此已经完成<br><img src="/images/kms_server_active.jpg"></p>
<h1 id="部署总结"><a href="#部署总结" class="headerlink" title="部署总结"></a>部署总结</h1><ul>
<li>只支持半年，半年后会自动续订，前提是服务存活，不过可以部署在本地局域网</li>
<li>看到这么多IP扫我，俺也不懂，不可能激活一个就写一个防火墙规则把</li>
<li>windows有时候会抽风多试几遍，不行就重启再试</li>
<li>不知道win11支持不，暂时不想用win11</li>
<li>不知道这个用来企业批量激活会不会出事，请支持正版</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>微软官方密钥 <a href="https://learn.microsoft.com/zh-cn/windows-server/get-started/kms-client-activation-keys">https://learn.microsoft.com/zh-cn/windows-server/get-started/kms-client-activation-keys</a></p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>kms</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix和Grafana</title>
    <url>/2023/06/06/zabbix-grafana/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前面介绍过简单安装zabbix了，想必zabbix自带的图形化可能无法满足需要，那么今天简单介绍下使用grafana来生成zabbix的图形化界面。</p>
<ol>
<li>Grafana 是一个流行的开源数据可视化和监控平台，它提供了丰富的仪表盘和图表，用于可视化各种数据源的指标和日志。</li>
<li>Grafana 可以用于各种监控和数据可视化场景，如服务器监控、应用性能监控、网络监控、物联网数据可视化等。</li>
<li>Grafana 提供了一个强大而灵活的平台，使用户能够通过仪表盘和图表更好地理解和分析数据。</li>
</ol>
<p><code>部署步骤</code><br>ubuntu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y adduser libfontconfig1</span><br><span class="line"><span class="comment">#安装添加用户，组工具和字体配置和渲染的库</span></span><br></pre></td></tr></table></figure>
<p>下载grafana安装装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.grafana.com/enterprise/release/grafana-enterprise_9.5.2_amd64.deb</span><br></pre></td></tr></table></figure>
<p>本地安装grafana包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i grafana-enterprise_9.5.2_amd64.deb</span><br></pre></td></tr></table></figure>
<p>rhel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2-1.x86_64.rpm</span><br><span class="line"><span class="comment">#官方源安装，Appstream版本过低，这里安装最新版的</span></span><br></pre></td></tr></table></figure>
<p>或者清华源加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y https://mirrors.tuna.tsinghua.edu.cn/grafana/yum/rpm/Packages/grafana-enterprise-9.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p>使用grafana命令工具安装zabbix插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class="line"><span class="comment">#默认安装最新版</span></span><br></pre></td></tr></table></figure>
<p>查看zabbix历史所有版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grafana-cli plugins list-versions  alexanderzobnin-zabbix-app</span><br></pre></td></tr></table></figure>
<p>可根据list安装指定版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grafana-cli plugins install alexanderzobnin-zabbix-app  版本号</span><br></pre></td></tr></table></figure>
<p>查看已安装的插件,我是安装的最新版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grafana-cli plugins <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>然后在web端Plugins启用zabbix(不想贴图了ing)<br>然后去Data sources添加zabbix，修改以下三项</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">URL  http://localhost:8080/api_jsonrpc.php</span><br><span class="line">user name  Admin</span><br><span class="line">password   zabbix</span><br><span class="line">#我用的nginx</span><br><span class="line">#这里要注意的是，如果是apache，端口号后应增加zabbix，这里我使用IP了，域名同理</span><br></pre></td></tr></table></figure>
<p>自带的面板无法加载，去<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a>下载一个<br>打开链接后搜索zabbix，记住编号，或者下载json文件<br><img src="/images/dashbords.jpg" alt="download zabbix dashboard"><br>回到web界面，点击Dashboards，最右边NEW，选择import<br><img src="/images/import-dashbords.jpg" alt="setting zabbix dashboard"><br>可以选择本地文件上传，也可输入模板的ID号进行在线load,实质上输入ID也是下载json文件，所以没有网络的情况下，可使用其他电脑下载<br><img src="/images/import-dashbords-2.jpg" alt="import zabbix dashboard"><br>这里我选择的load，稍等片刻加载后源选择zabbix即可。忘了说Grafana服务默认端口号为3000,如果想自定意可以按照以下操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ql grafana-enterprise | grep etc</span><br><span class="line"><span class="comment">#查看配置文件</span></span><br><span class="line">vim /etc/grafana/grafana.ini</span><br><span class="line">;http_port = 3000</span><br><span class="line">http_port = you port</span><br></pre></td></tr></table></figure>
<p>最终得到以下界面，然后有些参数显示不正确，可以自定义进行编辑，这里不在过多叙述。<br><img src="/images/last-image.jpg" alt="最终效果图"><br>参考链接</p>
<ul>
<li>官方下载链接<a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></li>
<li>官方插件下载链接<a href="https://grafana.com/grafana/plugins/">https://grafana.com/grafana/plugins/</a></li>
<li>官方面板下载链接<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a></li>
<li>清华源加速<a href="https://mirrors.tuna.tsinghua.edu.cn/grafana/">https://mirrors.tuna.tsinghua.edu.cn/grafana/</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
        <tag>Grafana</tag>
        <tag>图形化监控</tag>
      </tags>
  </entry>
  <entry>
    <title>开源监控Zabbix</title>
    <url>/2023/06/01/zabbix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Zabbix-介绍"><a href="#Zabbix-介绍" class="headerlink" title="Zabbix 介绍"></a>Zabbix 介绍</h3><ul>
<li>Zabbix 是一个企业级分布式开源监控解决方案，支持实时监控数干台服务器，虚拟机和网络设备，采集百万级监控指标，适用于任何IT基础架构、服务、应用程序和资源的解决方案</li>
<li>Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</li>
</ul>
<h3 id="安装配置zabbix"><a href="#安装配置zabbix" class="headerlink" title="安装配置zabbix"></a>安装配置zabbix</h3><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h5 id="准备3台主机"><a href="#准备3台主机" class="headerlink" title="准备3台主机"></a>准备3台主机</h5><ol>
<li>zabbix、nginx、php。我这里是ubuntu22.04，ip 10.0.0.100</li>
<li>mysql ubutnu22.04。ip 10.0.0.130</li>
<li>client 随意 ip 10.0.0.131</li>
</ol>
<h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><h4 id="zabbix-nginx-php部署"><a href="#zabbix-nginx-php部署" class="headerlink" title="zabbix,nginx,php部署"></a>zabbix,nginx,php部署</h4><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br></pre></td></tr></table></figure>
<h5 id="安装源"><a href="#安装源" class="headerlink" title="安装源"></a>安装源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class="line">apt update</span><br><span class="line">apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent zabbix-get</span><br></pre></td></tr></table></figure>
<h5 id="安装中文"><a href="#安装中文" class="headerlink" title="安装中文"></a>安装中文</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt -y install language-pack-zh-hans</span><br><span class="line"><span class="comment">#英文水平高略过</span></span><br></pre></td></tr></table></figure>
<h5 id="zabbix-配置文件mysql配置项目"><a href="#zabbix-配置文件mysql配置项目" class="headerlink" title="zabbix 配置文件mysql配置项目"></a>zabbix 配置文件mysql配置项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_server.conf</span><br><span class="line">DBHost=10.0.0.130</span><br><span class="line"><span class="comment">#这里mysql我装在另一台主机了</span></span><br><span class="line">DBName=zabbix</span><br><span class="line"><span class="comment">#数据库名</span></span><br><span class="line">DBUser=zabbix</span><br><span class="line"><span class="comment">#数据库用户</span></span><br><span class="line">DBPassword=123456</span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line">scp /usr/share/zabbix-sql-scripts/mysql/server.sql.gz  root@10.0.0.130:</span><br><span class="line"><span class="comment">#把脚本复制到mysql主机上</span></span><br></pre></td></tr></table></figure>
<h4 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">systemctl start mysql.service</span><br><span class="line">mysql</span><br><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8mb4 collate utf8mb4_bin;</span><br><span class="line">mysql&gt; create user zabbix@<span class="string">&#x27;10.0.0.%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global log_bin_trust_function_creators = 1;</span><br><span class="line"><span class="comment">#用于控制在二进制日志中记录创建函数和存储过程的权限检查。当该变量的值为 1 时，MySQL 将信任具有创建函数和存储过程权限的非特权用户，允许他们创建这些对象并将其记录在二进制日志中。</span></span><br><span class="line">mysql&gt; \! zcat /root/server.sql.gz | mysql -uzabbix -p123456 -h 10.0.0.130 zabbix</span><br><span class="line"><span class="comment">#在这里我试了很多次，发现是我创建用户只允许10网段，我使用127登不进去，这个要注意用户授权，我本机IP是130</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global log_bin_trust_function_creators = 0;</span><br></pre></td></tr></table></figure>
<h5 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/zabbix/nginx.conf </span><br><span class="line">        listen          8080;</span><br><span class="line"><span class="comment">#        server_name     example.com;</span></span><br><span class="line"><span class="comment">#这里我没有配置域名，80已经被另一个配置文件监听，如果要配置80，要么增加default_server，删除另一个配置文件的default_server，要么添加域名，以请求头区分访问页面。</span></span><br></pre></td></tr></table></figure>
<h5 id="启动zabbix，配置自启动"><a href="#启动zabbix，配置自启动" class="headerlink" title="启动zabbix，配置自启动"></a>启动zabbix，配置自启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start zabbix-server zabbix-agent nginx php8.1-fpm  &amp;&amp;  systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent nginx php8.1-fpm</span><br></pre></td></tr></table></figure>
<h5 id="替换中文"><a href="#替换中文" class="headerlink" title="替换中文"></a>替换中文</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">win + R 输入fonts</span><br><span class="line"><span class="comment">#随便拷贝一个字体，这里我选择的微软雅黑</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/zabbix/assets/fonts</span><br><span class="line"><span class="comment">#zabbix字体引用目录，实际是软链接</span></span><br><span class="line"><span class="built_in">mv</span> graphfont.ttf graphfont.ttf.bak</span><br><span class="line"><span class="comment">#备份原字体</span></span><br><span class="line"><span class="built_in">cp</span>  msyh.ttc  graphfont.ttf</span><br><span class="line"><span class="comment">#替换，也可-b选项</span></span><br></pre></td></tr></table></figure>
<h5 id="登录配置"><a href="#登录配置" class="headerlink" title="登录配置"></a>登录配置</h5><p><img src="/images/zabbix%E6%A3%80%E6%B5%8B.jpg" alt="起始页面检测"></p>
<h5 id="web服务连接mysql，配置文件是zabbix-server连接数据库"><a href="#web服务连接mysql，配置文件是zabbix-server连接数据库" class="headerlink" title="web服务连接mysql，配置文件是zabbix-server连接数据库"></a>web服务连接mysql，配置文件是zabbix-server连接数据库</h5><p><img src="/images/zabbix-mysql.jpg" alt="连接mysql配置"></p>
<h5 id="时区选择，一般是上海"><a href="#时区选择，一般是上海" class="headerlink" title="时区选择，一般是上海"></a>时区选择，一般是上海</h5><p><img src="/images/zabbix-%E6%97%B6%E5%8C%BA%E9%80%89%E6%8B%A9.jpg" alt="时区选择"></p>
<h5 id="登录页面，账号是-“Admin”-密码是-“zabbix”，注意只有”是”，表示zabbix-server运行正常"><a href="#登录页面，账号是-“Admin”-密码是-“zabbix”，注意只有”是”，表示zabbix-server运行正常" class="headerlink" title="登录页面，账号是 “Admin” 密码是 “zabbix”，注意只有”是”，表示zabbix-server运行正常"></a>登录页面，账号是 “Admin” 密码是 “zabbix”，注意只有”是”，表示zabbix-server运行正常</h5><p><img src="/images/zabbix-login.jpg" alt="首页"></p>
<h5 id="客户端安装agent"><a href="#客户端安装agent" class="headerlink" title="客户端安装agent"></a>客户端安装agent</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class="line">dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class="line">apt update</span><br><span class="line">apt install zabbix-agent</span><br></pre></td></tr></table></figure>
<h5 id="配置agent"><a href="#配置agent" class="headerlink" title="配置agent"></a>配置agent</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server=10.0.0.100 </span><br><span class="line"><span class="comment">#必须指向Zabbix Server,此为必须项</span></span><br><span class="line">ServerActive=10.0.0.100 </span><br><span class="line"><span class="comment">#主动模式才需要指向Zabbix Server,此处无需修改</span></span><br><span class="line">Hostname=10.0.0.131 </span><br><span class="line"><span class="comment">#修改为当前主机的IP,主动模式才需要,此处可选</span></span><br><span class="line">Timeout=30 </span><br><span class="line"><span class="comment">#建议修改此值</span></span><br></pre></td></tr></table></figure>
<h5 id="启动agent"><a href="#启动agent" class="headerlink" title="启动agent"></a>启动agent</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">system <span class="built_in">enable</span> --now zabbix-agent</span><br></pre></td></tr></table></figure>
<h5 id="添加client，这里我是修改，如果是新client应为添加。"><a href="#添加client，这里我是修改，如果是新client应为添加。" class="headerlink" title="添加client，这里我是修改，如果是新client应为添加。"></a>添加client，这里我是修改，如果是新client应为添加。</h5><p><img src="/images/add-client.jpg" alt="首页"></p>
<h5 id="查看client"><a href="#查看client" class="headerlink" title="查看client"></a>查看client</h5><p><img src="/images/client-mesg.jpg" alt="客户端部分信息"><br>到这里我们就简单完成了zabbix的配置，zabbix还有很多扩展，比如自定义监控某项参数….这里不再过多叙述，其次zabbix不仅仅可以监控linux，也可以监控windows，或者是交换机，路由器等等软硬件。感兴趣可自行尝试参考官方安装教程使用</p>
<h5 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h5><ul>
<li>官方安装教程<a href="https://www.zabbix.com/download">https://www.zabbix.com/download</a></li>
<li>官方包仓库<a href="https://repo.zabbix.com/">https://repo.zabbix.com</a></li>
<li>阿里云镜像源<a href="https://mirrors.aliyun.com/zabbix">(https://mirrors.aliyun.com/zabbix</a></li>
<li>清华大学镜像源<a href="https://mirrors.tuna.tsinghua.edu.cn/zabbix">https://mirrors.tuna.tsinghua.edu.cn/zabbix</a></li>
</ul>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>实现基于分布式的LAMP架构，并将NFS实时同步到备份服务器</title>
    <url>/2023/05/11/%E5%88%86%E5%B8%83%E5%BC%8FLAMP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本次实验机器全部为ubuntu22.04，如果使用rhel，稍有不同架构图如下<br><img src="/images/%E5%AE%9E%E6%88%98.png" alt="分布式LAMP架构"></p>
<p>DNS配置 ip：172.18.0.122<br>添加2个web的域名解析信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls http://pan.alybaba.top:81/script/install_dns.sh) 或者</span><br><span class="line">wget -qO- http://pan.alybaba.top:81/script/install_dns.sh | bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;www        A  172.18.0.129&quot;</span> &gt;&gt; /etc/bind/wang.org.zone</span><br><span class="line"><span class="comment">#该脚本只会添加一个解析，执行完毕后，请手动添加另一个解析进去</span></span><br></pre></td></tr></table></figure>

<p>web1  ip:172.18.0.121</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt  update &amp;&amp; apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip</span><br><span class="line"><span class="comment">#安装相关软件</span></span><br><span class="line">wget https://wordpress.org/latest.zip  </span><br><span class="line"><span class="comment">#下载wordpress</span></span><br><span class="line">unzip latest.zip</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line"><span class="built_in">mv</span> wordpress/    /var/www/html/</span><br><span class="line"><span class="comment">#放置网页根目录，注意这里是把目录移动过去，如果您是把wordpress目录下的文件全部移动过去，请把index.html删除，下面也不用配置主站点目录了</span></span><br><span class="line">ufw allow 80/tcp</span><br><span class="line"><span class="comment">#开启端口</span></span><br><span class="line">sed -i <span class="string">&#x27;s,/var/www/html,/var/www/html/wordpress,g&#x27;</span> /etc/apache2/sites-available/000-default.conf</span><br><span class="line"><span class="comment">#配置主站点目录</span></span><br><span class="line">systemctl start apache2</span><br><span class="line"><span class="comment">#重启生效</span></span><br><span class="line"></span><br><span class="line">rsync -av /var/www/html/wordpress/* 172.18.0.131:/data/wordpress</span><br><span class="line"><span class="comment">#把文件拷贝至nfs服务</span></span><br><span class="line"><span class="built_in">rm</span> -rf   /var/www/html/wordpress</span><br><span class="line"><span class="comment">#当nfs备份完后，可以删除或者是移动到其他目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.18.0.131:/data/    /var/www/html/    nfs  _netdev  0  0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line"><span class="comment">#挂载nfs服务，这里是删除的wordpress目录，已经备份到nfs服务器中</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment">#重新挂载fstab</span></span><br></pre></td></tr></table></figure>

<p>web2   ip:172.18.0.129</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip</span><br><span class="line"><span class="built_in">mv</span> wordpress/    /var/www/html/</span><br><span class="line">ufw allow 80/tcp</span><br><span class="line">sed -i <span class="string">&#x27;s,/var/www/html,/var/www/html/wordpress,g&#x27;</span> /etc/apache2/sites-available/000-default.conf</span><br><span class="line">systemctl start apache2</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf   /var/www/html/wordpress</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.18.0.131:/data/ /var/www/html/ nfs _netdev 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure>



<p>mysql master ip：172.18.0.130，创建wordpress账户，并授权。配置为master节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install mysql-server</span><br><span class="line"><span class="comment">#安装mysql服务</span></span><br><span class="line">ufw allow 3306/tcp</span><br><span class="line"><span class="comment">#开启mysql端口</span></span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span>  /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#取消localhost监听，就是本机访问</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;server-id = 130&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#增加唯一server-id</span></span><br><span class="line">systemctl start mysql</span><br><span class="line"><span class="comment">#启动mysql服务</span></span><br><span class="line">create user backuser@<span class="string">&#x27;172.18.0.%&#x27;</span> identified by <span class="string">&#x27;1234567890&#x27;</span>;</span><br><span class="line"><span class="comment">#创建主从同步账号</span></span><br><span class="line">grant replication slave on *.* to backuser@<span class="string">&#x27;172.18.0.%&#x27;</span>;</span><br><span class="line"><span class="comment">#给与主从同步权限</span></span><br><span class="line">reset master;</span><br><span class="line"><span class="comment">#重置binlog，然后去配置主从同步</span></span><br><span class="line">create user wordpress@<span class="string">&#x27;172.18.0.%&#x27;</span> identified by <span class="string">&#x27;wordpress123&#x27;</span></span><br><span class="line"><span class="comment">#创建wordpress登录用户</span></span><br><span class="line">grant all on wordpress.* to wordpress@<span class="string">&#x27;172.18.0.%&#x27;</span></span><br><span class="line"><span class="comment">#给与相关权限，可以去检查用户是否同步</span></span><br></pre></td></tr></table></figure>

<p>mysql  ip：172.18.0.133  配置slave节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install mysql-server</span><br><span class="line">ufw allow 3306/tcp</span><br><span class="line">sed -i <span class="string">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;server-id = 133\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">systemctl start mysql</span><br><span class="line">复制以下语句</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.18.0.130&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;1234567890&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.000001&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS=157;</span><br><span class="line"><span class="comment">#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步</span></span><br><span class="line">show slave status\G</span><br><span class="line"><span class="comment">#查看slave同步状态</span></span><br><span class="line">select user,host from mysql.user;</span><br><span class="line"><span class="comment">#测试账号是否同步</span></span><br></pre></td></tr></table></figure>


<p>nfs  ip：172.18.0.131 配置nfs </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/wordpress &amp;&amp; <span class="built_in">mkdir</span> /etc/exports.d</span><br><span class="line"><span class="comment">#创建文件存放目录和扩展配置文件目录</span></span><br><span class="line">vim /etc/exports.d/wordpress.exports</span><br><span class="line">/data/wordpress 172.18.0.0/24(rw)</span><br><span class="line">:wq</span><br><span class="line"><span class="comment">#配置存放目录，以及可挂载网段</span></span><br><span class="line">exportsfs -v</span><br><span class="line"><span class="comment">#查看可挂载目录</span></span><br><span class="line">exportsfs -r</span><br><span class="line"><span class="comment">#重载配置文件</span></span><br><span class="line">exportsfs -v</span><br><span class="line"><span class="built_in">chown</span> -R www-data.www-data /data/wordpress</span><br><span class="line"><span class="comment">#修改相应权限，方便写入</span></span><br><span class="line"><span class="comment">#这里做完之后去web主机进行挂载，原文件可以删除，也可以备份</span></span><br><span class="line"></span><br><span class="line">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class="line"><span class="comment">#下载sersync，如下载不了，请export http_proxy=http://ipaddress:port或者export ALL_PROXY=socks5://ipaddress:port</span></span><br><span class="line"><span class="comment">#还有很多的代理工具，如squid等等，请自行百度</span></span><br><span class="line">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/</span><br><span class="line"><span class="comment">#解压文件至目录，可随意</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin</span><br><span class="line"><span class="comment">#添加环境变量</span></span><br><span class="line"><span class="comment">#ln -s GNU-Linux-x86 sersync</span></span><br><span class="line">vim /usr/local/GNU-Linux-x86/confxml</span><br><span class="line">  &lt;!-- <span class="comment">#默认解压出来，只需要修改有注释的几行--&gt;</span></span><br><span class="line">        &lt;exclude expression=<span class="string">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;inotify&gt;</span><br><span class="line">        &lt;delete start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;createFolder start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;createFile start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">        &lt;closeWrite start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;moveFrom start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;moveTo start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;attrib start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;modify start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">    &lt;/inotify&gt;</span><br><span class="line"></span><br><span class="line">    &lt;sersync&gt;</span><br><span class="line">        &lt;localpath watch=<span class="string">&quot;/data/wordpress&quot;</span>&gt;                                 </span><br><span class="line">                                   &lt;!-- <span class="comment">#本地目录--&gt;</span></span><br><span class="line">                &lt;remote ip=<span class="string">&quot;172.18.0.132&quot;</span> name=<span class="string">&quot;/data/backup&quot;</span>/&gt;  </span><br><span class="line">  &lt;!--<span class="comment">#备份服务器ip和备份目录，注意，如果是rsync，name则需要改成相应的模块名称--&gt;</span></span><br><span class="line">            &lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.39&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.40&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">        &lt;rsync&gt;</span><br><span class="line">            &lt;commonParams params=<span class="string">&quot;-artuz&quot;</span>/&gt;</span><br><span class="line">            &lt;auth start=<span class="string">&quot;false&quot;</span> <span class="built_in">users</span>=<span class="string">&quot;rsyncuser&quot;</span> passwordfile=<span class="string">&quot;/etc/rsync.pas&quot;</span>/&gt; </span><br><span class="line">&lt;!--rsync配置，这边就使用ssh了，所以rsync为<span class="literal">false</span>，如果使用rsync，则为<span class="literal">true</span>。ssh则需要改为<span class="literal">false</span>--&gt;</span><br><span class="line">            &lt;userDefinedPort start=<span class="string">&quot;false&quot;</span> port=<span class="string">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">            &lt;<span class="built_in">timeout</span> start=<span class="string">&quot;false&quot;</span> time=<span class="string">&quot;100&quot;</span>/&gt;&lt;!-- <span class="built_in">timeout</span>=100 --&gt;</span><br><span class="line">            &lt;ssh start=<span class="string">&quot;true&quot;</span>/&gt;                                                                       <span class="comment">#开启ssh同步协议</span></span><br><span class="line">        &lt;/rsync&gt;</span><br><span class="line">        &lt;failLog path=<span class="string">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class="string">&quot;60&quot;</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class="line">        &lt;crontab start=<span class="string">&quot;false&quot;</span> schedule=<span class="string">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt;</span><br><span class="line">            &lt;crontabfilter start=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">                &lt;exclude expression=<span class="string">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">                &lt;exclude expression=<span class="string">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">            &lt;/crontabfilter&gt;</span><br><span class="line">        &lt;/crontab&gt;</span><br><span class="line">        &lt;plugin start=<span class="string">&quot;false&quot;</span> name=<span class="string">&quot;command&quot;</span>/&gt;</span><br><span class="line">    &lt;/sersync&gt;</span><br><span class="line"></span><br><span class="line">    &lt;plugin name=<span class="string">&quot;command&quot;</span>&gt;</span><br><span class="line">        &lt;param prefix=<span class="string">&quot;/bin/sh&quot;</span> suffix=<span class="string">&quot;&quot;</span> ignoreError=<span class="string">&quot;true&quot;</span>/&gt;  &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class="line">        &lt;filter start=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">            &lt;include expression=<span class="string">&quot;(.*)\.php&quot;</span>/&gt;</span><br><span class="line">            &lt;include expression=<span class="string">&quot;(.*)\.sh&quot;</span>/&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;plugin name=<span class="string">&quot;socket&quot;</span>&gt;</span><br><span class="line">        &lt;localpath watch=<span class="string">&quot;/opt/tongbu&quot;</span>&gt;</span><br><span class="line">            &lt;deshost ip=<span class="string">&quot;192.168.138.20&quot;</span> port=<span class="string">&quot;8009&quot;</span>/&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">    &lt;plugin name=<span class="string">&quot;refreshCDN&quot;</span>&gt;</span><br><span class="line">        &lt;localpath watch=<span class="string">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br><span class="line">            &lt;cdninfo domainname=<span class="string">&quot;ccms.chinacache.com&quot;</span> port=<span class="string">&quot;80&quot;</span> username=<span class="string">&quot;xxxx&quot;</span> passwd=<span class="string">&quot;xxxx&quot;</span>/&gt;</span><br><span class="line">            &lt;sendurl base=<span class="string">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br><span class="line">            &lt;regexurl regex=<span class="string">&quot;false&quot;</span> match=<span class="string">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class="line">        &lt;/localpath&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> sersync2 -dro /usr/local/sersync/confxml.xml &amp;&gt;/dev/null &amp;</span><br><span class="line"><span class="comment">#后台运行sersync程序</span></span><br></pre></td></tr></table></figure>

<p>backup 备份nfs ip：172.18.0.132</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/backup </span><br><span class="line"><span class="comment">#创建备份目录</span></span><br></pre></td></tr></table></figure>
<p>在这里测试的话，我们可以开2个终端一个打开nfs，一个打开backup查看创建删除nfs下的&#x2F;data&#x2F;wordpress文件，然后查看backup下的&#x2F;data&#x2F;backup&#x2F;下是否进行同步</p>
<p>到这里已经搭建完成了，我们大概就实现了分布式的LAMP架构，总结一下，我们在dns服务也可配置主从，并且还可配置mysql中间件，实现更安全，更可靠的LAMP分布式架构，有兴趣的可以自行尝试。其次使用dns服务器作为负载均衡不是一个很好的选项，因为基于DNS的负载均衡具有一定的局限性，例如客户端可能会缓存DNS解析结果，导致一段时间内不会重新解析域名，这可能会导致负载不均衡。一般来说，推荐使用 nginx upstream。同时我们在配置的时候需要注意理清思路，一步一个脚印，先配置什么，后配置什么，不能乱了阵脚。同时注意的时在开启各种服务时，应该养成使用 systemctl enable server_name 配置开机自启动的好习惯，这里时实验环境，这个在实际生产环境要切记。</p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>NFS</tag>
        <tag>数据库</tag>
        <tag>Database</tag>
        <tag>DNS</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Crontab 定时任务</title>
    <url>/2023/04/01/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>cron任务分为系统级任务和用户级任务</p>
<pre><code>系统cron任务
    操作系统自带的cron 任务，系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件

用户cron任务
    每个用户自己名下的 cron 任务
    红帽系统保存在 /var/spool/cron/USERNAME
        日志在/var/log/cron
        systemctl status crond
    Ubuntu 系统存放在/var/spool/cron/crontabs/USERNAME，利用 crontab 命令管理
        systemctl status cron/etc/cron.deny     该文件中所列用户不允许使用crontab命令
/etc/cron.allow    该文件中所列用户允许使用crontab命令
/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名
注意：只有/etc/crontab和/etc/cron.d/*中的文件可以指定用户名字段
</code></pre>
<p>Crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间段，第六段为要执行的任务（ps：用户名也算一个字段吗？）格式如下</p>
<pre><code>minute   hour   day   month   week    [ users ]    command 
  分      时    日     月      周       [用户]       任务

minute： 表示分钟，可以是从0到59之间的任何整数。
hour：表示小时，可以是从0到23之间的任何整数。
day：表示日期，可以是从1到31之间的任何整数。
month：表示月份，可以是从1到12之间的任何整数。
week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。
command：要执行的命令，可以是系统命令，如果命令无法执行，请更换PATH或SHELL。也可以是自己编写的脚本文件,脚本需要带路径。

在以上各个字段中，还可以使用以下特殊字符：

星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。
逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”
中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”
正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。


* * * * * command                                   代表每一分钟执行一次command  注意crontab最小单位是分钟

3,15 * * * * command                                代表每小时的第三分钟和第十五分钟执行一次command

3,15 8-11 * * * command                             代表每天上午&#123;8..11&#125;点每第三分钟和第十五分钟执行一次command

3,15 8-11 */2 * * command                           代表每隔两天的上午&#123;8..11&#125;点的第三分钟和第十五分钟执行一次command

3,15 8-11 * * 1 command                             代表每周一上午&#123;8..11&#125;点的第三分钟和第十五分钟执行一次command
 
30 21 * * * /etc/init.d/smb restart                 代表每天晚上九点半执行smb restart

45 4 1,10,22 * * /etc/init.d/smb restart            代表每月一号，十号，二十二号的凌晨四点四十五分执行smb restart

10 1 * * 6,0 /etc/init.d/smb restart                代表每周六，日的凌晨一点一十分执行smb restart

0,30 18-23 * * * /etc/init.d/smb restart            代表每天晚上&#123;18..23&#125;之间每隔30分钟执行smb restart
     
0 23 * * 6 /etc/init.d/smb restart                  代表周六晚上十一点整点执行smb restart

* */1 * * * /etc/init.d/smb restart                 代表每隔一小时执行一次smb restrat

* 23-7/1 * * * /etc/init.d/smb restart              代表晚上十一点至早上七点每一小时执行一次smb restart

0 11 4 * mon-wed /etc/init.d/smb restart 	    代表每月的四号和mon-wed【周一至周三】执行smb restart

0 4 1 jan * /etc/init.d/smb restart                 代表Jan月一号凌晨四点执行smb restart

01 * * * * root run-parts /etc/cron.hourly  	    代表每小时执行/etc/cron.hourly 里面的脚本
</code></pre>
]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>简单实现mysql主从</title>
    <url>/2023/05/01/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0mysql%E4%B8%BB%E4%BB%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>原理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">两个日志，三个线程</span><br><span class="line">master节点上会为每一个slave的节点开启一个dump线程，用来提供master本机的二进制日志</span><br><span class="line">slave节点上的i/o线程会请求master节点dump线程传输的二进制事件，并将得到的内容写入replay日志中</span><br><span class="line">slave节点的SQL线程实时检测replay <span class="built_in">log</span>内容，有更新则解析成sql语句还原到slave数据库中，这样保证主从数据同步</span><br></pre></td></tr></table></figure>
<p>master节点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]                </span><br><span class="line">log_bin=/mysql/log/binlog </span><br><span class="line"><span class="comment">#启动并修改二进制日志目录,可选，不添加则为默认目录，这个binlog指的是日志命名</span></span><br><span class="line">server-id=128  </span><br><span class="line"><span class="comment">#为当前节点设置全局唯一ID，一般都是以ip地址结尾数字命名</span></span><br><span class="line">:wq</span><br><span class="line"><span class="built_in">mkdir</span> -p /mysql/log  &amp;&amp;  <span class="built_in">chown</span> -R mysql.mysql  /mysql</span><br><span class="line"><span class="comment">#对应配置文件log-bin日志路径</span></span><br><span class="line">create user backuser@<span class="string">&#x27;172.18.0.%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="comment">#这里是我的内网，如果是公网，应具体到某一个的32位ip（如果没有vpn的话），同时注意生产环境请不要设这么弱鸡的密码</span></span><br><span class="line">grant replication slave on *.* to backuser@<span class="string">&#x27;172.18.0.%&#x27;</span></span><br><span class="line">授权，因为是要复制所有库表信息，这里给*.*，更为详细的权限分配这里暂且就不提</span><br><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>
<p>slave节点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=43</span><br><span class="line"><span class="comment">#为当前节点设置一个全局惟的ID号</span></span><br><span class="line">log-bin=/mysql/log/binlog</span><br><span class="line"><span class="comment">#开启并修改slave节点二进制日志</span></span><br><span class="line">read_only=1</span><br><span class="line"><span class="comment">#设置数据库只读，针对超级用户无效</span></span><br><span class="line">:wq</span><br><span class="line">systemctl restart mysqld.service</span><br><span class="line"><span class="built_in">mkdir</span> -p /mysql/log &amp;&amp; <span class="built_in">chown</span> -R mysql.mysql /mysql</span><br></pre></td></tr></table></figure>

<p>执行一下sql语句，这里注意注释不要，如果懒的删除，可以复制到文件里，再mysql命令行界面source &#x2F;you&#x2F;path&#x2F;file即可,也可以再bash下执行mysql -u user -p &lt; &#x2F;you&#x2F;path&#x2F;file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p <span class="string">&#x27;enter you password&#x27;</span></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;172.18.0.127&#x27;</span>, </span><br><span class="line"><span class="comment">#指定master节点</span></span><br><span class="line">MASTER_USER=<span class="string">&#x27;backuser&#x27;</span>, </span><br><span class="line"><span class="comment">#连接用户</span></span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;123456&#x27;</span>, </span><br><span class="line"><span class="comment">#连接密码</span></span><br><span class="line"><span class="comment">#下面两条语句请根据master节点执行show master status给出的信息填写</span></span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;binlog.xxxxxx&#x27;</span>, </span><br><span class="line"><span class="comment">#从哪个二进制文件开始复制</span></span><br><span class="line">MASTER_LOG_POS=123;</span><br><span class="line"><span class="comment">#指定同步开始的位置</span></span><br><span class="line"></span><br><span class="line">启动服务并查看状态</span><br><span class="line">start slave;</span><br><span class="line">show slave status;</span><br><span class="line"></span><br><span class="line">删除配置</span><br><span class="line">reset master all;</span><br><span class="line">reset slave all;</span><br><span class="line"></span><br><span class="line">查看端口是否监听</span><br><span class="line">ss -tun</span><br><span class="line">netstat -an | grep EST</span><br></pre></td></tr></table></figure>

<p>总结：总体配置完成后，即可在master上进行写入操作,随后可查看slave是否同步，这里值得深思的是，如果mysql版本不同，请让低版本做master，高版本做slave，别问为什么，问就是百度。其次有一点要注意的是关于binlog的选择上，如果是binlog被清理过，那就需要执行mysqldump(ps不止这一种备份访问，看个人爱好)全量备份，还原到slave上，才能实现主从一致</p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Databases</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 目录优化保姆级教程</title>
    <url>/2023/03/21/%E7%BC%96%E8%AF%91nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录一次nginx编译<br>    众所周知，做一个最简单的网盘就是使用web服务了，但是不管是nginx和apache或者apache2的默认网页目录都太丑了，所以怎么能自定义修改默认的目录风格呢？<br>以nginx为例，官方的autoindex模块只是简单的提供了以下几个选项</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">默认值</th>
<th align="left">可选值</th>
<th align="left">作用域</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">autoindex</td>
<td align="left">off</td>
<td align="left">on&#x2F;off</td>
<td align="left">http&#x2F;server&#x2F;location</td>
<td align="left">开启目录浏览功能</td>
</tr>
<tr>
<td align="left">autoindex_format</td>
<td align="left">html</td>
<td align="left">html&#x2F;xml&#x2F;json&#x2F;jsonp</td>
<td align="left">same</td>
<td align="left">html是以网页功能展示目录内容</td>
</tr>
<tr>
<td align="left">autoindex_exact_size</td>
<td align="left">on</td>
<td align="left">on&#x2F;off</td>
<td align="left">same</td>
<td align="left">开启为以字节，关闭为KB,MB,GB显示文件&#x2F;autoindex_format为html时有效</td>
</tr>
<tr>
<td align="left">autoindex_localtime</td>
<td align="left">off</td>
<td align="left">on&#x2F;off</td>
<td align="left">same</td>
<td align="left">开启以服务器的文件时间作为显示的时间&#x2F;autoindex_format为html时有效</td>
</tr>
</tbody></table>
<p>首先安装nginx,	 注意！这里演示的是安装后编译再增加,也可以编译时添加模块再安装,这里就不在做过多的展示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum or apt update &amp;&amp; yum or apt upgrade</span><br><span class="line">yum or apt install nginx -y</span><br><span class="line">systemctl start nginx或者/sbin/nginx -s start</span><br></pre></td></tr></table></figure>
<p>根据根据官方给的autoindex模版，一个简单的web网盘配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	http</span><br><span class="line">	&#123; </span><br><span class="line"><span class="comment">#注意一条配置接一个分号，其次一般来说一行一个配置</span></span><br><span class="line">		root	/you/path/www/;	//root为nginx根目录，这里是指定nginx目录所在，一般来说自动配置了，这里是自定义</span><br><span class="line">		autoindex		on;	//开启目录浏览功能</span><br><span class="line">		autoindex_format	html;	//以html风格将目录展示在浏览器中，一般都是html</span><br><span class="line">		autoindex_exact_size	off;	//假如开启将会以字节显示文件大小，最好是关闭</span><br><span class="line">		autoindex_localtime	on;	//以服务器的时间作为显示的时间</span><br><span class="line">		charset utf-8,gbk;		//开启中文，假如有中文没有该选项将乱码显示</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>接着我们vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf把上面目录配置复制进去,这里直接写在全局模块了，也可自定义模块<br><img src="/images/11.jpg" alt="nginx 配置"><br>然后输入nginx -t或&#x2F;sbin&#x2F;nginx -t测试，输出success则继续输入systemctl restart nginx或&#x2F;sbin&#x2F;nginx  -s reload<br><img src="/images/2.png" alt="nginx 测试"><br>接着输入hostname -I，查看本机地址，注意可能会有多个地址，自己分辨<br><img src="/images/3.png" alt="查看本地ip"><br>注意:上面只是获取局域网地址，如果你是部署云请使用以下命令或脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -Ls ip.tool.lu</span><br></pre></td></tr></table></figure>
<p>然后打开浏览器输入你的ip地址,但是忘了一件事，开启端口，我使用的是rocky：<br>同时这里要注意，如果是云，图省事就直接在控制台把nginx配置所对应的端口打开，我这里以常见80为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd  --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>规则生效需要重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>ufw和iptables</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw allow 80</span><br><span class="line">iptables -I INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j ACCEPT</span><br><span class="line">或者iptables -F</span><br></pre></td></tr></table></figure>
<p>接着刷新一下，可以看见了<br><img src="/images/4.png" alt="nginx 默认目录"><br>可以看到，很鸡儿丑。接下来我们就编译一个主题给他<br>    首先继续输入nginx -V或者&#x2F;sbin&#x2F;nginx -V,我们可以看到版本号和编译的模块<br><img src="/images/5.png" alt="nginx 版本和已编译模块"><br>    接着打开nginx.org，选择相应的版本使用wget下载该链接<br><img src="/images/6.png" alt="nginx 源码下载"></p>
<p>解压到当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf  nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入该目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.14.2	</span><br></pre></td></tr></table></figure>
<p>把nginx主题模块拖进来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/aperezdc/ngx-fancyindex/releases/download/v0.5.2/ngx-fancyindex-0.5.2.tar.xz</span><br></pre></td></tr></table></figure>
<p>解压到当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf ngx-fancyindex-0.5.2.tar.xz</span><br></pre></td></tr></table></figure>
<p>然后前面的nginx -V的已编译信息直接复制过去，再跟上添加的模块路径执行脚本即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure  你已经安装编译的模块,这里太长，我就不复制了后面跟上要添加的模块就ok  --add-module=./ngx-fancyindex-0.5.2</span><br></pre></td></tr></table></figure>
<p>接着编译，不要install，不然配置文件会被覆盖，因为你是安装后编译这个要注意</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make </span><br></pre></td></tr></table></figure>
<p>注意:如果make这里很大几率报错，原因是缺少相关的依赖，所以请点击<a href="https://www.baidu.com/">这里</a>查询需要的依赖,再安装对应的编译依赖包</p>
<p>完事后把编译好的二进制程序nginx替换掉现有的nginx，请先暂停nginx service<br>编译成功会在objs目录下生成一个新的nginx二进制可执行程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sbin/nginx -s stop 或者 systemctl stop nginx</span><br><span class="line"><span class="built_in">cp</span> -a objs/nginx /sbin/nginx</span><br><span class="line">/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>现在打开网址可以看到一个雏形，还是丑。我们继续，先进入nginx目录里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /you/path/www</span><br></pre></td></tr></table></figure>
<p>接着下载主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lanffy/Nginx-Fancyindex-Theme</span><br></pre></td></tr></table></figure>
<p>再让fancyindex配置文件生效,打开nginx配置文件增加一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include /you/path/fancyindex.conf;</span><br></pre></td></tr></table></figure>
<p>测试nginx重启生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sbin/nginx -t &amp;&amp; /sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>最终效果，也可以访问<a href="http://pan.alybaba.top/">这里</a>查看我做的效果</p>
<p><img src="/images/7.png" alt="优化后的nginx目录"></p>
<p>总结:其实还可以编译其他相关的nginx模块，这里就不再过多叙述，有兴趣的可前往github或官网搜索（需下载对应依赖，报错会提示）…而且nginx还有很多有意思的配置，比如负载均衡，反向代理，正向代理等等…以后慢慢分享相关的玩法配置，在这里为什么我不使用apache呢？想必大家都知道log4j2零day漏洞了，这里就不再过多说明。但是编译过程最难的还是缺少相关依赖，对于一般人来说还是比较困难。总而言之，言而总之nginx是一个很高效且优质的代理web站点。</p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>利用nginx或apache简单搭建个人仓库源</title>
    <url>/2023/03/25/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1，运行环境，一台centos虚拟机即可，最好两台，这里我们使用虚拟机本地挂载的ISO文件，如果你想要更多可以去百度自己找。</p>
<p>2，接着我们先安装apache，然后启动apache，并且把80端口打开（nginx同理，这里我们就演示apache了）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost]<span class="comment">#yum install apache -y &amp;&amp; systemctl start apache ; systemctl enable apache</span></span><br><span class="line">[root@localhost]<span class="comment">#firewall-cmd --add-port=80/tcp --permanent ; firewall-cmd --reload </span></span><br></pre></td></tr></table></figure>

<p>3，进入到源目录，把目录下所有文件拷贝到&#x2F;backup下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@localhost yum.repos.d]<span class="comment"># makedir /backup &amp;&amp; cp  * /backup</span></span><br></pre></td></tr></table></figure>

<p>4，观看虚拟机右下角光盘是否连接，如果未连接请手动连接然后挂载至&#x2F;mnt目录下，再把元数据和RPM包拷贝至apache网页目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]mount /dev/sr0 /mnt &amp;&amp; <span class="built_in">mkdir</span> -p /var/www/html/CentOS/8/</span><br><span class="line">[root@localhost yum.repos.d]<span class="built_in">cp</span> -r /mnt/AppStream  /var/www/html/CentOS/8/</span><br><span class="line">[root@localhost yum.repos.d]<span class="built_in">cp</span> -r /mnt/BaseOS	/var/www/html/CentOS/8/</span><br><span class="line">tips:为了省时间，这里我们也可以做软连接过去</span><br><span class="line">[root@localhost yum.repos.d]<span class="built_in">ln</span> -s  /mnt/AppStream /var/www/html/CentOS/8/AppStream</span><br><span class="line">[root@localhost yum.repos.d]<span class="built_in">ln</span> -s  /mnt/BaseOS	/var/www/html/CentOS/8/BaseOS</span><br><span class="line">tips2:当然我们也可以在网上自行下载相关文件，不过不推荐</span><br><span class="line">[root@localhost yum.repos.d]yum reposync --repoid=localbase --download -p /var/www/html/CentOS/8/BaseOS</span><br><span class="line">[root@localhost yum.repos.d]yum reposync --repoid=localappstream --download -p /var/www/html/CentOS/8/AppStream</span><br></pre></td></tr></table></figure>

<p>5，接下来我们在当前目录新建一个repo文件，地址指向指向本地http，如需其他源请自行百度，推荐<a href="https://developer.aliyun.com/mirror/">阿里源</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]vim test.repo</span><br><span class="line">								//这是我的配置，仅供参考</span><br><span class="line">[localbase]							//repo <span class="built_in">id</span>	</span><br><span class="line">name=<span class="built_in">local</span> base							//仓库名</span><br><span class="line"><span class="comment">#baseurl=file:///mnt/BaseOS					//本地源路径,记得使用前先挂载</span></span><br><span class="line">baseurl=http://localhost/mnt/BaseOS				//http路径，这里我使用的一台机器，所以是localhost，也可以填127.0.0.1</span><br><span class="line"><span class="comment">#baseurl=https://example/some/path				//https路径</span></span><br><span class="line"><span class="comment">#baseurl=ftp:///you/ftp/path					//ftp路径</span></span><br><span class="line"><span class="comment">#baseurl=http://pan.alybaba.top/CentOS.Download.RPM.1		//这两个是我搭建的测试站点，如果觉得操作太麻烦，可直接复制该url</span></span><br><span class="line"><span class="comment">#baseurl=http://pan.alybaba.top/CentOS.Download.RPM</span></span><br><span class="line">gpgcheck=0							//是否校验，默认为1</span><br><span class="line"><span class="comment">#enable=1							//是否用，默认为1。为0则不使用该源</span></span><br><span class="line"><span class="comment">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial	//配合校验使用</span></span><br><span class="line"><span class="comment">#failovermethod=&#123;roundrobin，priority&#125;				//有多个baseurl，此项决定访问规则，roundrobin 随机，priority:按顺序访问</span></span><br><span class="line"><span class="comment">#cost=1000 							//优先级</span></span><br><span class="line"></span><br><span class="line">[localappstream]						//链接可以分多个文件，也可以放在一起，但是名字一定要见名知意</span><br><span class="line">name=<span class="built_in">local</span> appstream</span><br><span class="line">baseurl=file:///mnt/AppStream</span><br><span class="line"><span class="comment">#baseurl=http://localhost/AppStream</span></span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="built_in">enable</span>=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial</span><br><span class="line"></span><br><span class="line">:wq	//保存退出</span><br></pre></td></tr></table></figure>
<p>6，接着使用yum命令做一些操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]yum clean all &amp;&amp; yum makecache</span><br><span class="line">[root@localhost yum.repos.d]yum repolist			//如果想查看RPM包数量，可以加-v选项</span><br><span class="line">	repo <span class="built_in">id</span>                                           repo name</span><br><span class="line">	localappstream 		                          <span class="built_in">local</span> appstream</span><br><span class="line">	localbase                        	          <span class="built_in">local</span> base</span><br><span class="line">[root@localhost yum.repos.d]yum  list				//查看所有RPM包</span><br><span class="line">[root@localhost yum.repos.d]yum install package -y		//安装软件包</span><br><span class="line">[root@localhost yum.repos.d]yum remove package -y		//卸载软件包，不会卸载依赖</span><br><span class="line">[root@localhost yum.repos.d]yum autoremove package -y		//卸载软件包及其依赖</span><br><span class="line">[root@localhost yum.repos.d]yum reinstall package -y		//重新安装软件包</span><br><span class="line">[root@localhost yum.repos.d]yum search package 			//搜索包</span><br><span class="line">[root@localhost yum.repos.d]yum info package			//查看包信息</span><br><span class="line">[root@localhost yum.repos.d]yum provides <span class="built_in">command</span>		//查看命令所需要安装的包</span><br><span class="line">[root@localhost yum.repos.d]yum clean all			//清理缓存</span><br><span class="line">[root@localhost yum.repos.d]yum makecache			//生成缓存</span><br><span class="line">[root@localhost yum.repos.d]yum <span class="built_in">history</span>				//查询安装历史</span><br><span class="line">[root@localhost yum.repos.d]yum install --downloadonly package --downloaddir=/you/package/path</span><br><span class="line">//这个命令是指只下载包和该包的依赖包到指定目录且不安装，该命令对于不联网的系统，解决依赖关系非常好用</span><br><span class="line">[root@localhost yum.repos.d]yum·············				</span><br></pre></td></tr></table></figure>
<p>7，到这里我们的私仓就搭建完毕了，总结一下，该操作在红帽初级认证必考，所以一定要熟练。其次我们来说重要的点，在repo配置文件中，其实只需要repoid，baseurl，以及gpgcheck这三项，如果没有特殊要求的话，其次baseurl一定要带head，不然一定会报错的，就四种请求头：http，https，ftp和本地。其次好像centos8就把包的作用分的很清楚，8以下都是在一个Base文件下的，所以说有空还是要去了解下包名的意思。还有能够被识别的源目录下一定会有repodata和Packages两个文件夹，不然也会报错。上层文件名无所谓，一个baseurl可以写多条，意思是备份把，就是这一条url挂了，往下一条url找，但是问题是如果是该url没有找到对应的package会不会往下找下去，还是换其他的repo。最后说下dnf命令，8以上才有，两个命令基本上是一样。</p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>某司网络规划设计</title>
    <url>/2021/11/25/%E6%9F%90%E5%8F%B8%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了适应网络经济的飞速发展，扩大企业经营的规模和范围，方便企业内部和企业之间的交流，节省办公开销，提高企业的管理水平，企业发展Intranet （ 企业内部网） 已经是刻不容缓。现如今后如何应对瞬息万变、竞争激烈的国内外市场环境以及如何利用网络技术迅速提升企业核心竞争力就是成为企业成败的关键所在。<br>目前我国企业尤其是中小型企业网络建设正在如火如荼的进行着，此方案采用了国际高端品牌cisco 的网络设备，同时采用了当前重要的和使用广泛的网络体结构有OSI 体系结构和TCP&#x2F;IP 体系结构。以先进，安全，实用，可扩展，灵活为原则进行设计。本方案将以x公司内部局域网的组建需求、实际应用为出发点，从中小型企业局域网的业务需求和传统网络技术入手，设计适用于中小型企业的组网方案，为公司营造一个一流的企业网络。</p>
<h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><ul>
<li>安装 Cisco Packet Tracer</li>
</ul>
<h2 id="企业用户需求分析"><a href="#企业用户需求分析" class="headerlink" title="企业用户需求分析"></a>企业用户需求分析</h2><p>要求为员工提供安全的网络办公环境，保障信息安全，要求易于用户管理、界面简单、逻辑清晰；要求网络提供足够的带宽，丰富的接口形式，满足用户对应用带宽的基本要求，要求紧急情况下公司业务的备份，以减少公司的损失；同时要求员工能获取信息，拓宽知识面；提高专业水平，随时得到领导指示。</p>
<h2 id="企业网络需求分析"><a href="#企业网络需求分析" class="headerlink" title="企业网络需求分析"></a>企业网络需求分析</h2><p>本方案将设计主干网负责各个子网和应用服务的连接，网络协议采用TCP&#x2F;IP 协议，核心交换机采用三层交换机，能较好解决突发数据量和密集服务请求的实时响应问题，数据交换时交换引擎不会出现过载现象和数据包碰撞、丢失的现象，以及一些非人为的故障的相关补救措施。UPS 电源要保证网络中所有的服务器、交换机、路由器等设备的连续、正常地运转；同时要求内部网络中的病毒防范控制，不受外网的影响；对于数据也要求又相互备份互补的业务，以免在发生数据通讯故障的时候，网络设备能自行修复问题，保持网络的畅通性。</p>
<h2 id="企业系统需求分析"><a href="#企业系统需求分析" class="headerlink" title="企业系统需求分析"></a>企业系统需求分析</h2><p>企业要求所有的客户端和服务器系统应该是易于配置和管理的，并保障客户端的方便使用；在系统的设计、实现及应用上应采用多种安全手段保障网络安全；系统的设计要求采用开放的技术和标准选择主流的操作系统及应用软件，系统的运行应具有高稳定性，保障每周七天全天24 小时的高性能无故障运行；便于系统管理员在任何位置方便的对整个系统进行管理；系统设计应尽量降低整个系统的成本。</p>
<h2 id="企业设备需求分析"><a href="#企业设备需求分析" class="headerlink" title="企业设备需求分析"></a>企业设备需求分析</h2><p>根据公司的网络功能需求和实际的布线系统情况，企业要求楼层接入设备需要选择同一型号的设备；网络设备必须在技术上具有先进性、通用性，必须便于管理、维护， 应该满足公司现有计算机设备的高速接入，应该具备良好的可扩展性、可升级性，保护用户的投资。同时还要求公司网络设备的高利用率，减少对网络设备无谓的支出；要求网络设备在满足功能与性能的基础上必须具有良好的性价比。网络设备应选择目前主流产品，同时设备厂商必须要有良好的市场形象与售后技术支持。</p>
<h1 id="公司网络设计方案"><a href="#公司网络设计方案" class="headerlink" title="公司网络设计方案"></a>公司网络设计方案</h1><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li>1.实用性<br>性能指标能满足各项业务处理能力，企业组网的方案在接入层交换机将用MAC 地址与端口的捆绑实现高效的用户控制，大大提高用户的利用率。</li>
<li>2.安全性<br>用路由策略技术和容错技术、核心层和接入层的链路冗余功能，提供全方位的安全管理系统内部网络之间、内网与外网之间的互联，利用路由器、杀毒软件等对访问进行控制，确保网络的安全。</li>
<li>3.先进性<br>采用主流网络体系、运行系统和设备产品，设计的网络方案采用三层分布式结构。核心层选用了高性能的思科千兆路由器，负责路由管理、网络管理、网络服务、核心数据处理等。汇聚层采用思科Cisco Catalyst 3560-24 三层交换机，提供高速无阻塞的链路到核心层，大大提升网络性能。接入层选用思科网络Cisco Catalyst 2960-24，充分满足用户的高速接入等。服务器设备操作系统采用window Server 2003操作系统；具有很好的稳定性和安全性。</li>
<li>4.可扩展性<br>网络的核心层采用模块化路由器Cisco 2811 ，汇聚层采用模块化交换机，按照需求灵活配置各种模块，做到既满足需求，由留有余地。整个网络架构采用三层结构，使网络具有较好的伸缩性、可以根据网络建设的不同阶段灵活配置和扩展。</li>
<li>5.开放性<br>本次设计的中央集成管理系统将是一个完全开放性的系统，通过编制系统的接口软件将解决不同系统和产品间接口协议的“ 标准化”，以使他们之间具备“ 互操作性”。所有接口均基于标准的TCP&#x2F;IP 数据接口协议和内容。系统的开放性设计完全遵循国际主流标准以及工业标准。</li>
</ul>
<h2 id="公司概况及拓扑图"><a href="#公司概况及拓扑图" class="headerlink" title="公司概况及拓扑图"></a>公司概况及拓扑图</h2><p>在本次设计方案中主要是对x公司进行整体的网络设计，该公司分别设有行政部，研发部，财务部以及一个WWW服务器，分别连接在四台二层交换机上。</p>
<h3 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h3><p>经过和x公司领导谈话，网络建设完成后需实现以下几点:</p>
<ul>
<li>1.三层交换机SW1和SW2实现以太网通道。</li>
<li>2.两台三层交换机分别配置VTP服务端，其他交换机为客户端。</li>
<li>3.配置PVST+负载均衡。</li>
<li>4.三层交换机上配置HSRP协议，实现热备份。</li>
<li>5.在三层交换机上启用DHCP，让部门的主机能够自动获取IP地址，网关及DNS地址。</li>
<li>6.配置OSPF实现全网互通。</li>
<li>7.配置ACL使财务部不能上网，外网主机只能访问内网WWW服务器，而内网除了财务都可以访问外网。</li>
<li>8.路由器只允许研发部远程登陆管理。<br>网络拓扑图如下所示:<br><img src="/images/network-design.jpg" alt="图2.1 x公司网络拓扑结构图"></li>
</ul>
<h2 id="VLAN及IP地址规划"><a href="#VLAN及IP地址规划" class="headerlink" title="VLAN及IP地址规划"></a>VLAN及IP地址规划</h2><p>在一个中小型网络里，VLAN 的划分是必不可少的步骤之一，也是必不可少的一部分； 在本企业网设计中，针对当前现状，IP 地址资源紧缺，我们不可能也不应该为每一台工作站申请一个公有IP 地址，而是公网接口申请一个或多个IP ，内网是私有IP 地址，这样不仅可以缓解IP 地址不足的情况，而且也可以为企业建设一个企业网节约不少的开支。<br>具体VLAN 与IP 规划如下表:</p>
<table>
<thead>
<tr>
<th align="left">VLAN编号</th>
<th align="left">VLAN命名</th>
<th align="left">IP地址网段</th>
<th align="left">SW1默认网关</th>
<th align="left">SW2默认网关</th>
<th align="left">VLAN 说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10</td>
<td align="left">Xingzheng</td>
<td align="left">192.168.1.0&#x2F;24</td>
<td align="left">192.168.1.1</td>
<td align="left">192.168.1.2</td>
<td align="left">行政部</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left">Yanfa</td>
<td align="left">192.168.2.0&#x2F;24</td>
<td align="left">192.168.2.1</td>
<td align="left">192.168.2.2</td>
<td align="left">研发部</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left">Caiwu</td>
<td align="left">192.168.3.0&#x2F;24</td>
<td align="left">192.168.3.1</td>
<td align="left">192.168.3.2</td>
<td align="left">财务部</td>
</tr>
<tr>
<td align="left">40</td>
<td align="left">Server</td>
<td align="left">192.168.4.0&#x2F;24</td>
<td align="left">192.168.4.1</td>
<td align="left">192.168.4.2</td>
<td align="left">WWW服务</td>
</tr>
</tbody></table>
<p>设备之间互联IP地址规划</p>
<table>
<thead>
<tr>
<th align="left">设备名称</th>
<th align="left">设备接口</th>
<th align="left">IP地址</th>
<th align="left">对端设备名称</th>
<th align="left">设备接口</th>
<th align="left">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">外网主机</td>
<td align="left">Fa0</td>
<td align="left">10.1.1.2&#x2F;24</td>
<td align="left">R1</td>
<td align="left">Fa0&#x2F;0</td>
<td align="left">10.1.1.1&#x2F;24</td>
</tr>
<tr>
<td align="left">R1</td>
<td align="left">Fa0&#x2F;1</td>
<td align="left">20.1.1.1&#x2F;24</td>
<td align="left">R2</td>
<td align="left">Fa1&#x2F;0</td>
<td align="left">20.1.1.2&#x2F;24</td>
</tr>
<tr>
<td align="left">R2</td>
<td align="left">Fa1&#x2F;0</td>
<td align="left">40.1.1.1&#x2F;24</td>
<td align="left">SW1</td>
<td align="left">Fa0&#x2F;1</td>
<td align="left">40.1.1.2&#x2F;24</td>
</tr>
<tr>
<td align="left">R2</td>
<td align="left">Fa0&#x2F;1</td>
<td align="left">30.1.1.1&#x2F;24</td>
<td align="left">SW2</td>
<td align="left">Fa0&#x2F;1</td>
<td align="left">30.1.1.2&#x2F;24</td>
</tr>
<tr>
<td align="left">PC1-6</td>
<td align="left">Fa0</td>
<td align="left">自动获取</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">WWW</td>
<td align="left">Fa0</td>
<td align="left">自动获取</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">R1</td>
<td align="left">Loopback 0</td>
<td align="left">1.1.1.1&#x2F;32</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">R2</td>
<td align="left">Loopback 0</td>
<td align="left">2.2.2.2&#x2F;32</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">SW1</td>
<td align="left">Loopback 0</td>
<td align="left">3.3.3.3&#x2F;32</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">SW2</td>
<td align="left">Loopback 0</td>
<td align="left">4.4.4.4&#x2F;32</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="网络设备选型"><a href="#网络设备选型" class="headerlink" title="网络设备选型"></a>网络设备选型</h2><p>在确定了网络系统的设计方案后，需要进行网络设备选型。设备选型是网络工程中非常重要的一环，设备选型的好坏直接影响系统的实用性、稳定性、可靠性和系统的费用。其中要考虑到三方面：品牌选择，性能优先，最小开销。</p>
<ul>
<li>1.核心层网络采用CISCO WS-C3560-24PS<br>Cisco 3560 系列智能以太网交换机是一种新型的企业级可堆叠多层交换机系列，可通过高可用性、服务质量（QoS）和安全性来改进网络运行；Cisco 3560 可提供高可用性、可扩展性、安全性和可改进网络运营的管理能力。</li>
<li>2.接入层网络采用CISCO WS-C2960G-24<br>Cisco 2960 系列智能以太网交换机是一个全新的、固定配置的独立设备系列，提供桌面快速以太网和千兆以太网连接，可为入门级企业、中型市场和分支机构网络提供增强LAN 服务。Cisco 2960 系列在网络或城域接入边缘实现了智能服务。</li>
<li>3.外部访问网络采用CISCO 2811 路由器<br>Cisco 2811隶属于Cisco 2800系列产品，与相似价位的前几代思科路由器相比，Cisco 2800系列的性能提高了五倍、安全性和话音性能提高了十倍、具有全新内嵌服务选项，且大大提高了插槽性能和密度，同时保持了对目前Cisco 1700系列和Cisco 2600系列中现有90多种模块中大多数模块的支持，从而提供了极大的性能优势。</li>
</ul>
<h2 id="网络安全设计"><a href="#网络安全设计" class="headerlink" title="网络安全设计"></a>网络安全设计</h2><p>为了提高公司网络的安全性能；本设计方案提高设备的物理安全性；配置设备的口令进行VTP 域的认证；上网用户的接入控制；应用系统的访问控制；因特网的接入安全控制。</p>
<h3 id="提高物理设备的安全性"><a href="#提高物理设备的安全性" class="headerlink" title="提高物理设备的安全性"></a>提高物理设备的安全性</h3><p>设备的物理安全性是指运行中的设备，未经授权的人员不能直接接触到。也就是说设备要有独立管理机房并有专门专业的维护人员进行维护和管理； 提高设备的物理安全性，是最基本的要求。</p>
<h3 id="配置设备的口令"><a href="#配置设备的口令" class="headerlink" title="配置设备的口令"></a>配置设备的口令</h3><p>配置设备的口令，是防止非授权的人员更改网络系统的配置的重要手段。要为所有的设备设置口令。要为每一台设备配置Console 口令，VTY 口令，特权口令等。在口令方面，需要制定管理制度并严格执行。口令管理制度包括口令的设置，保管，更改，口令的强度等内容。建议企业参照硬件设备的管理方式，交给专门专业的工程师进行管理，如需变更或删除，需领导批准。<br>具体命令如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1:</span><br><span class="line">SW1&gt;enable                         #进入特权模式</span><br><span class="line">SW1#configure terminal             #进入全局配置模式</span><br><span class="line">SW1(config)#line console 0         #配置console口登录的密码</span><br><span class="line">SW1(config-line)# password ******  #密码只有相关的领导和工程师才知道</span><br><span class="line">SW1(config-line)#login</span><br><span class="line">SW1(config-line)#exit</span><br><span class="line">SW1(config)#line vty 0 4           #配置远程登陆的密码</span><br><span class="line">SW1(config-line)#password ******</span><br><span class="line">SW1(config-line)#login</span><br><span class="line">SW1(config-line)#exit</span><br><span class="line">SW1(config)# enable secret ******   #配置特权模式密码，密文密码更安全</span><br></pre></td></tr></table></figure>
<p>以上仅仅为SW1交换机的配置，其余设备都应配置，在本设计中所有密码统一使用“cisco”，并且简写相关的命令，例如特权模式则简写为“en”，全局配置模式简写为“conf  t”，华为设备则在systemview配置</p>
<h3 id="进行VTP域的认证"><a href="#进行VTP域的认证" class="headerlink" title="进行VTP域的认证"></a>进行VTP域的认证</h3><p>VTP 域的认证，能够保证局域网的VLAN 等的安全。设置了口令之后，除非交换机设置了正确的口令，否则新交换机将不能自动加入到已存在的管理域中。保证了局域网的运行安全，可以避免因为VLAN 被错误或者恶意的增加，从而提高了网络的安全性。<br>具体命令如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1:</span><br><span class="line">SW1(config)# vtp domain lxw         #配置VTP域名</span><br><span class="line">SW1(config)# vtp mode server        #配置该交换机为VTP服务端</span><br><span class="line">SW1(config)# vtp password ******    #VTP密码</span><br><span class="line">SW1(config)# vtp version 2          #VTP版本</span><br><span class="line">SW2至SW6都应配置VTP PASSWORD。</span><br><span class="line">#注意VPT为思科独有协议</span><br></pre></td></tr></table></figure>
<h3 id="用户的控制接入"><a href="#用户的控制接入" class="headerlink" title="用户的控制接入"></a>用户的控制接入</h3><p>严格控制用户的接入，可以避免非法用户接入带来的潜在的安全隐患。网系统建设验收完毕之后， 确保交换机的所有用户端口处于关闭状态。只有用户使用申请通过批准之后网络管理员才能将端口激活。不会影响用户的使用并杜绝潜在安全隐患。</p>
<h3 id="系统的访问限制"><a href="#系统的访问限制" class="headerlink" title="系统的访问限制"></a>系统的访问限制</h3><p>可根据公司的应用需求，可在特定设备上实施访问控制，限制企业网用户对特定应用系统的访问，或者只允许特定的用户访问某些资源。保证网络资源的有效利用的同时保护资源的安全。</p>
<h3 id="网络的接入安全检测"><a href="#网络的接入安全检测" class="headerlink" title="网络的接入安全检测"></a>网络的接入安全检测</h3><p>从目前网络发展趋势上看，我们可以预见未来的企业将要面对着很严重的网络安全威胁：特洛伊木马、病毒和蠕虫等等。与之同时，间谍软件的攻击也加快了蔓延速度。为了更好地控制企业网络，应拒绝不受欢迎的设备或者被感染恶意代码的设备访问，有效地控制访问网络资源的终端设备，加强企业内部安全控制，保护好企业的数据信息，是当前安全防护中必不可少的重要方面。所以因特网的接入安全控制是非常重要的，不仅需要布置防火墙等安全设备，还要指定严格的安全策略，安装360等防护软件。</p>
<h1 id="相关技术介绍及配置"><a href="#相关技术介绍及配置" class="headerlink" title="相关技术介绍及配置"></a>相关技术介绍及配置</h1><p>为了使公司网络高效、稳定的运行，便于管理与维护，对局域网交换和路由技术的相关方面进行了规范设计，包括EthernetChannel、VTP、VLAN、DHCP、PVST、OSPF、HSRP、ACL等。</p>
<h2 id="VTP（VLAN-Trunking-Protocol）"><a href="#VTP（VLAN-Trunking-Protocol）" class="headerlink" title="VTP（VLAN Trunking Protocol）"></a>VTP（VLAN Trunking Protocol）</h2><p>VTP是VLAN中继协议，也被称为虚拟局域网干道协议。它是思科私有协议。作用是多台交换机在企业网中，配置VLAN工作量大，可以使用VTP协议，把一台交换机配置成VTP Server, 其余交换机配置成VTP Client,这样他们可以自动学习到server 上的VLAN 信息。<br>它是一个OSI参考模型第二层的通信协议，主要用于管理在同一个域的网络范围内VLANs的建立、删除和重命名。在一台VTP Server 上配置一个新的VLAN时，该VLAN的配置信息将自动传播到本域内的其他所有交换机。这些交换机会自动地接收这些配置信息，使其VLAN的配置与VTP Server保持一致，从而减少在多台设备上配置同一个VLAN信息的工作量，而且保持了VLAN配置的统一性。<br>VTP通过网络(ISL帧或cisco私有DTP帧)保持VLAN配置统一性。VTP在系统级管理增加，删除，调整的VLAN，自动地将信息向网络中其它的交换机广播。此外，VTP减小了那些可能导致安全问题的配置。便于管理,只要在VTP Server做相应设置,VTP Client会自动学习VTP SERVE上的VLAN信息。<br>具体配置命令如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1:</span><br><span class="line">SW1&gt;en</span><br><span class="line">SW1#conf t </span><br><span class="line">SW1(config)# vtp domain lxw    #域名为lxw，实际配置按公司领导需求配置</span><br><span class="line">SW1(config)# vtp mode serve</span><br><span class="line">SW1(config)# vtp password cisco</span><br><span class="line">SW1(config)# vtp version 2</span><br><span class="line"></span><br><span class="line">SW2:</span><br><span class="line">SW2&gt;en</span><br><span class="line">SW2#conf t</span><br><span class="line">SW2(config)# vtp domain lxw</span><br><span class="line">SW2(config)# vtp mode serve</span><br><span class="line">SW2(config)# vtp password cisco</span><br><span class="line">SW2(config)# vtp version 2</span><br><span class="line"></span><br><span class="line">SW3:</span><br><span class="line">SW3&gt;en</span><br><span class="line">SW3#conf t</span><br><span class="line">SW3(config)# vtp domain lxw</span><br><span class="line">SW3(config)# vtp mode client</span><br><span class="line">SW3(config)# vtp password cisco</span><br><span class="line">SW3(config)# vtp version 2</span><br><span class="line"></span><br><span class="line">SW4:</span><br><span class="line">SW4&gt;en</span><br><span class="line">SW4#conf t</span><br><span class="line">SW4(config)# vtp domain lxw</span><br><span class="line">SW4(config)# vtp mode client</span><br><span class="line">SW4(config)# vtp password cisco</span><br><span class="line">SW4(config)# vtp version </span><br><span class="line">SW5:</span><br><span class="line">SW5&gt;en</span><br><span class="line">SW5#conf t</span><br><span class="line">SW5(config)# vtp domain lxw</span><br><span class="line">SW5(config)# vtp mode client</span><br><span class="line"></span><br><span class="line">SW5(config)# vtp password cisco</span><br><span class="line">SW5(config)# vtp version 2</span><br><span class="line"></span><br><span class="line">SW6:</span><br><span class="line">SW6&gt;en</span><br><span class="line">SW6#conf t</span><br><span class="line">SW6(config)# vtp domain lxw</span><br><span class="line">SW6(config)# vtp mode client</span><br><span class="line">SW6(config)# vtp password cisco</span><br><span class="line">SW6(config)# vtp version 2</span><br><span class="line"></span><br><span class="line">#补充说明一下，域内的每台交换机都必须使用相同的域名，密码，VTP版本。不论是通过配置实现，还是由交换自动学到的。其中SW1-2为server，SW3-6为client。</span><br></pre></td></tr></table></figure>
<h2 id="VLAN-（Virtual-Local-Area-Network）"><a href="#VLAN-（Virtual-Local-Area-Network）" class="headerlink" title="VLAN （Virtual Local Area Network）"></a>VLAN （Virtual Local Area Network）</h2><p>对于VLAN 的划分主要在接入层的端口上实施基于端口的VLAN 划分；这是最为普遍、快捷、易于管理的划分方法；按照x公司的实际情况对公司的局域网进行合理VLAN 划分，可以减少网络内的广播数据包，杜绝广播风暴，增强网络的安全性能；提高公司网络运行效率，保证网络顺畅；易于维护和管理；可以区分不同的应用和用户，方便集团的管理与维护。<br>目前，我们所掌握的VLAN 划分方法为以下几种：按端口划分VLAN，按MAC地址划分VLAN，按网络层划分VLAN，按IP组播划分VLAN，基于规则的VLAN划分，按用户划分VLAN。<br>其中本次设计中采用的是常见的按照端口划分VLAN，这种划分VLAN 的方法是根据以太网交换机的端口来划分，IEEE802.1Q 规定了依据以太网交换机的端口来划分VLAN 的国际标准。这种划分方法的优点是定义VLAN 成员时非常简单，只要将所有的端口都只定义一下就可以了。<br>具体配置命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1&gt;en</span><br><span class="line">SW1#conf t</span><br><span class="line">SW1(config)#vlan 10</span><br><span class="line">SW1(config-vlan)#name xingzheng  #由于要配置VLAN名称，不然可一次性创建</span><br><span class="line">SW1(config-vlan)#ex</span><br><span class="line">SW1(config)#vlan 20</span><br><span class="line">SW1(config-vlan)#name yanfa</span><br><span class="line">SW1(config-vlan)#ex</span><br><span class="line">SW1(config)#vlan 30</span><br><span class="line">SW1(config-vlan)#name caiwu</span><br><span class="line">SW1(config-vlan)#ex</span><br><span class="line">SW1(config)#vlan 40</span><br><span class="line">SW1(config-vlan)#name www</span><br><span class="line">SW1(config-vlan)#ex</span><br><span class="line">SW1(config)#int vlan 10</span><br><span class="line">SW1(config-if)#ip add 192.168.1.1 255.255.255.0  </span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#int vlan 20</span><br><span class="line">SW1(config-if)#ip add 192.168.2.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#int vlan 30</span><br><span class="line">SW1(config-if)#ip add 192.168.3.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#int vlan 40</span><br><span class="line">SW1(config-if)#ip add 192.168.4.1 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#ex</span><br><span class="line">SW1#show vlan         #VLAN创建完成后可使用show vlan命令查看配置情况</span><br></pre></td></tr></table></figure>
<h2 id="以太网通道（EthernetChannel）"><a href="#以太网通道（EthernetChannel）" class="headerlink" title="以太网通道（EthernetChannel）"></a>以太网通道（EthernetChannel）</h2><p>Ethernet Channel是指以太网信道，Ethernet Channel是由Cisco研发的技术，它旨在解决交换机与交换机之间的通信问题，方法是将多个快速以太网端口或吉比特以太网端口分组到一个逻辑通道中，使得所有接入层与分布层交换机之间的链路都被捆绑进了EtherChannel中，并且都处于转发模式中。也背称为以太端口捆绑、端口聚集或以太链路聚集，以太通道为交换机提供了端口捆绑的技术，允许两个交换机之间通过两个或多个端口并行连接，同时传输数据，以提供更高的带宽。通过端口聚集协议（PAgP） 建立以太通道。端口聚合是目前许多交换机支持的一个高级特性。<br>具体配置命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1&gt;en</span><br><span class="line">SW1#conf t</span><br><span class="line">SW1(config)#int range f0/8-9</span><br><span class="line">SW1(config-if-range)#switchport trunk encapsulation dot1q</span><br><span class="line">SW1(config-if-range)#switchport mode trunk</span><br><span class="line">SW1(config-if-range)#channel-group 1 mode on</span><br><span class="line"></span><br><span class="line">SW2&gt;en</span><br><span class="line">SW2#conf t</span><br><span class="line">SW2(config)#int range f0/8-9</span><br><span class="line">SW2(config-if-range)#switchport trunk encapsulation dot1q</span><br><span class="line">SW2(config-if-range)#switchport mode trunk</span><br><span class="line">SW2(config-if-range)#channel-group 1 mode on</span><br></pre></td></tr></table></figure>
<h2 id="DHCP（Dynamic-Host-Configuration-Protocol）"><a href="#DHCP（Dynamic-Host-Configuration-Protocol）" class="headerlink" title="DHCP（Dynamic Host Configuration Protocol）"></a>DHCP（Dynamic Host Configuration Protocol）</h2><p>DHCP是电脑动态主机设置协议、能够集中管理和自动分配IP网络地址的通信协议。在IP网络中，每个连接Internet的设备都需要分配唯一的IP地址、当某台计算机移到网络中的其它位置时，能自动收到新的IP地址。通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。<br>DHCP客户端可以带来如下好处<br>1、降低了配置和部署设备时间<br>2、降低了发生配置错误的可能性<br>3、可以集中化管理设备的IP地址分配<br>具体配置命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1&gt;en</span><br><span class="line">SW1#conf t</span><br><span class="line">SW1(config)#ip dhcp pool xingzheng</span><br><span class="line">SW1(dhcp-config)#ne</span><br><span class="line">SW1(dhcp-config)#network 192.168.1.0 255.255.255.0 </span><br><span class="line">SW1(dhcp-config)#default-router 192.168.1.1</span><br><span class="line">SW1(dhcp-config)#dns-server 114.114.114.114</span><br><span class="line">#大体配置都一样，除了SW2的网关为1.2外，大体配置都一样，所以这里就不再一一赘述。</span><br></pre></td></tr></table></figure>
<h2 id="PVST-负载均衡（Per-VLAN-Spanning-Tree-Plus）"><a href="#PVST-负载均衡（Per-VLAN-Spanning-Tree-Plus）" class="headerlink" title="PVST+负载均衡（Per VLAN Spanning Tree Plus）"></a>PVST+负载均衡（Per VLAN Spanning Tree Plus）</h2><p>PVST+支持在相同网络中同时存在CST和PVST，PVST+可以用802.1Q封装。 PVST+在Catalyst 802.1Q trunks上是自动启动的。也是每个VLAN一棵STP。也可以实现第2层的负载均衡。PVST+分成3种类型的区域：PVST区域&#x2F;PVST+区域&#x2F;单生成树区域。<br>PVST部分特点:</p>
<ul>
<li>1.支持ISL和IEEE802.1Q中继</li>
<li>2.支持cisco专有的STP扩展</li>
<li>3.添加BPDU防护和根防护增强功能</li>
<li>4.允许每一个VLAN有自己的根桥<br>具体配置命令如下所示:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1&gt;en</span><br><span class="line">SW1#conf t</span><br><span class="line">SW1(config)#spanning-tree vlan 10 root primary    #配置主根</span><br><span class="line">SW1(config)#spanning-tree vlan 20 root primary </span><br><span class="line">SW1(config)#spanning-tree vlan 30 root primary </span><br><span class="line">SW1(config)#spanning-tree vlan 40 root primary</span><br><span class="line">SW2&gt;en</span><br><span class="line">SW2#conf t</span><br><span class="line">SW2(config)#spanning-tree vlan 10 root secondary  #配置备份根</span><br><span class="line">SW2(config)#spanning-tree vlan 20 root secondary</span><br><span class="line">SW2(config)#spanning-tree vlan 30 root secondary</span><br><span class="line">SW2(config)#spanning-tree vlan 40 root secondary</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HSRP（Hot-Standby-Router-Protocol）"><a href="#HSRP（Hot-Standby-Router-Protocol）" class="headerlink" title="HSRP（Hot Standby Router Protocol）"></a>HSRP（Hot Standby Router Protocol）</h2><p>热备份路由器协议，是cisco平台一种特有的技术，是cisco 的私有协议。路由器是整个网络的核心和心脏，如果路由器发生致命性的故障，本地网络瘫痪，造成的损失也是难以估计的。因此，对路由器采用热备份是提高网络可靠性的必然选择。HSRP 向主机提供了缺省网关的冗余性，当网络边缘设备或接入电路出现故障时，HSRP 它能够确保用户通信迅速并透明地恢复， 以此为IP网络提供冗余性、容错和增强的路由选择功能。通过多个热备份组，路由器可以提供冗余备份，并在不同的IP 子网上实现负载分担。<br>具体配置命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1(config)#int vlan 10</span><br><span class="line">SW1(config-if)#standby 10 ip 192.168.1.254 #配置备份网关</span><br><span class="line">SW1(config-if)#standby priority 200        #配置优先级</span><br><span class="line">SW1(config-if)#standby 10 preempt          #配置抢占端口</span><br><span class="line">SW1(config-if)#standby 10 track fa0/1      #配置追踪端口</span><br><span class="line">SW1(config-if)#standby 10 track f0/10</span><br><span class="line">SW1(config-if)#standby 10 track f0/8</span><br><span class="line">SW1(config-if)#standby 10 track f0/9</span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#int vlan 20</span><br><span class="line">SW1(config-if)#standby 20 ip 192.168.2.254</span><br><span class="line">SW1(config-if)#standby 20 priority  200</span><br><span class="line">SW1(config-if)#standby 20 preempt</span><br><span class="line">SW1(config-if)#standby 20 track f0/1</span><br><span class="line">SW1(config-if)#standby 20 track f0/8</span><br><span class="line">SW1(config-if)#standby 20 track f0/9</span><br><span class="line">SW1(config-if)#standby 20 track f0/11</span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#int vlan 30</span><br><span class="line">SW1(config-if)#standby 30 ip 192.168.3.254</span><br><span class="line">SW1(config-if)#standby 30 priority  105</span><br><span class="line">SW1(config-if)#standby 30 preempt</span><br><span class="line">SW1(config-if)#ex</span><br><span class="line">SW1(config)#int vlan 40</span><br><span class="line">SW1(config-if)#standby 40 ip 192.168.4.254</span><br><span class="line">SW1(config-if)#standby 40 priority 105</span><br><span class="line">SW1(config-if)#standby 40 preempt</span><br><span class="line"></span><br><span class="line">SW2(config)#int vlan 10</span><br><span class="line">SW2(config-if)#standby 10 ip 192.168.1.254</span><br><span class="line">SW2(config-if)#standby 10 priority 105</span><br><span class="line">SW2(config-if)#standby 10 preempt </span><br><span class="line">SW2(config-if)#ex</span><br><span class="line">SW2(config)#int vlan 20</span><br><span class="line">SW2(config-if)#standby 20 ip 192.168.2.254</span><br><span class="line">SW2(config-if)#standby 20 priority 105</span><br><span class="line">SW2(config-if)#standby 20 preemp</span><br><span class="line">SW2(config-if)#ex</span><br><span class="line">SW2(config-if)#standby 30 ip 192.168.3.254</span><br><span class="line">SW2(config-if)#standby 30 priority 200</span><br><span class="line">SW2(config-if)#standby 30 preempt </span><br><span class="line">SW2(config-if)#standby 30 track f0/1</span><br><span class="line">SW2(config-if)#standby 30 track f0/8</span><br><span class="line">SW2(config-if)#standby 30 track f0/9</span><br><span class="line">SW2(config-if)#standby 30 track f0/10</span><br><span class="line">SW2(config-if)#ex</span><br><span class="line">SW2(config)#int vlan 40</span><br><span class="line">SW2(config-if)#st</span><br><span class="line">SW2(config-if)#standby 40 ip 192.168.4.254</span><br><span class="line">SW2(config-if)#standby 40 priority 200</span><br><span class="line">SW2(config-if)#standby 40 preempt</span><br><span class="line">SW2(config-if)#standby 40 track f0/1</span><br><span class="line">SW2(config-if)#standby 40 track f0/8</span><br><span class="line">SW2(config-if)#standby 40 track f0/9</span><br><span class="line">SW2(config-if)#standby 40 track f0/11</span><br><span class="line">SW2(config-if)#ex</span><br></pre></td></tr></table></figure>
<h2 id="OSPF（Open-Shortest-Path-First）"><a href="#OSPF（Open-Shortest-Path-First）" class="headerlink" title="OSPF（Open Shortest Path First）"></a>OSPF（Open Shortest Path First）</h2><p>OSPF(开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统（autonomous system,AS）内决策路由。是对链路状态路由协议的一种实现，隶属内部网关协议（IGP），故运作于自治系统内部。著名的迪克斯加算法(Dijkstra)被用来计算最短路径树。OSPF分为OSPFv2和OSPFv3两个版本,其中OSPFv2用在IPv4网络，OSPFv3用在IPv6网络。OSPFv2是由RFC 2328定义的，OSPFv3是由RFC 5340定义的。与RIP相比，OSPF是链路状态协议，而RIP是距离矢量协议。<br>让公司内部网络能够相互访问和访问服务器。在汇聚层的Cisco3560 系列以太网三层交换机上和核心层Cisco 2811 路由器上的启用OSPF 动态路由协议， 同时也是为了对外发布公司自己的服务器。能够让外网主机访问内网服务器。这样日后公司网络变动，设备可以自动学习相关路由表；这样既节省了网络管理员的配置管理工作，同时也为日后的公司发展的网络扩展性打下一个良好的要求。<br>具体配置命令如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#router-id 1.1.1.1</span><br><span class="line">R1(config-router)#network 1.1.1.1 0.0.0.0 area 1</span><br><span class="line">R1(config-router)#network 20.1.1.1 0.0.0.255 area 1</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#router-id 2.2.2.2</span><br><span class="line">R2(config-router)#network 2.2.2.2 0.0.0.0 area 0</span><br><span class="line">R2(config-router)#network 20.1.1.2 0.0.0.255 area 1</span><br><span class="line">R2(config-router)#network 30.1.1.1 0.0.0.255 area 0</span><br><span class="line">R2(config-router)#network 40.1.1.1 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">SW1(config)#router ospf 1</span><br><span class="line">SW1(config-router)#router-id 3.3.3.3</span><br><span class="line">SW1(config-router)#network 3.3.3.3 0.0.0.0 area 0</span><br><span class="line">SW1(config-router)#network 40.1.1.2 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.1.0 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.2.0 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.3.0 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.4.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">SW2(config)#router ospf 1</span><br><span class="line">SW2(config-router)#router-id 4.4.4.4</span><br><span class="line">SW2(config-router)#network 4.4.4.4 0.0.0.0 area 0</span><br><span class="line">SW2(config-router)#network 30.1.1.2 0.0.0.255 area 0</span><br><span class="line">SW2(config-router)#network 192.168.1.0 0.0.0.255 area 0</span><br><span class="line">SW2(config-router)#network 192.168.2.0 0.0.0.255 area 0</span><br><span class="line">SW2(config-router)#network 192.168.3.0 0.0.0.255 area 0</span><br><span class="line">SW2(config-router)#network 192.168.4.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>
<h2 id="ACL（Access-Control-List）"><a href="#ACL（Access-Control-List）" class="headerlink" title="ACL（Access Control List）"></a>ACL（Access Control List）</h2><p>访问控制列表（Access Control List，ACL）是路由器和交换机接口的指令列表，用来控制端口进出的数据包。ACL适用于所有的被路由协议，如IP、IPX、AppleTalk等。信息点间通信和内外网络的通信都是企业网络中必不可少的业务需求，为了保证内网的安全性，需要通过安全策略来保障非授权用户只能访问特定的网络资源，从而达到对访问进行控制的目的。简而言之，ACL可以过滤网络中的流量，是控制访问的一种网络技术手段。配置ACL后，可以限制网络流量，允许特定设备访问，指定转发特定端口数据包等。如可以配置ACL，禁止局域网内的设备访问外部公共网络，或者只能使用FTP服务。ACL既可以在路由器上配置，也可以在具有ACL功能的业务软件上进行配置。ACL是物联网中保障系统安全性的重要技术，在设备硬件层安全基础上，通过对在软件层面对设备间通信进行访问控制，使用可编程方法指定访问规则，防止非法设备破坏系统安全，非法获取系统数据。<br>具体配置命令如下:</p>
<h3 id="配置财务部独立"><a href="#配置财务部独立" class="headerlink" title="配置财务部独立"></a>配置财务部独立</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1(config)#access-list 101 deny ip any any #拒绝访问外网</span><br><span class="line">SW1(config)#access-list 102 permit udp any eq bootpc any eq bootps</span><br><span class="line">#在这里要说一下，如果配置了101ACL，那么vlan 30下的主机均无法获取IP地址，所以加一条允许获取DHCP报文</span><br><span class="line">SW1(config)#int vlan 30</span><br><span class="line">SW1(config-if)#ip access-group 101 in #加入端口</span><br><span class="line">SW1(config-if)#ip access-group 101 out </span><br><span class="line">SW1(config-if)#ip access-group 102 in</span><br><span class="line">SW1(config-if)#ip access-group 102 out</span><br><span class="line"></span><br><span class="line">SW2(config)#access-list 101  deny ip any any</span><br><span class="line">SW2(config)#access-list 102 permit udp any eq bootpc any eq bootps</span><br><span class="line">SW2(config)#int vlan 30</span><br><span class="line">SW2(config-if)#ip access-group 101 in</span><br><span class="line">SW2(config-if)#ip access-group 101 out</span><br><span class="line">SW2(config-if)#ip access-group 102 in</span><br><span class="line">SW2(config-if)#ip access-group 102 out</span><br></pre></td></tr></table></figure>
<h3 id="配置外网主机只能访问内网WWW服务器"><a href="#配置外网主机只能访问内网WWW服务器" class="headerlink" title="配置外网主机只能访问内网WWW服务器"></a>配置外网主机只能访问内网WWW服务器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R2(config)#access-list 101 permit tcp host 10.1.1.2 host 192.168.4.3 eq 80</span><br><span class="line">#允许外网主机访问WWW服务器web</span><br><span class="line">R2(config)#access-list 102 deny ip host 10.1.1.2 host 192.168.4.3</span><br><span class="line">#拒绝拼通，但是还是能通，配置没问题，可能是模拟器的问题</span><br><span class="line">R2(config)#access-list 103 permit ip any any</span><br><span class="line">#允许所有通过</span><br><span class="line">R2(config)#int f1/0</span><br><span class="line">R2(config-if)#ip access-group 101 in</span><br><span class="line">R2(config-if)#ip access-group 102 in</span><br><span class="line">R2(config-if)#ip access-group 103 in</span><br></pre></td></tr></table></figure>
<h3 id="只允许研发部远程登陆"><a href="#只允许研发部远程登陆" class="headerlink" title="只允许研发部远程登陆"></a>只允许研发部远程登陆</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R2(config)#access-list 1 permit 192.168.2.0 0.0.0.255</span><br><span class="line">#只允许该网段访问</span><br><span class="line">R2(config)#line vty 0 4</span><br><span class="line">R2(config-line)#password cisco</span><br><span class="line">R2(config-line)#login              #应提前配置特权模式密码</span><br><span class="line">R2(config-line)#access-class 1 in  #加入</span><br></pre></td></tr></table></figure>
<h2 id="其他基础配置"><a href="#其他基础配置" class="headerlink" title="其他基础配置"></a>其他基础配置</h2><p>在配置中经常输错命令，而导致配置框卡死，所以我们要防止这一现象的出现，能节省我们不少的时间，而防止这个现象的简单命令也很简单。还有就是所有的设备都应配置特权密码，远程密码等来保障公司的内部安全。其次在配置所有的接口的时候都应该加一句命令no shutdown，不管他是不是默认开启着都要配置。还有我们配置设备的时候要配置多个设备，所以还要配置永不登出。最重要一点就是一定要保存，在特权模式下输入wr即可，华为交换机为sava。<br>命令如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router&gt;enable</span><br><span class="line">Router#configure terminal</span><br><span class="line">Router(config)#no ip domain-lookup  #关闭域名解析功能各模式的密码配置</span><br><span class="line">R1(config)#line console 0</span><br><span class="line">R1(config-line)#password cisco</span><br><span class="line">R1(config-line)#exit</span><br><span class="line">R1(config)#line vty 0 4</span><br><span class="line">R1(config-line)#password cisco</span><br><span class="line">R1(config-line)#login</span><br><span class="line">R1(config-line)#exit</span><br><span class="line">R1(config)#enable secret cisco</span><br><span class="line"></span><br><span class="line">R1(config)#line vty 0 4</span><br><span class="line">R1(config-line)# exec-timeout 0 0   //配置永不登出</span><br><span class="line">R1(config-line)#exit</span><br><span class="line">#其他所有的设备都应配置，这里就不多在一一赘述</span><br></pre></td></tr></table></figure>
<h1 id="设计方案优势"><a href="#设计方案优势" class="headerlink" title="设计方案优势"></a>设计方案优势</h1><h2 id="高带宽，高性能"><a href="#高带宽，高性能" class="headerlink" title="高带宽，高性能"></a>高带宽，高性能</h2><p>相比于传统组网设计方案， 本次的设计方案是基于标准的二、三层以太网交换技术， 技术成熟度非常高； 100M 的带宽可充分满足用户高速上网、内容下载及多媒体等多种宽带业务。给用户提供了真正的高带宽网络， 对高带宽的业务的扩展提供了强大的支撑能力。</p>
<h2 id="完善的管理机制"><a href="#完善的管理机制" class="headerlink" title="完善的管理机制"></a>完善的管理机制</h2><p>该企业各交换机通过内在的多种安全机制可有效防止和控制病毒传播和网络流量攻击，如VLAN、ACL、NAT、MSTP、MAC地址过滤等等，满足企业网络加强对访问者进行控制、限制非授权用户通信的需求； 对于企业来说，它的带宽资源都是有限的。由于没有带宽限制和优先级设置，<br>一些重要用户和重要应用得不到必要的带宽保证而影响了工作。</p>
<h2 id="易于维护"><a href="#易于维护" class="headerlink" title="易于维护"></a>易于维护</h2><p>在本次设计方案中采用的Cisco 网络设备都经过独特设计具备防尘、防潮、防静电等多种使用的特点。支持 RS-232 本地管理口及 Telnet 、WEB、SNMP代理，远程监控。</p>
<h2 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h2><p>CISCO 网络产品均使用国际上主流的先进ASIC 芯片进行设计，并率先采用 ISO9002 生产标准进行生产，确保了设备的稳定性。</p>
<h1 id="网络测试"><a href="#网络测试" class="headerlink" title="网络测试"></a>网络测试</h1><p>到此为止，基本上完成了一个较为完整的企业网的设计。但是还不能确定它是否能够正常运行，所以我们要对其进行测试、调试。<br>测试结果如下：</p>
<ul>
<li>1.测试 OSPF<br><img src="/images/ospf-testing.jpg" alt="外网主机访问WWW服务"><br><img src="/images/ospf-testing-2.jpg" alt="内网互通"><br><img src="/images/ospf-testing-3.jpg" alt="内网访问WWW服务"></li>
<li>2.测试 DHCP<br><img src="/images/dhcp-testing.jpg" alt="内网主机获取IP地址"></li>
<li>3.测试 ACL<br><img src="/images/acl-testing.jpg" alt="财务部独立"><br><img src="/images/acl-testing-2.jpg" alt="研发部远程"><br><img src="/images/acl-testing-3.jpg" alt="其他部门拒绝远程"></li>
<li>4.测试 HSRP<br><img src="/images/hsrp-testing.jpg" alt="SW1的HSRP信息"><br><img src="/images/hrsp-testing-2.jpg" alt="SW2的HSRP信息"></li>
<li>5.其他命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SW1#show spanning-tree    #查看生成树协议</span><br><span class="line">SW1#show ip route         #查看路由转换</span><br><span class="line">SW1#show ip access-lists  #查看访问控制列表</span><br><span class="line">SW1#show standby brief    #查看热备份信息</span><br><span class="line">SW1#show vlan	          #查看vlan信息</span><br><span class="line">SW1#show vtp status       #查看vtp信息</span><br><span class="line">······</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在此之前我们所学的都是一些关于网络方面的理论知识，很少用于实践中去，通过这次设计使我明白了自己原来知识还比较欠缺，相关配置仍有小问题。但是自己要学的东西还很多，学习是一个积累的过程，在以后的工作、生活中都应该不断的学习，实践，努力提高自己的专业知识和综合素质。从中我确实也学到了很多知识，更培养了我独立工作与思考的能力。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>华为交换机为systemview，其他命令大体神似，华三就不知道了，锐捷感觉就像是复制思科的…其中华为交换机默认接口类型为Hybrid，而其他交换机的通常默认为Access<br>Hybrid即可实现Access功能也可以实现Trunk功能，还可以在没有三层网络设备的情况下实现跨vlan通信和访问控制，当然了，也有局限性，就是各个vlan中的IP地址都属于同一网段，否则，仍然需要通过三层网络设备来进行通信。相对于Access接口和Trunk接口具有更高的灵活性与可控性。<br>思科的话接入层必须是Access，所以不支持二层不同Vlan之间通信，需借助三层，或静态路由</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>VTP</tag>
        <tag>VLAN</tag>
        <tag>DHCP</tag>
        <tag>HSRP</tag>
        <tag>OSPF</tag>
        <tag>ACL</tag>
        <tag>PVST</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>打水晶头</title>
    <url>/2022/03/21/%E6%B0%B4%E6%99%B6%E5%A4%B4%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>最近在公司发现我主机的网络非常慢，查看网络信息只有百兆，别人都是千兆网，怀疑水晶头制作不标准，于是重新制作水晶头</p>
<h1 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h1><ul>
<li>剪线钳</li>
<li>超五类网线和五类水晶头若干(虽然我能一次成功)</li>
<li>测线仪</li>
</ul>
<h1 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h1><p>1.剥开网线的绝缘层，露出四根双绞线<br><img src="/images/cat5e.jpg"><br>2.按照“橙白-橙-绿白-蓝-蓝白-绿-棕白-棕”的顺序依次将线排列好，并将线平展<br><img src="/images/cat5e-2.jpg"><br>3.将排列并平展的网线，放入水晶头里面<br><img src="/images/cat5e-3.jpg"><br>4.利用网线钳，将网线和水晶头固定<br>5.利用测线仪，测试网线是否通畅,或者直接上机测试查看网络是否千兆</p>
<h1 id="关于568A和586B"><a href="#关于568A和586B" class="headerlink" title="关于568A和586B"></a>关于568A和586B</h1><p>以前在学习时说要按照顺序来接线，实际上只要两端的八根线一一对应上即可，至于抗不抗干扰，没有实际过多的体会<br>其次如果是百兆网，直接使用1236线，也就是，橙白-橙-绿白-绿即可通信<br>工作中还是建议按照568b顺序来，毕竟成双结对抗干扰<br>至于568A，现在的设备都会自适应，所以基本上不用交叉线了</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Cat5e</tag>
        <tag>水晶头</tag>
        <tag>568A</tag>
        <tag>568B</tag>
      </tags>
  </entry>
</search>
