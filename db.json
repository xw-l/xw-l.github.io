{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/abc.png","path":"img/abc.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/adc51ac83a4784bfd25c7cae243b405.png","path":"img/adc51ac83a4784bfd25c7cae243b405.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"source/images/11.jpg","path":"images/11.jpg","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":0,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":0,"renderable":0},{"_id":"source/images/web.jpg","path":"images/web.jpg","modified":0,"renderable":0},{"_id":"source/mp3/以父之名周杰伦.mp3","path":"mp3/以父之名周杰伦.mp3","modified":0,"renderable":0},{"_id":"source/mp3/水星记英文翻唱.mp3","path":"mp3/水星记英文翻唱.mp3","modified":0,"renderable":0},{"_id":"source/mp4/Av2047363.mp4","path":"mp4/Av2047363.mp4","modified":0,"renderable":0},{"_id":"source/mp4/young_man.mp4","path":"mp4/young_man.mp4","modified":0,"renderable":0},{"_id":"themes/butterfly/source/img/abcde.png","path":"img/abcde.png","modified":0,"renderable":1},{"_id":"source/images/LVS-DR-more.png","path":"images/LVS-DR-more.png","modified":0,"renderable":0},{"_id":"source/images/LVS-DR-single.png","path":"images/LVS-DR-single.png","modified":0,"renderable":0},{"_id":"source/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png","path":"images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png","modified":0,"renderable":0},{"_id":"source/images/LVS-NAT.png","path":"images/LVS-NAT.png","modified":0,"renderable":0},{"_id":"source/images/LVS-TUNNEL-抓包.png","path":"images/LVS-TUNNEL-抓包.png","modified":0,"renderable":0},{"_id":"source/images/LVS-TUNNEL.jpg","path":"images/LVS-TUNNEL.jpg","modified":0,"renderable":0},{"_id":"source/images/实战.png","path":"images/实战.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/img/abc.png.bak","path":"img/abc.png.bak","modified":0,"renderable":1},{"_id":"source/http.jpg","path":"http.jpg","modified":0,"renderable":0},{"_id":"source/images/JDK.png","path":"images/JDK.png","modified":0,"renderable":0},{"_id":"source/images/Nexus优化.png","path":"images/Nexus优化.png","modified":0,"renderable":0},{"_id":"source/images/Nexus优化2.png","path":"images/Nexus优化2.png","modified":0,"renderable":0},{"_id":"source/images/add-client.jpg","path":"images/add-client.jpg","modified":0,"renderable":0},{"_id":"source/images/apt-link.png","path":"images/apt-link.png","modified":0,"renderable":0},{"_id":"source/images/build-images-2.jpg","path":"images/build-images-2.jpg","modified":0,"renderable":0},{"_id":"source/images/build-images.jpg","path":"images/build-images.jpg","modified":0,"renderable":0},{"_id":"source/images/client-mesg.jpg","path":"images/client-mesg.jpg","modified":0,"renderable":0},{"_id":"source/images/clone-1.jpg","path":"images/clone-1.jpg","modified":0,"renderable":0},{"_id":"source/images/clone-2.jpg","path":"images/clone-2.jpg","modified":0,"renderable":0},{"_id":"source/images/clone-3.jpg","path":"images/clone-3.jpg","modified":0,"renderable":0},{"_id":"source/images/clone-4.jpg","path":"images/clone-4.jpg","modified":0,"renderable":0},{"_id":"source/images/clone-5.jpg","path":"images/clone-5.jpg","modified":0,"renderable":0},{"_id":"source/images/clone-6.jpg","path":"images/clone-6.jpg","modified":0,"renderable":0},{"_id":"source/images/create-ok.jpg","path":"images/create-ok.jpg","modified":0,"renderable":0},{"_id":"source/images/create-vm.jpg","path":"images/create-vm.jpg","modified":0,"renderable":0},{"_id":"source/images/dashbords.jpg","path":"images/dashbords.jpg","modified":0,"renderable":0},{"_id":"source/images/fist-page.jpg","path":"images/fist-page.jpg","modified":0,"renderable":0},{"_id":"source/images/h3-check.jpg","path":"images/h3-check.jpg","modified":0,"renderable":0},{"_id":"source/images/h3.jpg","path":"images/h3.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-create.jpg","path":"images/harbor-create.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-docker-images.jpg","path":"images/harbor-docker-images.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-hight-use-2.jpg","path":"images/harbor-hight-use-2.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-hight-use.jpg","path":"images/harbor-hight-use.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-images.jpg","path":"images/harbor-images.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-login.jpg","path":"images/harbor-login.jpg","modified":0,"renderable":0},{"_id":"source/images/harbor-pull.jpg","path":"images/harbor-pull.jpg","modified":0,"renderable":0},{"_id":"source/images/high_use.png","path":"images/high_use.png","modified":0,"renderable":0},{"_id":"source/images/http.png","path":"images/http.png","modified":0,"renderable":0},{"_id":"source/images/import-dashbords-2.jpg","path":"images/import-dashbords-2.jpg","modified":0,"renderable":0},{"_id":"source/images/import-dashbords.jpg","path":"images/import-dashbords.jpg","modified":0,"renderable":0},{"_id":"source/images/install-centos7.jpg","path":"images/install-centos7.jpg","modified":0,"renderable":0},{"_id":"source/images/install-ok.jpg","path":"images/install-ok.jpg","modified":0,"renderable":0},{"_id":"source/images/last-image.jpg","path":"images/last-image.jpg","modified":0,"renderable":0},{"_id":"source/images/more-setting.jpg","path":"images/more-setting.jpg","modified":0,"renderable":0},{"_id":"source/images/pull-images.jpg","path":"images/pull-images.jpg","modified":0,"renderable":0},{"_id":"source/images/tomcat.png","path":"images/tomcat.png","modified":0,"renderable":0},{"_id":"source/images/web-test-2.jpg","path":"images/web-test-2.jpg","modified":0,"renderable":0},{"_id":"source/images/web-test.jpg","path":"images/web-test.jpg","modified":0,"renderable":0},{"_id":"source/images/win-10.jpg","path":"images/win-10.jpg","modified":0,"renderable":0},{"_id":"source/images/win-11.jpg","path":"images/win-11.jpg","modified":0,"renderable":0},{"_id":"source/images/win-12.jpg","path":"images/win-12.jpg","modified":0,"renderable":0},{"_id":"source/images/win-1.jpg","path":"images/win-1.jpg","modified":0,"renderable":0},{"_id":"source/images/win-2.jpg","path":"images/win-2.jpg","modified":0,"renderable":0},{"_id":"source/images/win-3.jpg","path":"images/win-3.jpg","modified":0,"renderable":0},{"_id":"source/images/win-4.jpg","path":"images/win-4.jpg","modified":0,"renderable":0},{"_id":"source/images/win-5.jpg","path":"images/win-5.jpg","modified":0,"renderable":0},{"_id":"source/images/win-6.jpg","path":"images/win-6.jpg","modified":0,"renderable":0},{"_id":"source/images/win-7.jpg","path":"images/win-7.jpg","modified":0,"renderable":0},{"_id":"source/images/win-8.jpg","path":"images/win-8.jpg","modified":0,"renderable":0},{"_id":"source/images/win-9.jpg","path":"images/win-9.jpg","modified":0,"renderable":0},{"_id":"source/images/xmanager-ok.jpg","path":"images/xmanager-ok.jpg","modified":0,"renderable":0},{"_id":"source/images/zabbix-login.jpg","path":"images/zabbix-login.jpg","modified":0,"renderable":0},{"_id":"source/images/zabbix-mysql.jpg","path":"images/zabbix-mysql.jpg","modified":0,"renderable":0},{"_id":"source/images/zabbix-时区选择.jpg","path":"images/zabbix-时区选择.jpg","modified":0,"renderable":0},{"_id":"source/images/zabbix检测.jpg","path":"images/zabbix检测.jpg","modified":0,"renderable":0},{"_id":"source/images/创建apt仓库源.png","path":"images/创建apt仓库源.png","modified":0,"renderable":0},{"_id":"source/images/客户端更新测试.png","path":"images/客户端更新测试.png","modified":0,"renderable":0},{"_id":"source/images/数据存放目录.png","path":"images/数据存放目录.png","modified":0,"renderable":0},{"_id":"source/images/测试下载.png","path":"images/测试下载.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Tip.md","hash":"aa61cfb4068acb84def859e65d3e88da259e7a3e","modified":1677749293000},{"_id":"source/_posts/定时任务详解.md","hash":"b5a4246097c7c6ed660ad0c34265b71284c27677","modified":1680849324792},{"_id":"source/_posts/编译nginx.md","hash":"49c5d273df5296b88bf6c4fbafd0ceeb51361de6","modified":1684672361641},{"_id":"source/_posts/if.md","hash":"03ac4513b9ec0baac4958ec1a3458d5610e0c30c","modified":1680586654879},{"_id":"source/_posts/PV，VG，LV.md","hash":"1a8e7d9d025752d9d8a528dac4569c78e62835a9","modified":1679747474551},{"_id":"source/_posts/简单搭建私人仓库源.md","hash":"a089c5942d365811dc2fcd79281e1104245da175","modified":1681906172944},{"_id":"source/images/2.png","hash":"0900e6f3dbf40c074f1d5cd1295110b4c52b3d7f","modified":1679376625000},{"_id":"source/images/11.jpg","hash":"85428fc11798e438a224ec2f183a2d2c62f6eb96","modified":1679376512000},{"_id":"source/images/3.png","hash":"8326912d4c8a4ac445f2be8184e28316a110aa11","modified":1679376701000},{"_id":"source/images/4.png","hash":"39a7ce82694f4c3ed99666b2c0539fd1089d38f7","modified":1679377614000},{"_id":"source/images/5.png","hash":"74245b476409d8b6e4f718758433ab3fc66ba74b","modified":1679377831000},{"_id":"source/images/7.png","hash":"634fa6f7bfb91033ddb92846aafd75b92870ee6a","modified":1679379553000},{"_id":"source/images/6.png","hash":"0f45e59d6af6c040af7cd753468acf1db6a28f7d","modified":1679378238000},{"_id":"source/images/1.jpg","hash":"868d573dc1f9c93318147624218031870841331b","modified":1678884524127},{"_id":"themes/butterfly/_config.yml","hash":"50f5e66269f9cd38751ec388df3ae30264dc0616","modified":1688023383997},{"_id":"themes/butterfly/package-lock.json","hash":"41e79e5e14283e83414b80b5c4d845b94a6666ea","modified":1682255641777},{"_id":"themes/butterfly/package.json","hash":"cc92af7263798e24f4d4a00698d6491de9ece650","modified":1682255641681},{"_id":"themes/butterfly/plugins.yml","hash":"c7a060713f72ec8b4a45244b3aa8d51d772f5ce8","modified":1682227992854},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1682227992826},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1682227992826},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1682227992826},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1682227992826},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1682227992826},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1682227992826},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1682227992854},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1682227992854},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1682227992854},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1682227992854},{"_id":"themes/butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1682227992826},{"_id":"themes/butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1682227992826},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1682227992826},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1682227992826},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1682227992826},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1682227992826},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1682227992826},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1682227992826},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1682227992830},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1682227992854},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1682227992854},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1682227992854},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1682227992854},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1682227992854},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1682227992854},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1682227992854},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1682227992854},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1682227992854},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1682227992854},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1682227992854},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1682227992854},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1682227992854},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1682227992854},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1682227992854},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1682227992858},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1682227992858},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1682227992826},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1682227992858},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1682227992826},{"_id":"themes/butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1682227992858},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1682227992858},{"_id":"themes/butterfly/source/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1682227992858},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"021ccdca211cce0438a378ada37897a8ffcb9574","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1682227992854},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1682227992826},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1682227992854},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1682227992854},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1682227992854},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1682227992858},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1682227992854},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1682227992854},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1682227992858},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1682227992854},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1682227992854},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1682227992854},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1682227992854},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1682227992854},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1682227992858},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1682227992854},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1682227992858},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1682227992858},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1682227992858},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1682227992858},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1682227992830},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1682227992858},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1682227992830},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1682227992858},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1682227992830},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a833715eec2171ff05664d6d5752a57c954192ce","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9c16ff9cdc444ebf47eed33ea35b8366459a18f0","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1682227992854},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1682227992854},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1682227992854},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1682227992854},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1682227992854},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1682227992854},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1682227992854},{"_id":"themes/butterfly/source/img/adc51ac83a4784bfd25c7cae243b405.png","hash":"e75a29c41c54d91a68e5946b2305daa661b7269f","modified":1682241032000},{"_id":"themes/butterfly/source/img/abc.png","hash":"610ce657dc555505f093c17155ff86c8136a68c6","modified":1684294388000},{"_id":"source/images/web.jpg","hash":"1d5034b21b43995889398b9046c5f6e7d21bf599","modified":1527597366000},{"_id":"source/mp3/水星记英文翻唱.mp3","hash":"a7fa2d5f42a15b958be953d83dd5563ccb80fa8e","modified":1673053300000},{"_id":"source/mp3/以父之名周杰伦.mp3","hash":"89df874b5ef970801339685a3d715e8d6be96ead","modified":1672525952000},{"_id":"source/mp4/Av2047363.mp4","hash":"f92db319625f62d84ea44ed1d855c9ab5035e25b","modified":1680351235000},{"_id":"source/mp4/young_man.mp4","hash":"f0bcb5c67c36764a2bdc572a4b95afce1b6ed72e","modified":1647688188000},{"_id":"themes/butterfly/source/img/abcde.png","hash":"e78d60bff4d6fd7386ff1031962ede8abd583534","modified":1683706665295},{"_id":"themes/butterfly/._config.yml.swp","hash":"15fb36f4d0ffd7dec91613a2341195e276ed18e6","modified":1682954727819},{"_id":"source/_posts/简单实现mysql主从.md","hash":"ff4928ada1520208c9988f3e6df7a395d4a59dfb","modified":1683027202661},{"_id":"source/_posts/mysql半复制主从.md","hash":"3e67d52b773ec351d9ed2d86a8cf8ec8491cf61e","modified":1683293685926},{"_id":"source/_posts/LVS实战.md","hash":"bdeb09d22184f3dc75f053f78722a303bcd69911","modified":1684047806163},{"_id":"source/_posts/分布式LAMP.md","hash":"64da6b8d9601488031fee6ebc95081e5efcc61dc","modified":1683815807111},{"_id":"source/_posts/LVS-NAT和Keepalived的高可用.md","hash":"6f14256cd3470e636ff7e3e4a30e25e0cc1d03e1","modified":1685240488627},{"_id":"source/images/LVS-NAT.png","hash":"7f9f7822dd4ee866e022312b95efc80616558d4d","modified":1684052459000},{"_id":"source/images/实战.png","hash":"ba362c7ec037632c5381e1778d0c065678d86993","modified":1683811557000},{"_id":"source/images/LVS-TUNNEL-抓包.png","hash":"33ca09c4e01efd1b2a859ea4b347a4dcec50e1d4","modified":1684046546000},{"_id":"source/images/LVS-DR-more.png","hash":"4cc8b1d613889cc99f898fa95a03eb17ec095a7f","modified":1684032687000},{"_id":"source/images/LVS-DR-single.png","hash":"f300f55d61ed77e8ff8d755413e3e047b281e4f2","modified":1684032621000},{"_id":"source/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png","hash":"0db3bd4c2e659b6db2b5b79daf5ee121cd1f8b35","modified":1684075709000},{"_id":"source/images/LVS-TUNNEL.jpg","hash":"b4e2f5d5a40fb99c8f3e306a6d1407eac261cfc0","modified":1684046774000},{"_id":"themes/butterfly/source/img/abc.png.bak","hash":"a12b14bf1af46c67e243a3fb9ada05fbd8ec1e8d","modified":1683706624355},{"_id":"source/_posts/JDK_or_Tomcat.md","hash":"9adf620d4f5c9d382c03e1bfa96ca60f5ba6c8d6","modified":1684975753273},{"_id":"source/_posts/Nexus.md","hash":"59a1e59985a4f6ed2ca3407e95faf53bb07c8fc6","modified":1685454534699},{"_id":"source/_posts/LVS高可用的一步步推进.md","hash":"a7d926c2551a3b49a3af06cd18d529f26003a7c3","modified":1685454868578},{"_id":"source/_posts/haproxy.md","hash":"2ea1cd10f1a8ea5f7f0b43822d6f38e6adbc0839","modified":1687786127450},{"_id":"source/_posts/h3.md","hash":"a78415a2b26dfbddb723336a1bd51d8b1b14e9a1","modified":1687947310120},{"_id":"source/_posts/docker-simple-build.md","hash":"d96dcfe711b71cb4dbf504c638129cf3427f3128","modified":1687103103729},{"_id":"source/_posts/keeplived.md","hash":"5fb31d95afd77f7d438db113099b8f8f97cba248","modified":1687786109361},{"_id":"source/_posts/harbor.md","hash":"4c17671a1d921974a3c97b539971acd74a9c2666","modified":1687011283876},{"_id":"source/_posts/zabbix-grafana.md","hash":"91f04cd8a518e2524a2354a9345d575a9aa054b6","modified":1686051170443},{"_id":"source/_posts/zabbix.md","hash":"507c67e692fa32f4b6cef75ebc17238170e0662b","modified":1685698470159},{"_id":"source/_posts/kvm.md","hash":"c75f4646134946da4a948c7d53373fba97eedd73","modified":1686225389812},{"_id":"source/_posts/nginx编译2.md","hash":"925dae5d47f4ec4a9e9a2a54aa2f82512540de89","modified":1684676278014},{"_id":"source/images/build-images-2.jpg","hash":"7d6244a69b84777c6736e9ab92f18a4f012af89c","modified":1687098887000},{"_id":"source/images/clone-1.jpg","hash":"63bd70e7a548fd0c24f667e7a31560e830d1ddcf","modified":1686144225000},{"_id":"source/images/clone-3.jpg","hash":"fba624bd6746554102a246d34718fb1f14d5fb46","modified":1686144403000},{"_id":"source/images/clone-2.jpg","hash":"314bc8e55d40077640a92dd872f00fc55642728a","modified":1686144335000},{"_id":"source/images/clone-4.jpg","hash":"2e15763b90a72c572c3d16a13a6b716608e4457b","modified":1686144443000},{"_id":"source/images/clone-5.jpg","hash":"e918ee3578aa12b8a40a1fb1458cbc2395bf44a7","modified":1686144465000},{"_id":"source/images/clone-6.jpg","hash":"65cfb979234f22fc056090f5a3d1e285c94ac123","modified":1686145245000},{"_id":"source/images/harbor-docker-images.jpg","hash":"2d61cc36a75ffa6d5de755f2a0e7f9a1fe991540","modified":1687002333000},{"_id":"source/images/harbor-pull.jpg","hash":"c9b625c566d8debb4341c10db82b71ae8affae3c","modified":1687002938000},{"_id":"source/images/harbor-hight-use.jpg","hash":"9f66bea89399f285dd8460fe7aca4879d2b04024","modified":1687007815000},{"_id":"source/images/harbor-login.jpg","hash":"429cf5d681a4dd059e34cbd3780206079dd47a1c","modified":1687001770000},{"_id":"source/images/harbor-images.jpg","hash":"6a18b375ece2ec1dc785849b2eee36ea055d5b0c","modified":1687003149000},{"_id":"source/images/pull-images.jpg","hash":"f294c7f01bb01df65d8933c35041f3b2133a366b","modified":1687080899000},{"_id":"source/images/tomcat.png","hash":"5234f011d1c233b13036f56d80ff33f4bb4e6c83","modified":1684938753000},{"_id":"source/images/win-1.jpg","hash":"b07dd5c4762cdabe382aa285da4dc95215f1a172","modified":1686191559000},{"_id":"source/images/win-3.jpg","hash":"28b0e0db62760f01901e903a2458450c629b41b1","modified":1686192734000},{"_id":"source/images/win-5.jpg","hash":"c37252aeb2adc5ab2b1c489409f0e7c6c00a5f91","modified":1686192963000},{"_id":"source/images/win-4.jpg","hash":"82daf729f6fb988e66c281c1f7dc2a06814c7d25","modified":1686192854000},{"_id":"source/images/win-6.jpg","hash":"106f24c17b37c49c70a71a0c15a88cd8995c9b8b","modified":1686193055000},{"_id":"source/images/win-7.jpg","hash":"bb4c7099b9c0aded00140abed4a21da32748387d","modified":1686193296000},{"_id":"source/images/zabbix-mysql.jpg","hash":"0c20609664dd5f39fe4c701b6c925062a39a37fe","modified":1685586238000},{"_id":"source/images/zabbix检测.jpg","hash":"bd330dbcf338c34120f58da342bd4b60cb0cf326","modified":1685586267000},{"_id":"source/images/zabbix-时区选择.jpg","hash":"98f3ceb5643dcb2052973c7c7fec59da2fe1ee02","modified":1685586174000},{"_id":"source/images/测试下载.png","hash":"8898f65dc57f49e9155e74de6e48520cb129b1b4","modified":1685454359000},{"_id":"source/images/add-client.jpg","hash":"1d6689f2a7f8750a3d8f6ae5f7abbb9a9d4fd8ef","modified":1685591344000},{"_id":"source/images/build-images.jpg","hash":"9aaaddc9174d861f8c9bad5e9344ae2a037cb819","modified":1687085422000},{"_id":"source/images/apt-link.png","hash":"0a0ab000a1c0f0702882ca867fa14c86fbbb5730","modified":1685452237000},{"_id":"source/images/client-mesg.jpg","hash":"284968a284344b812daf336469437a52b8cd4586","modified":1685591799000},{"_id":"source/images/create-ok.jpg","hash":"fa18aae33ba7d8f141159a718a96cbf833c08e2c","modified":1686056835000},{"_id":"source/images/create-vm.jpg","hash":"9e5ce1cc0038ef5944d39824539c26c7d561b0e8","modified":1686056490000},{"_id":"source/images/fist-page.jpg","hash":"20892e15f1dbbff6b7354837fee4632515b82c2d","modified":1686056410000},{"_id":"source/images/h3.jpg","hash":"2fdf7a3717ad649b3d7c9ce7cbd29d7b879a2be0","modified":1687942006000},{"_id":"source/images/harbor-create.jpg","hash":"5b334d1d000b1e955912708bef0da764faf2fcc5","modified":1687001914000},{"_id":"source/images/harbor-hight-use-2.jpg","hash":"95c772d0d3910cf6bcb93f801b97faaee4b57bae","modified":1687007989000},{"_id":"source/images/high_use.png","hash":"6a2b2751b68bbe4ace5ca781d43d0ae81b58651a","modified":1685435444000},{"_id":"source/images/import-dashbords-2.jpg","hash":"cf3a39d3508b7e378791434ad532dd1c66453469","modified":1686050819000},{"_id":"source/images/import-dashbords.jpg","hash":"d3c69db7ee0465cbe6a2c86dae865fa34ea5b8df","modified":1686050768000},{"_id":"source/images/more-setting.jpg","hash":"8626c77561d5acb6052a57519e7ec3d5e669ef23","modified":1686056655000},{"_id":"source/images/win-2.jpg","hash":"cff83bfa9f066ac82b85eb9f6ae0e3c676b6bdb3","modified":1686192425000},{"_id":"source/images/win-8.jpg","hash":"c41f28a34e47706f2ce25858515a77bad051abbf","modified":1686193803000},{"_id":"source/images/zabbix-login.jpg","hash":"731599365fd2685701c3b9f6bba579dd4850c039","modified":1685586972000},{"_id":"source/images/win-9.jpg","hash":"aed74dd032b5f2a2b0569e0d8e83b4c9151db0c2","modified":1686194029000},{"_id":"source/images/客户端更新测试.png","hash":"e4fee9f1905bcbc0f95e354390cb156f5bb11974","modified":1685453106000},{"_id":"source/http.jpg","hash":"638f720228e1c64c50db2034055a31a0e183c918","modified":1684660265000},{"_id":"source/images/Nexus优化.png","hash":"01f10aceee4c496c94ebc7b65375efeaff9f50a5","modified":1685446724000},{"_id":"source/images/JDK.png","hash":"32673f73dacaf0735b661025acced12f401cfc0c","modified":1684938667000},{"_id":"source/images/Nexus优化2.png","hash":"2c964a3f463aa9ad977be7248c1773c97c26f946","modified":1685447141000},{"_id":"source/images/http.png","hash":"638f720228e1c64c50db2034055a31a0e183c918","modified":1684660265000},{"_id":"source/images/install-ok.jpg","hash":"e1f895031d3e65d521da335f06124e65f32b6fed","modified":1686059109000},{"_id":"source/images/last-image.jpg","hash":"199ece2df193e757b1e26dfc663c8bc42fd2e21e","modified":1686047235000},{"_id":"source/images/web-test-2.jpg","hash":"79a0f2e9c52d6b4138de61730bf67326854c7a94","modified":1687099797000},{"_id":"source/images/win-10.jpg","hash":"b1d8e52784ae46271049ca89df3f15bcea43e4d4","modified":1686194516000},{"_id":"source/images/web-test.jpg","hash":"0b2909e3c9d636aa45c84e3b4045dbb82585a421","modified":1687085671000},{"_id":"source/images/xmanager-ok.jpg","hash":"0d8b627b68fba5d2483258aa9a78cde80420d993","modified":1686059665000},{"_id":"source/images/win-12.jpg","hash":"f7073eeabb7409bf8bce736c559c1678378f19d3","modified":1686207847000},{"_id":"source/images/dashbords.jpg","hash":"754ba57ffb3be457b072d88caf25b12a5f5fad1a","modified":1686050627000},{"_id":"source/images/install-centos7.jpg","hash":"a0b0ef1c678b0ede49876c170f13ed3c20091b7b","modified":1686057215000},{"_id":"source/images/h3-check.jpg","hash":"9d52a99fc74af7397277c9930754fa774c64e46c","modified":1687942056000},{"_id":"source/images/win-11.jpg","hash":"8c0b7e132d7063eca571909a6326c9f2ddeea2dd","modified":1686207764000},{"_id":"source/images/数据存放目录.png","hash":"c023559b72895dee60664abd43acc09b7f92a5d7","modified":1685449212000},{"_id":"source/images/创建apt仓库源.png","hash":"bdaa4bda81268658c56b35cecb5f5b1cb5690558","modified":1685452050000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"if","date":"2023-03-30T08:57:13.000Z","_content":"\n理解一:\nif是条件判断语句，只有if的条件成立（表达式的值为真）后，才会执行if部分的代码，否则将会执行else的代码。\n如果是if...else if，则满足第一个if执行第一个if里的代码，如果不满足第一个if，而满足第二个if，则执行第二个if（即else if）的代码，如果都不满足，就不执行，如果后面有else（不带if的else），则只要前面的if和else if都没执行，就执行最后一个else。\n\n理解二:\nif,else if都需要接判断表达式。else不需要判断表达式。使用else if和else，必须紧跟在if之后，形参if-esle if组或if-else对。 没有对应的if语句，else if和else语句都会在编译时报错。\n\n\n**<font size=4 color=#ff000>真不会<font>**\n<audio controls>\n  <source src=\"mp3/以父之名周杰伦.mp3\" type=\"audio/mpeg\">\n  Your browser does not support the audio tag.\n</audio>\n\n![Alt text](/mp4/Av2047363.mp4)\n\n<video width=\"480\" height=\"420\" controls>\n<source src=\"mp4/Av2047363.mp4\">\n</video>\n\n","source":"_posts/if.md","raw":"---\ntitle: if\ndate: 2023-03-30 08:57:13\ntags:\n---\n\n理解一:\nif是条件判断语句，只有if的条件成立（表达式的值为真）后，才会执行if部分的代码，否则将会执行else的代码。\n如果是if...else if，则满足第一个if执行第一个if里的代码，如果不满足第一个if，而满足第二个if，则执行第二个if（即else if）的代码，如果都不满足，就不执行，如果后面有else（不带if的else），则只要前面的if和else if都没执行，就执行最后一个else。\n\n理解二:\nif,else if都需要接判断表达式。else不需要判断表达式。使用else if和else，必须紧跟在if之后，形参if-esle if组或if-else对。 没有对应的if语句，else if和else语句都会在编译时报错。\n\n\n**<font size=4 color=#ff000>真不会<font>**\n<audio controls>\n  <source src=\"mp3/以父之名周杰伦.mp3\" type=\"audio/mpeg\">\n  Your browser does not support the audio tag.\n</audio>\n\n![Alt text](/mp4/Av2047363.mp4)\n\n<video width=\"480\" height=\"420\" controls>\n<source src=\"mp4/Av2047363.mp4\">\n</video>\n\n","slug":"if","published":1,"updated":"2023-04-04T05:37:34.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtg7xr300004n8f70f02ang","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>理解一:<br>if是条件判断语句，只有if的条件成立（表达式的值为真）后，才会执行if部分的代码，否则将会执行else的代码。<br>如果是if…else if，则满足第一个if执行第一个if里的代码，如果不满足第一个if，而满足第二个if，则执行第二个if（即else if）的代码，如果都不满足，就不执行，如果后面有else（不带if的else），则只要前面的if和else if都没执行，就执行最后一个else。</p>\n<p>理解二:<br>if,else if都需要接判断表达式。else不需要判断表达式。使用else if和else，必须紧跟在if之后，形参if-esle if组或if-else对。 没有对应的if语句，else if和else语句都会在编译时报错。</p>\n<p><strong><font size=4 color=#ff000>真不会<font></strong><br><audio controls><br>  <source src=\"mp3/以父之名周杰伦.mp3\" type=\"audio/mpeg\"><br>  Your browser does not support the audio tag.<br></audio></p>\n<p><img src=\"/mp4/Av2047363.mp4\" alt=\"Alt text\"></p>\n<video width=\"480\" height=\"420\" controls>\n<source src=\"mp4/Av2047363.mp4\">\n</video>\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>理解一:<br>if是条件判断语句，只有if的条件成立（表达式的值为真）后，才会执行if部分的代码，否则将会执行else的代码。<br>如果是if…else if，则满足第一个if执行第一个if里的代码，如果不满足第一个if，而满足第二个if，则执行第二个if（即else if）的代码，如果都不满足，就不执行，如果后面有else（不带if的else），则只要前面的if和else if都没执行，就执行最后一个else。</p>\n<p>理解二:<br>if,else if都需要接判断表达式。else不需要判断表达式。使用else if和else，必须紧跟在if之后，形参if-esle if组或if-else对。 没有对应的if语句，else if和else语句都会在编译时报错。</p>\n<p><strong><font size=4 color=#ff000>真不会<font></strong><br><audio controls><br>  <source src=\"mp3/以父之名周杰伦.mp3\" type=\"audio/mpeg\"><br>  Your browser does not support the audio tag.<br></audio></p>\n<p><img src=\"/mp4/Av2047363.mp4\" alt=\"Alt text\"></p>\n<video width=\"480\" height=\"420\" controls>\n<source src=\"mp4/Av2047363.mp4\">\n</video>\n\n"},{"title":"Tips 1","date":"2023-02-28T09:05:21.000Z","_content":"为history设置时间和用户log\n\nvi打开/etc/profile\n输入i进入输入模式\npage dn 在文件最下方添加以下内容：\n```bash\nHISTTIMEFORMAT=\"%Y-%m-%d:%T:`whoami` \"\nexport HISTTIMEFORMAT\n输入esc，:wq\nsource /etc/profile\n```\n然后在终端输入history可以发现执行命令时会有时间以及角色了。（感觉无卵用）\n\n\nTips 2\n\n\n快速切换ROOT用户\n```bash\nvi /etc/sudoers.d/fastchangeusers\n输入i进入编辑模式\n输入：users(你使用的普通用户名) ALL=(ALL) NOPASSWD:ALL\n输入esc\n:wq保存退出\n```\n然后使用普通user切换root就不用密码了,其实也可以通过visudo添加该内容\n效果是一样的，或者直接编辑/etc/sudoers文件也可以\n\nTips 3\n\n解决centos网卡问题\n\n有时候重启虚拟机后，网卡莫名其妙就获取不到地址了，百思不得其解。（可能电脑太垃圾！！）\n网上找到方法解决，如下：\n\n临时解决方案\n```bash\ndhclient 网卡名称 //为网卡获取ip地址\n```\n\n永久解决方法\n```bash\nnmcli networking // 查看托管状态\n如果显示disabled，则：\n\nnmcli networking on //开启托管\n\nsystemctl restart NetworkManager //重启网络管理服务\n\nip a  //可查看能够正常获取ip地址\n```\n\n注意如果不是disabled,强烈建议点击该[button](https:www.baidu.com)获取答案\n\nTips 4\n\n统计ssh登录失败的用户，ip，尝试登录次数\n```bash\nlastb  | tr -s ' ' |cut -d \" \" -f1,3 |uniq -c |head -n 2 > sshfaild.list\n\nlastb //输出ssh失败的用户\ntr -s ' ' //把空格变成1个\ncut -d \" \" // 使用空格进行分割 -f1,3 //显示第一列和第三列\nuniq -c //统计\nhead -n 2 去掉最后两条\n·>· sshfaild.list 将输出结果重定向到该文件。\n```\n（ps：使用密钥的不用看了）\n\nTips 5\n\n使用管道符得到\"ip a\"的ip\n```bash\nip a| grep inet | head -n3 |tail -n1 |tr -s ' ' |cut -d \" \" -f3\n\n#10.0.0.153/24\n不知道怎么去掉/24\n\n建议直接输入：hostname -I\n\n注意，如果有docker，openvpn...等软件，可能会有多块网卡。\n```\nTips 6\n\n查看前10cpu，mem占用\n```bash\nps aux | head -1;ps aux |grep -v PID |sort -rn -k +3 | head //cpu\nps aux | head -1;ps aux |grep -v PID |sort -rn -k +4 | head //mem\n```\n\n","source":"_posts/Tip.md","raw":"---\ntitle: Tips 1\ndate: 2023-02-28 09:05:21\ntags:\n---\n为history设置时间和用户log\n\nvi打开/etc/profile\n输入i进入输入模式\npage dn 在文件最下方添加以下内容：\n```bash\nHISTTIMEFORMAT=\"%Y-%m-%d:%T:`whoami` \"\nexport HISTTIMEFORMAT\n输入esc，:wq\nsource /etc/profile\n```\n然后在终端输入history可以发现执行命令时会有时间以及角色了。（感觉无卵用）\n\n\nTips 2\n\n\n快速切换ROOT用户\n```bash\nvi /etc/sudoers.d/fastchangeusers\n输入i进入编辑模式\n输入：users(你使用的普通用户名) ALL=(ALL) NOPASSWD:ALL\n输入esc\n:wq保存退出\n```\n然后使用普通user切换root就不用密码了,其实也可以通过visudo添加该内容\n效果是一样的，或者直接编辑/etc/sudoers文件也可以\n\nTips 3\n\n解决centos网卡问题\n\n有时候重启虚拟机后，网卡莫名其妙就获取不到地址了，百思不得其解。（可能电脑太垃圾！！）\n网上找到方法解决，如下：\n\n临时解决方案\n```bash\ndhclient 网卡名称 //为网卡获取ip地址\n```\n\n永久解决方法\n```bash\nnmcli networking // 查看托管状态\n如果显示disabled，则：\n\nnmcli networking on //开启托管\n\nsystemctl restart NetworkManager //重启网络管理服务\n\nip a  //可查看能够正常获取ip地址\n```\n\n注意如果不是disabled,强烈建议点击该[button](https:www.baidu.com)获取答案\n\nTips 4\n\n统计ssh登录失败的用户，ip，尝试登录次数\n```bash\nlastb  | tr -s ' ' |cut -d \" \" -f1,3 |uniq -c |head -n 2 > sshfaild.list\n\nlastb //输出ssh失败的用户\ntr -s ' ' //把空格变成1个\ncut -d \" \" // 使用空格进行分割 -f1,3 //显示第一列和第三列\nuniq -c //统计\nhead -n 2 去掉最后两条\n·>· sshfaild.list 将输出结果重定向到该文件。\n```\n（ps：使用密钥的不用看了）\n\nTips 5\n\n使用管道符得到\"ip a\"的ip\n```bash\nip a| grep inet | head -n3 |tail -n1 |tr -s ' ' |cut -d \" \" -f3\n\n#10.0.0.153/24\n不知道怎么去掉/24\n\n建议直接输入：hostname -I\n\n注意，如果有docker，openvpn...等软件，可能会有多块网卡。\n```\nTips 6\n\n查看前10cpu，mem占用\n```bash\nps aux | head -1;ps aux |grep -v PID |sort -rn -k +3 | head //cpu\nps aux | head -1;ps aux |grep -v PID |sort -rn -k +4 | head //mem\n```\n\n","slug":"Tip","published":1,"updated":"2023-03-02T09:28:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtg7xra00014n8f74rnhwg4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>为history设置时间和用户log</p>\n<p>vi打开&#x2F;etc&#x2F;profile<br>输入i进入输入模式<br>page dn 在文件最下方添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HISTTIMEFORMAT=<span class=\"string\">&quot;%Y-%m-%d:%T:`whoami` &quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HISTTIMEFORMAT</span><br><span class=\"line\">输入esc，:wq</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>然后在终端输入history可以发现执行命令时会有时间以及角色了。（感觉无卵用）</p>\n<p>Tips 2</p>\n<p>快速切换ROOT用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers.d/fastchangeusers</span><br><span class=\"line\">输入i进入编辑模式</span><br><span class=\"line\">输入：<span class=\"built_in\">users</span>(你使用的普通用户名) ALL=(ALL) NOPASSWD:ALL</span><br><span class=\"line\">输入esc</span><br><span class=\"line\">:wq保存退出</span><br></pre></td></tr></table></figure>\n<p>然后使用普通user切换root就不用密码了,其实也可以通过visudo添加该内容<br>效果是一样的，或者直接编辑&#x2F;etc&#x2F;sudoers文件也可以</p>\n<p>Tips 3</p>\n<p>解决centos网卡问题</p>\n<p>有时候重启虚拟机后，网卡莫名其妙就获取不到地址了，百思不得其解。（可能电脑太垃圾！！）<br>网上找到方法解决，如下：</p>\n<p>临时解决方案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhclient 网卡名称 //为网卡获取ip地址</span><br></pre></td></tr></table></figure>\n\n<p>永久解决方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli networking // 查看托管状态</span><br><span class=\"line\">如果显示disabled，则：</span><br><span class=\"line\"></span><br><span class=\"line\">nmcli networking on //开启托管</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart NetworkManager //重启网络管理服务</span><br><span class=\"line\"></span><br><span class=\"line\">ip a  //可查看能够正常获取ip地址</span><br></pre></td></tr></table></figure>\n\n<p>注意如果不是disabled,强烈建议点击该<a href=\"https://www.baidu.com/\">button</a>获取答案</p>\n<p>Tips 4</p>\n<p>统计ssh登录失败的用户，ip，尝试登录次数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lastb  | <span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27; &#x27;</span> |<span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f1,3 |<span class=\"built_in\">uniq</span> -c |<span class=\"built_in\">head</span> -n 2 &gt; sshfaild.list</span><br><span class=\"line\"></span><br><span class=\"line\">lastb //输出ssh失败的用户</span><br><span class=\"line\"><span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27; &#x27;</span> //把空格变成1个</span><br><span class=\"line\"><span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> // 使用空格进行分割 -f1,3 //显示第一列和第三列</span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -c //统计</span><br><span class=\"line\"><span class=\"built_in\">head</span> -n 2 去掉最后两条</span><br><span class=\"line\">·&gt;· sshfaild.list 将输出结果重定向到该文件。</span><br></pre></td></tr></table></figure>\n<p>（ps：使用密钥的不用看了）</p>\n<p>Tips 5</p>\n<p>使用管道符得到”ip a”的ip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip a| grep inet | <span class=\"built_in\">head</span> -n3 |<span class=\"built_in\">tail</span> -n1 |<span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27; &#x27;</span> |<span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#10.0.0.153/24</span></span><br><span class=\"line\">不知道怎么去掉/24</span><br><span class=\"line\"></span><br><span class=\"line\">建议直接输入：hostname -I</span><br><span class=\"line\"></span><br><span class=\"line\">注意，如果有docker，openvpn...等软件，可能会有多块网卡。</span><br></pre></td></tr></table></figure>\n<p>Tips 6</p>\n<p>查看前10cpu，mem占用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | <span class=\"built_in\">head</span> -1;ps aux |grep -v PID |<span class=\"built_in\">sort</span> -rn -k +3 | <span class=\"built_in\">head</span> //cpu</span><br><span class=\"line\">ps aux | <span class=\"built_in\">head</span> -1;ps aux |grep -v PID |<span class=\"built_in\">sort</span> -rn -k +4 | <span class=\"built_in\">head</span> //mem</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>为history设置时间和用户log</p>\n<p>vi打开&#x2F;etc&#x2F;profile<br>输入i进入输入模式<br>page dn 在文件最下方添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HISTTIMEFORMAT=<span class=\"string\">&quot;%Y-%m-%d:%T:`whoami` &quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HISTTIMEFORMAT</span><br><span class=\"line\">输入esc，:wq</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<p>然后在终端输入history可以发现执行命令时会有时间以及角色了。（感觉无卵用）</p>\n<p>Tips 2</p>\n<p>快速切换ROOT用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sudoers.d/fastchangeusers</span><br><span class=\"line\">输入i进入编辑模式</span><br><span class=\"line\">输入：<span class=\"built_in\">users</span>(你使用的普通用户名) ALL=(ALL) NOPASSWD:ALL</span><br><span class=\"line\">输入esc</span><br><span class=\"line\">:wq保存退出</span><br></pre></td></tr></table></figure>\n<p>然后使用普通user切换root就不用密码了,其实也可以通过visudo添加该内容<br>效果是一样的，或者直接编辑&#x2F;etc&#x2F;sudoers文件也可以</p>\n<p>Tips 3</p>\n<p>解决centos网卡问题</p>\n<p>有时候重启虚拟机后，网卡莫名其妙就获取不到地址了，百思不得其解。（可能电脑太垃圾！！）<br>网上找到方法解决，如下：</p>\n<p>临时解决方案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dhclient 网卡名称 //为网卡获取ip地址</span><br></pre></td></tr></table></figure>\n\n<p>永久解决方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmcli networking // 查看托管状态</span><br><span class=\"line\">如果显示disabled，则：</span><br><span class=\"line\"></span><br><span class=\"line\">nmcli networking on //开启托管</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart NetworkManager //重启网络管理服务</span><br><span class=\"line\"></span><br><span class=\"line\">ip a  //可查看能够正常获取ip地址</span><br></pre></td></tr></table></figure>\n\n<p>注意如果不是disabled,强烈建议点击该<a href=\"https://www.baidu.com/\">button</a>获取答案</p>\n<p>Tips 4</p>\n<p>统计ssh登录失败的用户，ip，尝试登录次数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lastb  | <span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27; &#x27;</span> |<span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f1,3 |<span class=\"built_in\">uniq</span> -c |<span class=\"built_in\">head</span> -n 2 &gt; sshfaild.list</span><br><span class=\"line\"></span><br><span class=\"line\">lastb //输出ssh失败的用户</span><br><span class=\"line\"><span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27; &#x27;</span> //把空格变成1个</span><br><span class=\"line\"><span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> // 使用空格进行分割 -f1,3 //显示第一列和第三列</span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -c //统计</span><br><span class=\"line\"><span class=\"built_in\">head</span> -n 2 去掉最后两条</span><br><span class=\"line\">·&gt;· sshfaild.list 将输出结果重定向到该文件。</span><br></pre></td></tr></table></figure>\n<p>（ps：使用密钥的不用看了）</p>\n<p>Tips 5</p>\n<p>使用管道符得到”ip a”的ip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip a| grep inet | <span class=\"built_in\">head</span> -n3 |<span class=\"built_in\">tail</span> -n1 |<span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27; &#x27;</span> |<span class=\"built_in\">cut</span> -d <span class=\"string\">&quot; &quot;</span> -f3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#10.0.0.153/24</span></span><br><span class=\"line\">不知道怎么去掉/24</span><br><span class=\"line\"></span><br><span class=\"line\">建议直接输入：hostname -I</span><br><span class=\"line\"></span><br><span class=\"line\">注意，如果有docker，openvpn...等软件，可能会有多块网卡。</span><br></pre></td></tr></table></figure>\n<p>Tips 6</p>\n<p>查看前10cpu，mem占用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | <span class=\"built_in\">head</span> -1;ps aux |grep -v PID |<span class=\"built_in\">sort</span> -rn -k +3 | <span class=\"built_in\">head</span> //cpu</span><br><span class=\"line\">ps aux | <span class=\"built_in\">head</span> -1;ps aux |grep -v PID |<span class=\"built_in\">sort</span> -rn -k +4 | <span class=\"built_in\">head</span> //mem</span><br></pre></td></tr></table></figure>\n\n"},{"title":"nginx 目录优化保姆级教程","date":"2023-03-21T06:31:23.000Z","_content":"记录一次nginx编译\n\t众所周知，做一个最简单的网盘就是使用web服务了，但是不管是nginx和apache或者apache2的默认网页目录都太丑了，所以怎么能自定义修改默认的目录风格呢？\n以nginx为例，官方的autoindex模块只是简单的提供了以下几个选项\n```bash\n\t命令\t\t\t默认值\t可选值\t\t作用域\t\t\t作用\n\n\tautoindex\t\toff\ton/off\t\thttp/server/location\t开启目录浏览功能\n\t\n\tautoindex_format\thtml\thtml/xml\tsame\t\t\thtml是以网页功能展示目录内容\n\t\t\t\t\tjson/jsonp\n\tautoindex_exact_size\ton\ton/off\t\tsame\t\t\t开启为以字节，关闭为KB,MB,GB显示文件\n\t\t\t\t\t\t\t\t\t\tautoindex_format为html时有效\n\tautoindex_localtime\toff\ton/off\t\tsame\t\t\t开启以服务器的文件时间作为显示的时间\n\t\t\t\t\t\t\t\t\t\tautoindex_format为html时有效\n```\n首先安装nginx,\t 注意！这里演示的是安装后编译再增加,也可以编译时添加模块再安装,这里就不在做过多的展示\n```bash\n\tyum or apt update && yum or apt upgrade\n\tyum or apt install nginx -y\n\tsystemctl start nginx或者/sbin/nginx -s start\n```\n根据根据官方给的autoindex模版，一个简单的web网盘配置如下\n```bash\n\thttp\n\t{ \n#注意一条配置接一个分号，其次一般来说一行一个配置\n\t\troot\t/you/path/www/;\t//root为nginx根目录，这里是指定nginx目录所在，一般来说自动配置了，这里是自定义\n\t\tautoindex\t\ton;\t//开启目录浏览功能\n\t\tautoindex_format\thtml;\t//以html风格将目录展示在浏览器中，一般都是html\n\t\tautoindex_exact_size\toff;\t//假如开启将会以字节显示文件大小，最好是关闭\n\t\tautoindex_localtime\ton;\t//以服务器的时间作为显示的时间\n\t\tcharset utf-8,gbk;\t\t//开启中文，假如有中文没有该选项将乱码显示\n\t}\n```\n接着我们vi /etc/nginx/nginx.conf把上面目录配置复制进去\n![nginx 配置](/images/11.jpg)\n然后输入nginx -t或/sbin/nginx -t测试，输出success则继续输入systemctl restart nginx或/sbin/nginx  -s reload\n![nginx 测试](/images/2.png)\n接着输入hostname -I，查看本机地址，注意可能会有多个地址，自己分辨\n![查看本地ip](/images/3.png)\n注意:上面只是获取局域网地址，如果你是部署云请使用以下命令或脚本\n```bash\ncurl -Ls ip.tool.lu\n```\n然后打开浏览器输入你的ip地址,但是忘了一件事，开启端口，我使用的是rocky：\n同时这里要注意，如果是云，图省事就直接在控制台把nginx配置所对应的端口打开，我这里以常见80为例\n```bash\n\tfirewall-cmd  --zone=public --add-port=80/tcp --permanent\n```\n规则生效需要重启\n```bash\n\tfirewall-cmd --reload\n```\nufw和iptables\n```bash\n\tufw allow 80\n\tiptables -I INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j ACCEPT\n\t或者iptables -F\n```\n接着刷新一下，可以看见了\n![nginx 默认目录](/images/4.png)\n可以看到，很鸡儿丑。接下来我们就编译一个主题给他\n\t首先继续输入nginx -V或者/sbin/nginx -V,我们可以看到版本号和编译的模块\n![nginx 版本和已编译模块](/images/5.png)\n\t接着打开nginx.org，选择相应的版本使用wget下载该链接\n![nginx 源码下载](/images/6.png)\n\n解压到当前目录\n```bash\n\ttar -xf  nginx-1.14.2.tar.gz\n```\t\n进入该目录\n```bash\n\tcd nginx-1.14.2\t\n```\n把nginx主题模块拖进来\n```bash\n\tgit clone https://github.com/aperezdc/ngx-fancyindex/releases/download/v0.5.2/ngx-fancyindex-0.5.2.tar.xz\n```\n解压到当前目录\n```bash\n\ttar -xf ngx-fancyindex-0.5.2.tar.xz\n```\t\n然后前面的nginx -V的已编译信息直接复制过去，再跟上添加的模块路径执行脚本即可\n```bash\n\t./configure  你已经安装编译的模块,这里太长，我就不复制了后面跟上要添加的模块就ok  --add-module=./ngx-fancyindex-0.5.2\n```\t\n接着编译，千万不要install，不然就nginx就费了因为你是安装后编译这个要注意\n```bash\n\tmake \n```\n注意:如果make这里很大几率报错，原因是缺少相关的依赖，所以请点击[这里](https:www.baidu.com)查询需要的依赖,再安装对应的编译依赖包\n\t\t\n完事后把编译好的二进制程序nginx替换掉现有的nginx，请先暂停nginx service\n编译成功会在objs目录下生成一个新的nginx二进制可执行程序\n```bash\t\n\t/sbin/nginx -s stop 或者 systemctl stop nginx\n\tcp -a objs/nginx /sbin/nginx\n\t/sbin/nginx -s reload\n```\t\n现在打开网址可以看到一个雏形，还是丑。我们继续，先进入nginx目录里\n```bash\n\tcd /you/path/www\n```\t\n接着下载主题\n```bash\n\tgit clone https://github.com/lanffy/Nginx-Fancyindex-Theme\n```\t\n再让fancyindex配置文件生效,打开nginx配置文件增加一行\n```bash\n\tinclude /you/path/fancyindex.conf;\n```\t\n测试nginx重启生效\n```bash\n\t/sbin/nginx -t && /sbin/nginx -s reload\n```\t\n最终效果，也可以访问[这里](http://pan.alybaba.top)查看我做的效果\n\n![优化后的nginx目录](/images/7.png)\n\n总结:其实还可以编译其他相关的nginx模块，这里就不再过多叙述，有兴趣的可前往github搜索...而且nginx还有很多有意思的配置，比如负载均衡，反向代理，正向代理等等...以后慢慢分享相关的玩法配置，在这里为什么我不使用apache呢？想必大家都知道log4j2零day漏洞了，这里就不再过多说明。但是编译过程最难的还是缺少相关依赖，对于一般人来说还是比较困难。总而言之，言而总之nginx是一个很高效且优质的代理web站点，学好不愁吃穿，当然在使用nginx时也要遵纪守法，不然就真的\"不愁吃穿\"了\n","source":"_posts/编译nginx.md","raw":"---\ntitle: nginx 目录优化保姆级教程\ndate: 2023-03-21 14:31:23\ntags:\n---\n记录一次nginx编译\n\t众所周知，做一个最简单的网盘就是使用web服务了，但是不管是nginx和apache或者apache2的默认网页目录都太丑了，所以怎么能自定义修改默认的目录风格呢？\n以nginx为例，官方的autoindex模块只是简单的提供了以下几个选项\n```bash\n\t命令\t\t\t默认值\t可选值\t\t作用域\t\t\t作用\n\n\tautoindex\t\toff\ton/off\t\thttp/server/location\t开启目录浏览功能\n\t\n\tautoindex_format\thtml\thtml/xml\tsame\t\t\thtml是以网页功能展示目录内容\n\t\t\t\t\tjson/jsonp\n\tautoindex_exact_size\ton\ton/off\t\tsame\t\t\t开启为以字节，关闭为KB,MB,GB显示文件\n\t\t\t\t\t\t\t\t\t\tautoindex_format为html时有效\n\tautoindex_localtime\toff\ton/off\t\tsame\t\t\t开启以服务器的文件时间作为显示的时间\n\t\t\t\t\t\t\t\t\t\tautoindex_format为html时有效\n```\n首先安装nginx,\t 注意！这里演示的是安装后编译再增加,也可以编译时添加模块再安装,这里就不在做过多的展示\n```bash\n\tyum or apt update && yum or apt upgrade\n\tyum or apt install nginx -y\n\tsystemctl start nginx或者/sbin/nginx -s start\n```\n根据根据官方给的autoindex模版，一个简单的web网盘配置如下\n```bash\n\thttp\n\t{ \n#注意一条配置接一个分号，其次一般来说一行一个配置\n\t\troot\t/you/path/www/;\t//root为nginx根目录，这里是指定nginx目录所在，一般来说自动配置了，这里是自定义\n\t\tautoindex\t\ton;\t//开启目录浏览功能\n\t\tautoindex_format\thtml;\t//以html风格将目录展示在浏览器中，一般都是html\n\t\tautoindex_exact_size\toff;\t//假如开启将会以字节显示文件大小，最好是关闭\n\t\tautoindex_localtime\ton;\t//以服务器的时间作为显示的时间\n\t\tcharset utf-8,gbk;\t\t//开启中文，假如有中文没有该选项将乱码显示\n\t}\n```\n接着我们vi /etc/nginx/nginx.conf把上面目录配置复制进去\n![nginx 配置](/images/11.jpg)\n然后输入nginx -t或/sbin/nginx -t测试，输出success则继续输入systemctl restart nginx或/sbin/nginx  -s reload\n![nginx 测试](/images/2.png)\n接着输入hostname -I，查看本机地址，注意可能会有多个地址，自己分辨\n![查看本地ip](/images/3.png)\n注意:上面只是获取局域网地址，如果你是部署云请使用以下命令或脚本\n```bash\ncurl -Ls ip.tool.lu\n```\n然后打开浏览器输入你的ip地址,但是忘了一件事，开启端口，我使用的是rocky：\n同时这里要注意，如果是云，图省事就直接在控制台把nginx配置所对应的端口打开，我这里以常见80为例\n```bash\n\tfirewall-cmd  --zone=public --add-port=80/tcp --permanent\n```\n规则生效需要重启\n```bash\n\tfirewall-cmd --reload\n```\nufw和iptables\n```bash\n\tufw allow 80\n\tiptables -I INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j ACCEPT\n\t或者iptables -F\n```\n接着刷新一下，可以看见了\n![nginx 默认目录](/images/4.png)\n可以看到，很鸡儿丑。接下来我们就编译一个主题给他\n\t首先继续输入nginx -V或者/sbin/nginx -V,我们可以看到版本号和编译的模块\n![nginx 版本和已编译模块](/images/5.png)\n\t接着打开nginx.org，选择相应的版本使用wget下载该链接\n![nginx 源码下载](/images/6.png)\n\n解压到当前目录\n```bash\n\ttar -xf  nginx-1.14.2.tar.gz\n```\t\n进入该目录\n```bash\n\tcd nginx-1.14.2\t\n```\n把nginx主题模块拖进来\n```bash\n\tgit clone https://github.com/aperezdc/ngx-fancyindex/releases/download/v0.5.2/ngx-fancyindex-0.5.2.tar.xz\n```\n解压到当前目录\n```bash\n\ttar -xf ngx-fancyindex-0.5.2.tar.xz\n```\t\n然后前面的nginx -V的已编译信息直接复制过去，再跟上添加的模块路径执行脚本即可\n```bash\n\t./configure  你已经安装编译的模块,这里太长，我就不复制了后面跟上要添加的模块就ok  --add-module=./ngx-fancyindex-0.5.2\n```\t\n接着编译，千万不要install，不然就nginx就费了因为你是安装后编译这个要注意\n```bash\n\tmake \n```\n注意:如果make这里很大几率报错，原因是缺少相关的依赖，所以请点击[这里](https:www.baidu.com)查询需要的依赖,再安装对应的编译依赖包\n\t\t\n完事后把编译好的二进制程序nginx替换掉现有的nginx，请先暂停nginx service\n编译成功会在objs目录下生成一个新的nginx二进制可执行程序\n```bash\t\n\t/sbin/nginx -s stop 或者 systemctl stop nginx\n\tcp -a objs/nginx /sbin/nginx\n\t/sbin/nginx -s reload\n```\t\n现在打开网址可以看到一个雏形，还是丑。我们继续，先进入nginx目录里\n```bash\n\tcd /you/path/www\n```\t\n接着下载主题\n```bash\n\tgit clone https://github.com/lanffy/Nginx-Fancyindex-Theme\n```\t\n再让fancyindex配置文件生效,打开nginx配置文件增加一行\n```bash\n\tinclude /you/path/fancyindex.conf;\n```\t\n测试nginx重启生效\n```bash\n\t/sbin/nginx -t && /sbin/nginx -s reload\n```\t\n最终效果，也可以访问[这里](http://pan.alybaba.top)查看我做的效果\n\n![优化后的nginx目录](/images/7.png)\n\n总结:其实还可以编译其他相关的nginx模块，这里就不再过多叙述，有兴趣的可前往github搜索...而且nginx还有很多有意思的配置，比如负载均衡，反向代理，正向代理等等...以后慢慢分享相关的玩法配置，在这里为什么我不使用apache呢？想必大家都知道log4j2零day漏洞了，这里就不再过多说明。但是编译过程最难的还是缺少相关依赖，对于一般人来说还是比较困难。总而言之，言而总之nginx是一个很高效且优质的代理web站点，学好不愁吃穿，当然在使用nginx时也要遵纪守法，不然就真的\"不愁吃穿\"了\n","slug":"编译nginx","published":1,"updated":"2023-05-21T12:32:41.641Z","_id":"clgtg7xt200024n8fgfceb34a","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>记录一次nginx编译<br>    众所周知，做一个最简单的网盘就是使用web服务了，但是不管是nginx和apache或者apache2的默认网页目录都太丑了，所以怎么能自定义修改默认的目录风格呢？<br>以nginx为例，官方的autoindex模块只是简单的提供了以下几个选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令\t\t\t默认值\t可选值\t\t作用域\t\t\t作用</span><br><span class=\"line\"></span><br><span class=\"line\">autoindex\t\toff\ton/off\t\thttp/server/location\t开启目录浏览功能</span><br><span class=\"line\"></span><br><span class=\"line\">autoindex_format\thtml\thtml/xml\tsame\t\t\thtml是以网页功能展示目录内容</span><br><span class=\"line\">\t\t\t\tjson/jsonp</span><br><span class=\"line\">autoindex_exact_size\ton\ton/off\t\tsame\t\t\t开启为以字节，关闭为KB,MB,GB显示文件</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tautoindex_format为html时有效</span><br><span class=\"line\">autoindex_localtime\toff\ton/off\t\tsame\t\t\t开启以服务器的文件时间作为显示的时间</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tautoindex_format为html时有效</span><br></pre></td></tr></table></figure>\n<p>首先安装nginx,\t 注意！这里演示的是安装后编译再增加,也可以编译时添加模块再安装,这里就不在做过多的展示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum or apt update &amp;&amp; yum or apt upgrade</span><br><span class=\"line\">yum or apt install nginx -y</span><br><span class=\"line\">systemctl start nginx或者/sbin/nginx -s start</span><br></pre></td></tr></table></figure>\n<p>根据根据官方给的autoindex模版，一个简单的web网盘配置如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\thttp</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\"><span class=\"comment\">#注意一条配置接一个分号，其次一般来说一行一个配置</span></span><br><span class=\"line\">\t\troot\t/you/path/www/;\t//root为nginx根目录，这里是指定nginx目录所在，一般来说自动配置了，这里是自定义</span><br><span class=\"line\">\t\tautoindex\t\ton;\t//开启目录浏览功能</span><br><span class=\"line\">\t\tautoindex_format\thtml;\t//以html风格将目录展示在浏览器中，一般都是html</span><br><span class=\"line\">\t\tautoindex_exact_size\toff;\t//假如开启将会以字节显示文件大小，最好是关闭</span><br><span class=\"line\">\t\tautoindex_localtime\ton;\t//以服务器的时间作为显示的时间</span><br><span class=\"line\">\t\tcharset utf-8,gbk;\t\t//开启中文，假如有中文没有该选项将乱码显示</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf把上面目录配置复制进去<br><img src=\"/images/11.jpg\" alt=\"nginx 配置\"><br>然后输入nginx -t或&#x2F;sbin&#x2F;nginx -t测试，输出success则继续输入systemctl restart nginx或&#x2F;sbin&#x2F;nginx  -s reload<br><img src=\"/images/2.png\" alt=\"nginx 测试\"><br>接着输入hostname -I，查看本机地址，注意可能会有多个地址，自己分辨<br><img src=\"/images/3.png\" alt=\"查看本地ip\"><br>注意:上面只是获取局域网地址，如果你是部署云请使用以下命令或脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Ls ip.tool.lu</span><br></pre></td></tr></table></figure>\n<p>然后打开浏览器输入你的ip地址,但是忘了一件事，开启端口，我使用的是rocky：<br>同时这里要注意，如果是云，图省事就直接在控制台把nginx配置所对应的端口打开，我这里以常见80为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd  --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>规则生效需要重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>ufw和iptables</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ufw allow 80</span><br><span class=\"line\">iptables -I INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">或者iptables -F</span><br></pre></td></tr></table></figure>\n<p>接着刷新一下，可以看见了<br><img src=\"/images/4.png\" alt=\"nginx 默认目录\"><br>可以看到，很鸡儿丑。接下来我们就编译一个主题给他<br>    首先继续输入nginx -V或者&#x2F;sbin&#x2F;nginx -V,我们可以看到版本号和编译的模块<br><img src=\"/images/5.png\" alt=\"nginx 版本和已编译模块\"><br>    接着打开nginx.org，选择相应的版本使用wget下载该链接<br><img src=\"/images/6.png\" alt=\"nginx 源码下载\"></p>\n<p>解压到当前目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf  nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure>\n<p>进入该目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.14.2\t</span><br></pre></td></tr></table></figure>\n<p>把nginx主题模块拖进来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/aperezdc/ngx-fancyindex/releases/download/v0.5.2/ngx-fancyindex-0.5.2.tar.xz</span><br></pre></td></tr></table></figure>\n<p>解压到当前目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf ngx-fancyindex-0.5.2.tar.xz</span><br></pre></td></tr></table></figure>\n<p>然后前面的nginx -V的已编译信息直接复制过去，再跟上添加的模块路径执行脚本即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  你已经安装编译的模块,这里太长，我就不复制了后面跟上要添加的模块就ok  --add-module=./ngx-fancyindex-0.5.2</span><br></pre></td></tr></table></figure>\n<p>接着编译，千万不要install，不然就nginx就费了因为你是安装后编译这个要注意</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make </span><br></pre></td></tr></table></figure>\n<p>注意:如果make这里很大几率报错，原因是缺少相关的依赖，所以请点击<a href=\"https://www.baidu.com/\">这里</a>查询需要的依赖,再安装对应的编译依赖包</p>\n<p>完事后把编译好的二进制程序nginx替换掉现有的nginx，请先暂停nginx service<br>编译成功会在objs目录下生成一个新的nginx二进制可执行程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin/nginx -s stop 或者 systemctl stop nginx</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a objs/nginx /sbin/nginx</span><br><span class=\"line\">/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>现在打开网址可以看到一个雏形，还是丑。我们继续，先进入nginx目录里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /you/path/www</span><br></pre></td></tr></table></figure>\n<p>接着下载主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/lanffy/Nginx-Fancyindex-Theme</span><br></pre></td></tr></table></figure>\n<p>再让fancyindex配置文件生效,打开nginx配置文件增加一行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include /you/path/fancyindex.conf;</span><br></pre></td></tr></table></figure>\n<p>测试nginx重启生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin/nginx -t &amp;&amp; /sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>最终效果，也可以访问<a href=\"http://pan.alybaba.top/\">这里</a>查看我做的效果</p>\n<p><img src=\"/images/7.png\" alt=\"优化后的nginx目录\"></p>\n<p>总结:其实还可以编译其他相关的nginx模块，这里就不再过多叙述，有兴趣的可前往github搜索…而且nginx还有很多有意思的配置，比如负载均衡，反向代理，正向代理等等…以后慢慢分享相关的玩法配置，在这里为什么我不使用apache呢？想必大家都知道log4j2零day漏洞了，这里就不再过多说明。但是编译过程最难的还是缺少相关依赖，对于一般人来说还是比较困难。总而言之，言而总之nginx是一个很高效且优质的代理web站点，学好不愁吃穿，当然在使用nginx时也要遵纪守法，不然就真的”不愁吃穿”了</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>记录一次nginx编译<br>    众所周知，做一个最简单的网盘就是使用web服务了，但是不管是nginx和apache或者apache2的默认网页目录都太丑了，所以怎么能自定义修改默认的目录风格呢？<br>以nginx为例，官方的autoindex模块只是简单的提供了以下几个选项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令\t\t\t默认值\t可选值\t\t作用域\t\t\t作用</span><br><span class=\"line\"></span><br><span class=\"line\">autoindex\t\toff\ton/off\t\thttp/server/location\t开启目录浏览功能</span><br><span class=\"line\"></span><br><span class=\"line\">autoindex_format\thtml\thtml/xml\tsame\t\t\thtml是以网页功能展示目录内容</span><br><span class=\"line\">\t\t\t\tjson/jsonp</span><br><span class=\"line\">autoindex_exact_size\ton\ton/off\t\tsame\t\t\t开启为以字节，关闭为KB,MB,GB显示文件</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tautoindex_format为html时有效</span><br><span class=\"line\">autoindex_localtime\toff\ton/off\t\tsame\t\t\t开启以服务器的文件时间作为显示的时间</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tautoindex_format为html时有效</span><br></pre></td></tr></table></figure>\n<p>首先安装nginx,\t 注意！这里演示的是安装后编译再增加,也可以编译时添加模块再安装,这里就不在做过多的展示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum or apt update &amp;&amp; yum or apt upgrade</span><br><span class=\"line\">yum or apt install nginx -y</span><br><span class=\"line\">systemctl start nginx或者/sbin/nginx -s start</span><br></pre></td></tr></table></figure>\n<p>根据根据官方给的autoindex模版，一个简单的web网盘配置如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\thttp</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\"><span class=\"comment\">#注意一条配置接一个分号，其次一般来说一行一个配置</span></span><br><span class=\"line\">\t\troot\t/you/path/www/;\t//root为nginx根目录，这里是指定nginx目录所在，一般来说自动配置了，这里是自定义</span><br><span class=\"line\">\t\tautoindex\t\ton;\t//开启目录浏览功能</span><br><span class=\"line\">\t\tautoindex_format\thtml;\t//以html风格将目录展示在浏览器中，一般都是html</span><br><span class=\"line\">\t\tautoindex_exact_size\toff;\t//假如开启将会以字节显示文件大小，最好是关闭</span><br><span class=\"line\">\t\tautoindex_localtime\ton;\t//以服务器的时间作为显示的时间</span><br><span class=\"line\">\t\tcharset utf-8,gbk;\t\t//开启中文，假如有中文没有该选项将乱码显示</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf把上面目录配置复制进去<br><img src=\"/images/11.jpg\" alt=\"nginx 配置\"><br>然后输入nginx -t或&#x2F;sbin&#x2F;nginx -t测试，输出success则继续输入systemctl restart nginx或&#x2F;sbin&#x2F;nginx  -s reload<br><img src=\"/images/2.png\" alt=\"nginx 测试\"><br>接着输入hostname -I，查看本机地址，注意可能会有多个地址，自己分辨<br><img src=\"/images/3.png\" alt=\"查看本地ip\"><br>注意:上面只是获取局域网地址，如果你是部署云请使用以下命令或脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Ls ip.tool.lu</span><br></pre></td></tr></table></figure>\n<p>然后打开浏览器输入你的ip地址,但是忘了一件事，开启端口，我使用的是rocky：<br>同时这里要注意，如果是云，图省事就直接在控制台把nginx配置所对应的端口打开，我这里以常见80为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd  --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>规则生效需要重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>ufw和iptables</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ufw allow 80</span><br><span class=\"line\">iptables -I INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">或者iptables -F</span><br></pre></td></tr></table></figure>\n<p>接着刷新一下，可以看见了<br><img src=\"/images/4.png\" alt=\"nginx 默认目录\"><br>可以看到，很鸡儿丑。接下来我们就编译一个主题给他<br>    首先继续输入nginx -V或者&#x2F;sbin&#x2F;nginx -V,我们可以看到版本号和编译的模块<br><img src=\"/images/5.png\" alt=\"nginx 版本和已编译模块\"><br>    接着打开nginx.org，选择相应的版本使用wget下载该链接<br><img src=\"/images/6.png\" alt=\"nginx 源码下载\"></p>\n<p>解压到当前目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf  nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure>\n<p>进入该目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.14.2\t</span><br></pre></td></tr></table></figure>\n<p>把nginx主题模块拖进来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/aperezdc/ngx-fancyindex/releases/download/v0.5.2/ngx-fancyindex-0.5.2.tar.xz</span><br></pre></td></tr></table></figure>\n<p>解压到当前目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf ngx-fancyindex-0.5.2.tar.xz</span><br></pre></td></tr></table></figure>\n<p>然后前面的nginx -V的已编译信息直接复制过去，再跟上添加的模块路径执行脚本即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  你已经安装编译的模块,这里太长，我就不复制了后面跟上要添加的模块就ok  --add-module=./ngx-fancyindex-0.5.2</span><br></pre></td></tr></table></figure>\n<p>接着编译，千万不要install，不然就nginx就费了因为你是安装后编译这个要注意</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make </span><br></pre></td></tr></table></figure>\n<p>注意:如果make这里很大几率报错，原因是缺少相关的依赖，所以请点击<a href=\"https://www.baidu.com/\">这里</a>查询需要的依赖,再安装对应的编译依赖包</p>\n<p>完事后把编译好的二进制程序nginx替换掉现有的nginx，请先暂停nginx service<br>编译成功会在objs目录下生成一个新的nginx二进制可执行程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin/nginx -s stop 或者 systemctl stop nginx</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a objs/nginx /sbin/nginx</span><br><span class=\"line\">/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>现在打开网址可以看到一个雏形，还是丑。我们继续，先进入nginx目录里</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /you/path/www</span><br></pre></td></tr></table></figure>\n<p>接着下载主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/lanffy/Nginx-Fancyindex-Theme</span><br></pre></td></tr></table></figure>\n<p>再让fancyindex配置文件生效,打开nginx配置文件增加一行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include /you/path/fancyindex.conf;</span><br></pre></td></tr></table></figure>\n<p>测试nginx重启生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sbin/nginx -t &amp;&amp; /sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>最终效果，也可以访问<a href=\"http://pan.alybaba.top/\">这里</a>查看我做的效果</p>\n<p><img src=\"/images/7.png\" alt=\"优化后的nginx目录\"></p>\n<p>总结:其实还可以编译其他相关的nginx模块，这里就不再过多叙述，有兴趣的可前往github搜索…而且nginx还有很多有意思的配置，比如负载均衡，反向代理，正向代理等等…以后慢慢分享相关的玩法配置，在这里为什么我不使用apache呢？想必大家都知道log4j2零day漏洞了，这里就不再过多说明。但是编译过程最难的还是缺少相关依赖，对于一般人来说还是比较困难。总而言之，言而总之nginx是一个很高效且优质的代理web站点，学好不愁吃穿，当然在使用nginx时也要遵纪守法，不然就真的”不愁吃穿”了</p>\n"},{"title":"创建物理卷，卷组，逻辑卷，挂载，扩容","date":"2023-03-21T19:30:10.000Z","_content":"在生产实例中，突然会碰到磁盘告警爆满，而此时生产环境不能停止，所以我们用什么方法在不关机的情况下扩容磁盘呢，LVM应运而生。\nLVM是什么？\nLVM(Logical Volume Manager)逻辑卷管理是在Linux2.4内核以上实现的磁盘管理技术。它是Linux环境下对磁盘分区进行管理的一种机制。\n现在不仅仅是Linux系统上可以使用LVM这种磁盘管理机制，对于其它的类UNIX操作系统，以及windows操作系统都有类似与LVM这种磁盘管理软件。\n更通俗的说就是动态弹性管理磁盘，下面我们就来操作操作\n\n1-我们在虚拟机上添加一块新的硬盘，大小随意，重启或者输入partprobe刷新，输入lsblk查看，一般来说是sdb\n\n2-使用磁盘管理工具进行操作，fdisk一般来说是mbr，gdisk一般来说是gpt，这里我们就用fdisk来操作\n```bash\n\tfdisk /dev/sdb\n\t输入m可以查看帮助，p命令打印分区信息，n命令创建新分区，t命令修改现在有分区的格式，w命令保存退出，q命令退出不保存\n\t首先我们输入n，可以看到有两个选项，第一个是主分区，第二个是扩展分区（如果选择扩展分区，则后续的第二个选项为逻辑分区\n逻辑分区属于扩展分区，也就是说后续逻辑分区不限数量，但受限于你扩展分区的容量，有点绕）\n\t第一个选项分区号，逻辑分区无所谓，主分区必须是1-4以内4后面都属于逻辑分区，这里直接敲回车默认就行\n\t第二个选项起始扇区，如没有特殊要求还是敲回车默认就好\n\t第三个选项我们敲+10G，也可以是+10000M，自己怎么理解怎么来，意思是分配10G空间（1G=1024M，不够严谨）\n\t接着提示创建成功，这里解释一下，相当于套娃又在sdb下面套了一个10G的sdb#，还是没用，需要在下面继续划分逻辑分区才能使用\n\t所以我我们重复一遍，选择第二个选项，再划分一个逻辑分区，我们给他+2G，同时注意大小不能超过10G，上面已经说了\n\tp打印出来，可以看到我们刚刚做的操作，使用w命令保存退出\n\tlsblk查看，可以看到扩展分区显示1kb，这就是我上面说的，实际上他是有10G可用存储的，然后sdb5的可用2G就是使用的扩展分区所划分的10GB存储\n\t接着我们重复一边操作，fdisk /dev/sdb，这次我们划分主分区，容量+8G，w保存退出\n\t到这里，我们已经做好的前期准备，虽然没有贴图（懒），但是绝对够保姆级\n\t忘记一个，使用t命令把主分区和逻辑分区变更一下格式”8e“，8e为LVM卷，一个简单的分区就完成了\n```\n3-选择之前的主分区和逻辑分区，这里就不解释pv了，可以看我关于disk的文章\npvcreate   /dev/sdb1 /dev/sdb5   \n\n4-100M可以理解为dd命令中的bs（反正我是这样理解的），这里是指创建了一个名为”zhougege“的卷组\nvgcreate -s 100M zhougege /dev/sdb1 /dev/sdb5 \n\n5-在卷组中创建一个卷 大小2G，这里的20可以理解为dd命令中的count，所以总大小=bs*count\nlvcreate -l 20 -n zhoulv zhougege\n\t当然我们也可以直接指定大小，在卷组中再创建一个5G的卷\nlvcreate -L +5G -n zhoulv2 zhougege\n\t这里我们再输入pvs可以查看剩余存储，接下来我们个“zhoulv”扩容一下，还有3G空间可以使用\nlvextend -L +1g /dev/zhougege/zhoulv\n\t或者缩减\nlvreduce -L -1G /dev/zhougege/zhoulv\n\n6-这里我们还没有挂载，挂载需要文件系统，值得注意的是要进行删除逻辑卷操作的时候，记得unmount /dev/you/device\nmkfs -t /dev/zhougege/zholv 或者mkfs.ext4 /dev/zhougegezhoulv   //选择你想要的格式\n\n7-挂载，可以创建目录进行挂载，这里就不创建了\nmount /dev/zhougege/zhoulv /mnt\n\n8-查看，可以看到文件系统和挂载点了\nlsblk -f\n\n9-这里要注意的是，想要永久挂载，必须写入fstab，同时如果是逻辑分区不要使用路径挂载，最好指定卷名或者是uuid，懂得的都懂，不懂请点击[这里](https:www.baidu.com)查看\necho \"UUID=you device uuid  /monuntpoint filesystem defaults 0 0\" >> /etc/fstab\necho \"UUID=xxxx  /mnt ext4 defaults 0 0\" >> /etc/fstab\n\n10-快照，相信大家很多人都去过网吧，这里的快照类似于网吧的无盘系统，这样就很好理解了，50m大小只是测试，实际看你想要存储文件大小\nlvcreate -n zhoulv_snap -s -L 50m -p r /dev/zhougege/zhoulv  //s=snap快照，p为权限有rw和r选项，作为快照来说当然是只读了,感觉不选也行，mount的时候加个-o r也不是不行\t\n\t还原快照，试试往mnt里面写入或删除文件\nrm  -fr /mnt/* \n\t挂载快照卷，这里忘了挂载快照了，不过在创建快照的那一刻，已经保留了你被快照逻辑卷的状态，所以dont worry。挂载一下就好了\nmkdir /zhoulv_snap && mount /dev/zhougege/zhoulv_snap  /zhoulv_snap\nlsblk和lvs都可以看到snap的状态\n\t还原快照，该命令需要卸载两个卷，所以复制来的简单一点，还是写一下把，推荐cp -r，快照之后就没了，很鸡儿垃圾\ncp  -rv /zhoulv_snap /mnt\numount /dev/zhougege/zhoulv_snap ; umount /dev/zhougege/zhoulv\nlvconvert --merge /dev/zhougege/zhoulv_snap /dev/zhougege/zhoulv\nmount /dev/zhougege/zhoulv /mnt/\nls /mnt\n\n11-然后疯狂删除，记得先卸载\numount /mnt\nlvremove /dev/zhougege/zhoulv\nlvremove /dev/zhougege/zhoulv2\nvgremove zhougege\npvremove\n","source":"_posts/PV，VG，LV.md","raw":"---\ntitle: 创建物理卷，卷组，逻辑卷，挂载，扩容\ndate: 2023-03-21 19:30:10\ntags:\n---\n在生产实例中，突然会碰到磁盘告警爆满，而此时生产环境不能停止，所以我们用什么方法在不关机的情况下扩容磁盘呢，LVM应运而生。\nLVM是什么？\nLVM(Logical Volume Manager)逻辑卷管理是在Linux2.4内核以上实现的磁盘管理技术。它是Linux环境下对磁盘分区进行管理的一种机制。\n现在不仅仅是Linux系统上可以使用LVM这种磁盘管理机制，对于其它的类UNIX操作系统，以及windows操作系统都有类似与LVM这种磁盘管理软件。\n更通俗的说就是动态弹性管理磁盘，下面我们就来操作操作\n\n1-我们在虚拟机上添加一块新的硬盘，大小随意，重启或者输入partprobe刷新，输入lsblk查看，一般来说是sdb\n\n2-使用磁盘管理工具进行操作，fdisk一般来说是mbr，gdisk一般来说是gpt，这里我们就用fdisk来操作\n```bash\n\tfdisk /dev/sdb\n\t输入m可以查看帮助，p命令打印分区信息，n命令创建新分区，t命令修改现在有分区的格式，w命令保存退出，q命令退出不保存\n\t首先我们输入n，可以看到有两个选项，第一个是主分区，第二个是扩展分区（如果选择扩展分区，则后续的第二个选项为逻辑分区\n逻辑分区属于扩展分区，也就是说后续逻辑分区不限数量，但受限于你扩展分区的容量，有点绕）\n\t第一个选项分区号，逻辑分区无所谓，主分区必须是1-4以内4后面都属于逻辑分区，这里直接敲回车默认就行\n\t第二个选项起始扇区，如没有特殊要求还是敲回车默认就好\n\t第三个选项我们敲+10G，也可以是+10000M，自己怎么理解怎么来，意思是分配10G空间（1G=1024M，不够严谨）\n\t接着提示创建成功，这里解释一下，相当于套娃又在sdb下面套了一个10G的sdb#，还是没用，需要在下面继续划分逻辑分区才能使用\n\t所以我我们重复一遍，选择第二个选项，再划分一个逻辑分区，我们给他+2G，同时注意大小不能超过10G，上面已经说了\n\tp打印出来，可以看到我们刚刚做的操作，使用w命令保存退出\n\tlsblk查看，可以看到扩展分区显示1kb，这就是我上面说的，实际上他是有10G可用存储的，然后sdb5的可用2G就是使用的扩展分区所划分的10GB存储\n\t接着我们重复一边操作，fdisk /dev/sdb，这次我们划分主分区，容量+8G，w保存退出\n\t到这里，我们已经做好的前期准备，虽然没有贴图（懒），但是绝对够保姆级\n\t忘记一个，使用t命令把主分区和逻辑分区变更一下格式”8e“，8e为LVM卷，一个简单的分区就完成了\n```\n3-选择之前的主分区和逻辑分区，这里就不解释pv了，可以看我关于disk的文章\npvcreate   /dev/sdb1 /dev/sdb5   \n\n4-100M可以理解为dd命令中的bs（反正我是这样理解的），这里是指创建了一个名为”zhougege“的卷组\nvgcreate -s 100M zhougege /dev/sdb1 /dev/sdb5 \n\n5-在卷组中创建一个卷 大小2G，这里的20可以理解为dd命令中的count，所以总大小=bs*count\nlvcreate -l 20 -n zhoulv zhougege\n\t当然我们也可以直接指定大小，在卷组中再创建一个5G的卷\nlvcreate -L +5G -n zhoulv2 zhougege\n\t这里我们再输入pvs可以查看剩余存储，接下来我们个“zhoulv”扩容一下，还有3G空间可以使用\nlvextend -L +1g /dev/zhougege/zhoulv\n\t或者缩减\nlvreduce -L -1G /dev/zhougege/zhoulv\n\n6-这里我们还没有挂载，挂载需要文件系统，值得注意的是要进行删除逻辑卷操作的时候，记得unmount /dev/you/device\nmkfs -t /dev/zhougege/zholv 或者mkfs.ext4 /dev/zhougegezhoulv   //选择你想要的格式\n\n7-挂载，可以创建目录进行挂载，这里就不创建了\nmount /dev/zhougege/zhoulv /mnt\n\n8-查看，可以看到文件系统和挂载点了\nlsblk -f\n\n9-这里要注意的是，想要永久挂载，必须写入fstab，同时如果是逻辑分区不要使用路径挂载，最好指定卷名或者是uuid，懂得的都懂，不懂请点击[这里](https:www.baidu.com)查看\necho \"UUID=you device uuid  /monuntpoint filesystem defaults 0 0\" >> /etc/fstab\necho \"UUID=xxxx  /mnt ext4 defaults 0 0\" >> /etc/fstab\n\n10-快照，相信大家很多人都去过网吧，这里的快照类似于网吧的无盘系统，这样就很好理解了，50m大小只是测试，实际看你想要存储文件大小\nlvcreate -n zhoulv_snap -s -L 50m -p r /dev/zhougege/zhoulv  //s=snap快照，p为权限有rw和r选项，作为快照来说当然是只读了,感觉不选也行，mount的时候加个-o r也不是不行\t\n\t还原快照，试试往mnt里面写入或删除文件\nrm  -fr /mnt/* \n\t挂载快照卷，这里忘了挂载快照了，不过在创建快照的那一刻，已经保留了你被快照逻辑卷的状态，所以dont worry。挂载一下就好了\nmkdir /zhoulv_snap && mount /dev/zhougege/zhoulv_snap  /zhoulv_snap\nlsblk和lvs都可以看到snap的状态\n\t还原快照，该命令需要卸载两个卷，所以复制来的简单一点，还是写一下把，推荐cp -r，快照之后就没了，很鸡儿垃圾\ncp  -rv /zhoulv_snap /mnt\numount /dev/zhougege/zhoulv_snap ; umount /dev/zhougege/zhoulv\nlvconvert --merge /dev/zhougege/zhoulv_snap /dev/zhougege/zhoulv\nmount /dev/zhougege/zhoulv /mnt/\nls /mnt\n\n11-然后疯狂删除，记得先卸载\numount /mnt\nlvremove /dev/zhougege/zhoulv\nlvremove /dev/zhougege/zhoulv2\nvgremove zhougege\npvremove\n","slug":"PV，VG，LV","published":1,"updated":"2023-03-25T12:31:14.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtg7xt400034n8fead0cdcp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在生产实例中，突然会碰到磁盘告警爆满，而此时生产环境不能停止，所以我们用什么方法在不关机的情况下扩容磁盘呢，LVM应运而生。<br>LVM是什么？<br>LVM(Logical Volume Manager)逻辑卷管理是在Linux2.4内核以上实现的磁盘管理技术。它是Linux环境下对磁盘分区进行管理的一种机制。<br>现在不仅仅是Linux系统上可以使用LVM这种磁盘管理机制，对于其它的类UNIX操作系统，以及windows操作系统都有类似与LVM这种磁盘管理软件。<br>更通俗的说就是动态弹性管理磁盘，下面我们就来操作操作</p>\n<p>1-我们在虚拟机上添加一块新的硬盘，大小随意，重启或者输入partprobe刷新，输入lsblk查看，一般来说是sdb</p>\n<p>2-使用磁盘管理工具进行操作，fdisk一般来说是mbr，gdisk一般来说是gpt，这里我们就用fdisk来操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tfdisk /dev/sdb</span><br><span class=\"line\">\t输入m可以查看帮助，p命令打印分区信息，n命令创建新分区，t命令修改现在有分区的格式，w命令保存退出，q命令退出不保存</span><br><span class=\"line\">\t首先我们输入n，可以看到有两个选项，第一个是主分区，第二个是扩展分区（如果选择扩展分区，则后续的第二个选项为逻辑分区</span><br><span class=\"line\">逻辑分区属于扩展分区，也就是说后续逻辑分区不限数量，但受限于你扩展分区的容量，有点绕）</span><br><span class=\"line\">\t第一个选项分区号，逻辑分区无所谓，主分区必须是1-4以内4后面都属于逻辑分区，这里直接敲回车默认就行</span><br><span class=\"line\">\t第二个选项起始扇区，如没有特殊要求还是敲回车默认就好</span><br><span class=\"line\">\t第三个选项我们敲+10G，也可以是+10000M，自己怎么理解怎么来，意思是分配10G空间（1G=1024M，不够严谨）</span><br><span class=\"line\">\t接着提示创建成功，这里解释一下，相当于套娃又在sdb下面套了一个10G的sdb<span class=\"comment\">#，还是没用，需要在下面继续划分逻辑分区才能使用</span></span><br><span class=\"line\">\t所以我我们重复一遍，选择第二个选项，再划分一个逻辑分区，我们给他+2G，同时注意大小不能超过10G，上面已经说了</span><br><span class=\"line\">\tp打印出来，可以看到我们刚刚做的操作，使用w命令保存退出</span><br><span class=\"line\">\tlsblk查看，可以看到扩展分区显示1kb，这就是我上面说的，实际上他是有10G可用存储的，然后sdb5的可用2G就是使用的扩展分区所划分的10GB存储</span><br><span class=\"line\">\t接着我们重复一边操作，fdisk /dev/sdb，这次我们划分主分区，容量+8G，w保存退出</span><br><span class=\"line\">\t到这里，我们已经做好的前期准备，虽然没有贴图（懒），但是绝对够保姆级</span><br><span class=\"line\">\t忘记一个，使用t命令把主分区和逻辑分区变更一下格式”8e“，8e为LVM卷，一个简单的分区就完成了</span><br></pre></td></tr></table></figure>\n<p>3-选择之前的主分区和逻辑分区，这里就不解释pv了，可以看我关于disk的文章<br>pvcreate   &#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb5   </p>\n<p>4-100M可以理解为dd命令中的bs（反正我是这样理解的），这里是指创建了一个名为”zhougege“的卷组<br>vgcreate -s 100M zhougege &#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb5 </p>\n<p>5-在卷组中创建一个卷 大小2G，这里的20可以理解为dd命令中的count，所以总大小&#x3D;bs*count<br>lvcreate -l 20 -n zhoulv zhougege<br>    当然我们也可以直接指定大小，在卷组中再创建一个5G的卷<br>lvcreate -L +5G -n zhoulv2 zhougege<br>    这里我们再输入pvs可以查看剩余存储，接下来我们个“zhoulv”扩容一下，还有3G空间可以使用<br>lvextend -L +1g &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>    或者缩减<br>lvreduce -L -1G &#x2F;dev&#x2F;zhougege&#x2F;zhoulv</p>\n<p>6-这里我们还没有挂载，挂载需要文件系统，值得注意的是要进行删除逻辑卷操作的时候，记得unmount &#x2F;dev&#x2F;you&#x2F;device<br>mkfs -t &#x2F;dev&#x2F;zhougege&#x2F;zholv 或者mkfs.ext4 &#x2F;dev&#x2F;zhougegezhoulv   &#x2F;&#x2F;选择你想要的格式</p>\n<p>7-挂载，可以创建目录进行挂载，这里就不创建了<br>mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv &#x2F;mnt</p>\n<p>8-查看，可以看到文件系统和挂载点了<br>lsblk -f</p>\n<p>9-这里要注意的是，想要永久挂载，必须写入fstab，同时如果是逻辑分区不要使用路径挂载，最好指定卷名或者是uuid，懂得的都懂，不懂请点击<a href=\"https://www.baidu.com/\">这里</a>查看<br>echo “UUID&#x3D;you device uuid  &#x2F;monuntpoint filesystem defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab<br>echo “UUID&#x3D;xxxx  &#x2F;mnt ext4 defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab</p>\n<p>10-快照，相信大家很多人都去过网吧，这里的快照类似于网吧的无盘系统，这样就很好理解了，50m大小只是测试，实际看你想要存储文件大小<br>lvcreate -n zhoulv_snap -s -L 50m -p r &#x2F;dev&#x2F;zhougege&#x2F;zhoulv  &#x2F;&#x2F;s&#x3D;snap快照，p为权限有rw和r选项，作为快照来说当然是只读了,感觉不选也行，mount的时候加个-o r也不是不行\t<br>    还原快照，试试往mnt里面写入或删除文件<br>rm  -fr &#x2F;mnt&#x2F;*<br>    挂载快照卷，这里忘了挂载快照了，不过在创建快照的那一刻，已经保留了你被快照逻辑卷的状态，所以dont worry。挂载一下就好了<br>mkdir &#x2F;zhoulv_snap &amp;&amp; mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap  &#x2F;zhoulv_snap<br>lsblk和lvs都可以看到snap的状态<br>    还原快照，该命令需要卸载两个卷，所以复制来的简单一点，还是写一下把，推荐cp -r，快照之后就没了，很鸡儿垃圾<br>cp  -rv &#x2F;zhoulv_snap &#x2F;mnt<br>umount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap ; umount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>lvconvert –merge &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv &#x2F;mnt&#x2F;<br>ls &#x2F;mnt</p>\n<p>11-然后疯狂删除，记得先卸载<br>umount &#x2F;mnt<br>lvremove &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>lvremove &#x2F;dev&#x2F;zhougege&#x2F;zhoulv2<br>vgremove zhougege<br>pvremove</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>在生产实例中，突然会碰到磁盘告警爆满，而此时生产环境不能停止，所以我们用什么方法在不关机的情况下扩容磁盘呢，LVM应运而生。<br>LVM是什么？<br>LVM(Logical Volume Manager)逻辑卷管理是在Linux2.4内核以上实现的磁盘管理技术。它是Linux环境下对磁盘分区进行管理的一种机制。<br>现在不仅仅是Linux系统上可以使用LVM这种磁盘管理机制，对于其它的类UNIX操作系统，以及windows操作系统都有类似与LVM这种磁盘管理软件。<br>更通俗的说就是动态弹性管理磁盘，下面我们就来操作操作</p>\n<p>1-我们在虚拟机上添加一块新的硬盘，大小随意，重启或者输入partprobe刷新，输入lsblk查看，一般来说是sdb</p>\n<p>2-使用磁盘管理工具进行操作，fdisk一般来说是mbr，gdisk一般来说是gpt，这里我们就用fdisk来操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tfdisk /dev/sdb</span><br><span class=\"line\">\t输入m可以查看帮助，p命令打印分区信息，n命令创建新分区，t命令修改现在有分区的格式，w命令保存退出，q命令退出不保存</span><br><span class=\"line\">\t首先我们输入n，可以看到有两个选项，第一个是主分区，第二个是扩展分区（如果选择扩展分区，则后续的第二个选项为逻辑分区</span><br><span class=\"line\">逻辑分区属于扩展分区，也就是说后续逻辑分区不限数量，但受限于你扩展分区的容量，有点绕）</span><br><span class=\"line\">\t第一个选项分区号，逻辑分区无所谓，主分区必须是1-4以内4后面都属于逻辑分区，这里直接敲回车默认就行</span><br><span class=\"line\">\t第二个选项起始扇区，如没有特殊要求还是敲回车默认就好</span><br><span class=\"line\">\t第三个选项我们敲+10G，也可以是+10000M，自己怎么理解怎么来，意思是分配10G空间（1G=1024M，不够严谨）</span><br><span class=\"line\">\t接着提示创建成功，这里解释一下，相当于套娃又在sdb下面套了一个10G的sdb<span class=\"comment\">#，还是没用，需要在下面继续划分逻辑分区才能使用</span></span><br><span class=\"line\">\t所以我我们重复一遍，选择第二个选项，再划分一个逻辑分区，我们给他+2G，同时注意大小不能超过10G，上面已经说了</span><br><span class=\"line\">\tp打印出来，可以看到我们刚刚做的操作，使用w命令保存退出</span><br><span class=\"line\">\tlsblk查看，可以看到扩展分区显示1kb，这就是我上面说的，实际上他是有10G可用存储的，然后sdb5的可用2G就是使用的扩展分区所划分的10GB存储</span><br><span class=\"line\">\t接着我们重复一边操作，fdisk /dev/sdb，这次我们划分主分区，容量+8G，w保存退出</span><br><span class=\"line\">\t到这里，我们已经做好的前期准备，虽然没有贴图（懒），但是绝对够保姆级</span><br><span class=\"line\">\t忘记一个，使用t命令把主分区和逻辑分区变更一下格式”8e“，8e为LVM卷，一个简单的分区就完成了</span><br></pre></td></tr></table></figure>\n<p>3-选择之前的主分区和逻辑分区，这里就不解释pv了，可以看我关于disk的文章<br>pvcreate   &#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb5   </p>\n<p>4-100M可以理解为dd命令中的bs（反正我是这样理解的），这里是指创建了一个名为”zhougege“的卷组<br>vgcreate -s 100M zhougege &#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb5 </p>\n<p>5-在卷组中创建一个卷 大小2G，这里的20可以理解为dd命令中的count，所以总大小&#x3D;bs*count<br>lvcreate -l 20 -n zhoulv zhougege<br>    当然我们也可以直接指定大小，在卷组中再创建一个5G的卷<br>lvcreate -L +5G -n zhoulv2 zhougege<br>    这里我们再输入pvs可以查看剩余存储，接下来我们个“zhoulv”扩容一下，还有3G空间可以使用<br>lvextend -L +1g &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>    或者缩减<br>lvreduce -L -1G &#x2F;dev&#x2F;zhougege&#x2F;zhoulv</p>\n<p>6-这里我们还没有挂载，挂载需要文件系统，值得注意的是要进行删除逻辑卷操作的时候，记得unmount &#x2F;dev&#x2F;you&#x2F;device<br>mkfs -t &#x2F;dev&#x2F;zhougege&#x2F;zholv 或者mkfs.ext4 &#x2F;dev&#x2F;zhougegezhoulv   &#x2F;&#x2F;选择你想要的格式</p>\n<p>7-挂载，可以创建目录进行挂载，这里就不创建了<br>mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv &#x2F;mnt</p>\n<p>8-查看，可以看到文件系统和挂载点了<br>lsblk -f</p>\n<p>9-这里要注意的是，想要永久挂载，必须写入fstab，同时如果是逻辑分区不要使用路径挂载，最好指定卷名或者是uuid，懂得的都懂，不懂请点击<a href=\"https://www.baidu.com/\">这里</a>查看<br>echo “UUID&#x3D;you device uuid  &#x2F;monuntpoint filesystem defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab<br>echo “UUID&#x3D;xxxx  &#x2F;mnt ext4 defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab</p>\n<p>10-快照，相信大家很多人都去过网吧，这里的快照类似于网吧的无盘系统，这样就很好理解了，50m大小只是测试，实际看你想要存储文件大小<br>lvcreate -n zhoulv_snap -s -L 50m -p r &#x2F;dev&#x2F;zhougege&#x2F;zhoulv  &#x2F;&#x2F;s&#x3D;snap快照，p为权限有rw和r选项，作为快照来说当然是只读了,感觉不选也行，mount的时候加个-o r也不是不行\t<br>    还原快照，试试往mnt里面写入或删除文件<br>rm  -fr &#x2F;mnt&#x2F;*<br>    挂载快照卷，这里忘了挂载快照了，不过在创建快照的那一刻，已经保留了你被快照逻辑卷的状态，所以dont worry。挂载一下就好了<br>mkdir &#x2F;zhoulv_snap &amp;&amp; mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap  &#x2F;zhoulv_snap<br>lsblk和lvs都可以看到snap的状态<br>    还原快照，该命令需要卸载两个卷，所以复制来的简单一点，还是写一下把，推荐cp -r，快照之后就没了，很鸡儿垃圾<br>cp  -rv &#x2F;zhoulv_snap &#x2F;mnt<br>umount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap ; umount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>lvconvert –merge &#x2F;dev&#x2F;zhougege&#x2F;zhoulv_snap &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>mount &#x2F;dev&#x2F;zhougege&#x2F;zhoulv &#x2F;mnt&#x2F;<br>ls &#x2F;mnt</p>\n<p>11-然后疯狂删除，记得先卸载<br>umount &#x2F;mnt<br>lvremove &#x2F;dev&#x2F;zhougege&#x2F;zhoulv<br>lvremove &#x2F;dev&#x2F;zhougege&#x2F;zhoulv2<br>vgremove zhougege<br>pvremove</p>\n"},{"title":"Crontab 定时任务","date":"2023-04-01T10:36:00.000Z","_content":"\ncron任务分为系统级任务和用户级任务\n\t\n\t系统cron任务\n\t\t操作系统自带的cron 任务，系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件\n\t\n\t用户cron任务\n\t\t每个用户自己名下的 cron 任务\n\t\t红帽系统保存在 /var/spool/cron/USERNAME\n\t\t\t日志在/var/log/cron\n\t\t\tsystemctl status crond\n\t\tUbuntu 系统存放在/var/spool/cron/crontabs/USERNAME，利用 crontab 命令管理\n\t\t\tsystemctl status cron/etc/cron.deny     该文件中所列用户不允许使用crontab命令\n\t/etc/cron.allow    该文件中所列用户允许使用crontab命令\n\t/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名\n\t注意：只有/etc/crontab和/etc/cron.d/*中的文件可以指定用户名字段\n\t\nCrontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间段，第六段为要执行的任务（ps：用户名也算一个字段吗？）格式如下\n\t\n\tminute   hour   day   month   week    [ users ]    command \n\t  分      时    日     月      周       [用户]       任务\n\t\n\tminute： 表示分钟，可以是从0到59之间的任何整数。\n\thour：表示小时，可以是从0到23之间的任何整数。\n\tday：表示日期，可以是从1到31之间的任何整数。\n\tmonth：表示月份，可以是从1到12之间的任何整数。\n\tweek：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。\n\tcommand：要执行的命令，可以是系统命令，如果命令无法执行，请更换PATH或SHELL。也可以是自己编写的脚本文件,脚本需要带路径。\n\t\n\t在以上各个字段中，还可以使用以下特殊字符：\n\t\n\t星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n\t逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n\t中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n\t正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。\n\t\n\t\n\t* * * * * command                                   代表每一分钟执行一次command  注意crontab最小单位是分钟\n\t\n\t3,15 * * * * command                                代表每小时的第三分钟和第十五分钟执行一次command\n\t\n\t3,15 8-11 * * * command                             代表每天上午{8..11}点每第三分钟和第十五分钟执行一次command\n\t\n\t3,15 8-11 */2 * * command                           代表每隔两天的上午{8..11}点的第三分钟和第十五分钟执行一次command\n\t\n\t3,15 8-11 * * 1 command                             代表每周一上午{8..11}点的第三分钟和第十五分钟执行一次command\n\t \n\t30 21 * * * /etc/init.d/smb restart                 代表每天晚上九点半执行smb restart\n\t\n\t45 4 1,10,22 * * /etc/init.d/smb restart            代表每月一号，十号，二十二号的凌晨四点四十五分执行smb restart\n\t\n\t10 1 * * 6,0 /etc/init.d/smb restart                代表每周六，日的凌晨一点一十分执行smb restart\n\t\n\t0,30 18-23 * * * /etc/init.d/smb restart            代表每天晚上{18..23}之间每隔30分钟执行smb restart\n\t     \n\t0 23 * * 6 /etc/init.d/smb restart                  代表周六晚上十一点整点执行smb restart\n\t\n\t* */1 * * * /etc/init.d/smb restart                 代表每隔一小时执行一次smb restrat\n\t\n\t* 23-7/1 * * * /etc/init.d/smb restart              代表晚上十一点至早上七点每一小时执行一次smb restart\n\t\n\t0 11 4 * mon-wed /etc/init.d/smb restart \t    代表每月的四号和mon-wed【周一至周三】执行smb restart\n\t\n\t0 4 1 jan * /etc/init.d/smb restart                 代表Jan月一号凌晨四点执行smb restart\n\t\n\t01 * * * * root run-parts /etc/cron.hourly  \t    代表每小时执行/etc/cron.hourly 里面的脚本\n","source":"_posts/定时任务详解.md","raw":"---\ntitle:  Crontab 定时任务\ndate:  2023-04-01 10:36:00\ntags:\n---\n\ncron任务分为系统级任务和用户级任务\n\t\n\t系统cron任务\n\t\t操作系统自带的cron 任务，系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件\n\t\n\t用户cron任务\n\t\t每个用户自己名下的 cron 任务\n\t\t红帽系统保存在 /var/spool/cron/USERNAME\n\t\t\t日志在/var/log/cron\n\t\t\tsystemctl status crond\n\t\tUbuntu 系统存放在/var/spool/cron/crontabs/USERNAME，利用 crontab 命令管理\n\t\t\tsystemctl status cron/etc/cron.deny     该文件中所列用户不允许使用crontab命令\n\t/etc/cron.allow    该文件中所列用户允许使用crontab命令\n\t/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名\n\t注意：只有/etc/crontab和/etc/cron.d/*中的文件可以指定用户名字段\n\t\nCrontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间段，第六段为要执行的任务（ps：用户名也算一个字段吗？）格式如下\n\t\n\tminute   hour   day   month   week    [ users ]    command \n\t  分      时    日     月      周       [用户]       任务\n\t\n\tminute： 表示分钟，可以是从0到59之间的任何整数。\n\thour：表示小时，可以是从0到23之间的任何整数。\n\tday：表示日期，可以是从1到31之间的任何整数。\n\tmonth：表示月份，可以是从1到12之间的任何整数。\n\tweek：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。\n\tcommand：要执行的命令，可以是系统命令，如果命令无法执行，请更换PATH或SHELL。也可以是自己编写的脚本文件,脚本需要带路径。\n\t\n\t在以上各个字段中，还可以使用以下特殊字符：\n\t\n\t星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n\t逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n\t中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n\t正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。\n\t\n\t\n\t* * * * * command                                   代表每一分钟执行一次command  注意crontab最小单位是分钟\n\t\n\t3,15 * * * * command                                代表每小时的第三分钟和第十五分钟执行一次command\n\t\n\t3,15 8-11 * * * command                             代表每天上午{8..11}点每第三分钟和第十五分钟执行一次command\n\t\n\t3,15 8-11 */2 * * command                           代表每隔两天的上午{8..11}点的第三分钟和第十五分钟执行一次command\n\t\n\t3,15 8-11 * * 1 command                             代表每周一上午{8..11}点的第三分钟和第十五分钟执行一次command\n\t \n\t30 21 * * * /etc/init.d/smb restart                 代表每天晚上九点半执行smb restart\n\t\n\t45 4 1,10,22 * * /etc/init.d/smb restart            代表每月一号，十号，二十二号的凌晨四点四十五分执行smb restart\n\t\n\t10 1 * * 6,0 /etc/init.d/smb restart                代表每周六，日的凌晨一点一十分执行smb restart\n\t\n\t0,30 18-23 * * * /etc/init.d/smb restart            代表每天晚上{18..23}之间每隔30分钟执行smb restart\n\t     \n\t0 23 * * 6 /etc/init.d/smb restart                  代表周六晚上十一点整点执行smb restart\n\t\n\t* */1 * * * /etc/init.d/smb restart                 代表每隔一小时执行一次smb restrat\n\t\n\t* 23-7/1 * * * /etc/init.d/smb restart              代表晚上十一点至早上七点每一小时执行一次smb restart\n\t\n\t0 11 4 * mon-wed /etc/init.d/smb restart \t    代表每月的四号和mon-wed【周一至周三】执行smb restart\n\t\n\t0 4 1 jan * /etc/init.d/smb restart                 代表Jan月一号凌晨四点执行smb restart\n\t\n\t01 * * * * root run-parts /etc/cron.hourly  \t    代表每小时执行/etc/cron.hourly 里面的脚本\n","slug":"定时任务详解","published":1,"updated":"2023-04-07T06:35:24.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtg7xt500044n8f560m837l","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>cron任务分为系统级任务和用户级任务</p>\n<pre><code>系统cron任务\n    操作系统自带的cron 任务，系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件\n\n用户cron任务\n    每个用户自己名下的 cron 任务\n    红帽系统保存在 /var/spool/cron/USERNAME\n        日志在/var/log/cron\n        systemctl status crond\n    Ubuntu 系统存放在/var/spool/cron/crontabs/USERNAME，利用 crontab 命令管理\n        systemctl status cron/etc/cron.deny     该文件中所列用户不允许使用crontab命令\n/etc/cron.allow    该文件中所列用户允许使用crontab命令\n/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名\n注意：只有/etc/crontab和/etc/cron.d/*中的文件可以指定用户名字段\n</code></pre>\n<p>Crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间段，第六段为要执行的任务（ps：用户名也算一个字段吗？）格式如下</p>\n<pre><code>minute   hour   day   month   week    [ users ]    command \n  分      时    日     月      周       [用户]       任务\n\nminute： 表示分钟，可以是从0到59之间的任何整数。\nhour：表示小时，可以是从0到23之间的任何整数。\nday：表示日期，可以是从1到31之间的任何整数。\nmonth：表示月份，可以是从1到12之间的任何整数。\nweek：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。\ncommand：要执行的命令，可以是系统命令，如果命令无法执行，请更换PATH或SHELL。也可以是自己编写的脚本文件,脚本需要带路径。\n\n在以上各个字段中，还可以使用以下特殊字符：\n\n星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。\n\n\n* * * * * command                                   代表每一分钟执行一次command  注意crontab最小单位是分钟\n\n3,15 * * * * command                                代表每小时的第三分钟和第十五分钟执行一次command\n\n3,15 8-11 * * * command                             代表每天上午&#123;8..11&#125;点每第三分钟和第十五分钟执行一次command\n\n3,15 8-11 */2 * * command                           代表每隔两天的上午&#123;8..11&#125;点的第三分钟和第十五分钟执行一次command\n\n3,15 8-11 * * 1 command                             代表每周一上午&#123;8..11&#125;点的第三分钟和第十五分钟执行一次command\n \n30 21 * * * /etc/init.d/smb restart                 代表每天晚上九点半执行smb restart\n\n45 4 1,10,22 * * /etc/init.d/smb restart            代表每月一号，十号，二十二号的凌晨四点四十五分执行smb restart\n\n10 1 * * 6,0 /etc/init.d/smb restart                代表每周六，日的凌晨一点一十分执行smb restart\n\n0,30 18-23 * * * /etc/init.d/smb restart            代表每天晚上&#123;18..23&#125;之间每隔30分钟执行smb restart\n     \n0 23 * * 6 /etc/init.d/smb restart                  代表周六晚上十一点整点执行smb restart\n\n* */1 * * * /etc/init.d/smb restart                 代表每隔一小时执行一次smb restrat\n\n* 23-7/1 * * * /etc/init.d/smb restart              代表晚上十一点至早上七点每一小时执行一次smb restart\n\n0 11 4 * mon-wed /etc/init.d/smb restart \t    代表每月的四号和mon-wed【周一至周三】执行smb restart\n\n0 4 1 jan * /etc/init.d/smb restart                 代表Jan月一号凌晨四点执行smb restart\n\n01 * * * * root run-parts /etc/cron.hourly  \t    代表每小时执行/etc/cron.hourly 里面的脚本\n</code></pre>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>cron任务分为系统级任务和用户级任务</p>\n<pre><code>系统cron任务\n    操作系统自带的cron 任务，系统维护作业，/etc/crontab 主配置文件， /etc/cron.d/ 子配置文件\n\n用户cron任务\n    每个用户自己名下的 cron 任务\n    红帽系统保存在 /var/spool/cron/USERNAME\n        日志在/var/log/cron\n        systemctl status crond\n    Ubuntu 系统存放在/var/spool/cron/crontabs/USERNAME，利用 crontab 命令管理\n        systemctl status cron/etc/cron.deny     该文件中所列用户不允许使用crontab命令\n/etc/cron.allow    该文件中所列用户允许使用crontab命令\n/var/spool/cron/   所有用户crontab文件存放的目录,以用户名命名\n注意：只有/etc/crontab和/etc/cron.d/*中的文件可以指定用户名字段\n</code></pre>\n<p>Crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间段，第六段为要执行的任务（ps：用户名也算一个字段吗？）格式如下</p>\n<pre><code>minute   hour   day   month   week    [ users ]    command \n  分      时    日     月      周       [用户]       任务\n\nminute： 表示分钟，可以是从0到59之间的任何整数。\nhour：表示小时，可以是从0到23之间的任何整数。\nday：表示日期，可以是从1到31之间的任何整数。\nmonth：表示月份，可以是从1到12之间的任何整数。\nweek：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。\ncommand：要执行的命令，可以是系统命令，如果命令无法执行，请更换PATH或SHELL。也可以是自己编写的脚本文件,脚本需要带路径。\n\n在以上各个字段中，还可以使用以下特殊字符：\n\n星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。\n逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”\n中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”\n正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。\n\n\n* * * * * command                                   代表每一分钟执行一次command  注意crontab最小单位是分钟\n\n3,15 * * * * command                                代表每小时的第三分钟和第十五分钟执行一次command\n\n3,15 8-11 * * * command                             代表每天上午&#123;8..11&#125;点每第三分钟和第十五分钟执行一次command\n\n3,15 8-11 */2 * * command                           代表每隔两天的上午&#123;8..11&#125;点的第三分钟和第十五分钟执行一次command\n\n3,15 8-11 * * 1 command                             代表每周一上午&#123;8..11&#125;点的第三分钟和第十五分钟执行一次command\n \n30 21 * * * /etc/init.d/smb restart                 代表每天晚上九点半执行smb restart\n\n45 4 1,10,22 * * /etc/init.d/smb restart            代表每月一号，十号，二十二号的凌晨四点四十五分执行smb restart\n\n10 1 * * 6,0 /etc/init.d/smb restart                代表每周六，日的凌晨一点一十分执行smb restart\n\n0,30 18-23 * * * /etc/init.d/smb restart            代表每天晚上&#123;18..23&#125;之间每隔30分钟执行smb restart\n     \n0 23 * * 6 /etc/init.d/smb restart                  代表周六晚上十一点整点执行smb restart\n\n* */1 * * * /etc/init.d/smb restart                 代表每隔一小时执行一次smb restrat\n\n* 23-7/1 * * * /etc/init.d/smb restart              代表晚上十一点至早上七点每一小时执行一次smb restart\n\n0 11 4 * mon-wed /etc/init.d/smb restart \t    代表每月的四号和mon-wed【周一至周三】执行smb restart\n\n0 4 1 jan * /etc/init.d/smb restart                 代表Jan月一号凌晨四点执行smb restart\n\n01 * * * * root run-parts /etc/cron.hourly  \t    代表每小时执行/etc/cron.hourly 里面的脚本\n</code></pre>\n"},{"title":"利用nginx或apache简单搭建个人仓库源","date":"2023-03-25T20:36:00.000Z","_content":"1，运行环境，一台centos虚拟机即可，最好两台，这里我们使用虚拟机本地挂载的ISO文件，如果你想要更多可以去百度自己找。\n\n2，接着我们先安装apache，然后启动apache，并且把80端口打开（nginx同理，这里我们就演示apache了）\n```bash\n[root@localhost]#yum install apache -y && systemctl start apache ; systemctl enable apache\n[root@localhost]#firewall-cmd --add-port=80/tcp --permanent ; firewall-cmd --reload \n```\n\n3，进入到源目录，把目录下所有文件拷贝到/backup下\n```bash\n[root@localhost]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# makedir /backup && cp  * /backup\n```\n\n4，观看虚拟机右下角光盘是否连接，如果未连接请手动连接然后挂载至/mnt目录下，再把元数据和RPM包拷贝至apache网页目录下\n```bash\n[root@localhost yum.repos.d]mount /dev/sr0 /mnt && mkdir -p /var/www/html/CentOS/8/\n[root@localhost yum.repos.d]cp -r /mnt/AppStream  /var/www/html/CentOS/8/\n[root@localhost yum.repos.d]cp -r /mnt/BaseOS\t/var/www/html/CentOS/8/\ntips:为了省时间，这里我们也可以做软连接过去\n[root@localhost yum.repos.d]ln -s  /mnt/AppStream /var/www/html/CentOS/8/AppStream\n[root@localhost yum.repos.d]ln -s  /mnt/BaseOS\t/var/www/html/CentOS/8/BaseOS\ntips2:当然我们也可以在网上自行下载相关文件，不过不推荐\n[root@localhost yum.repos.d]yum reposync --repoid=localbase --download -p /var/www/html/CentOS/8/BaseOS\n[root@localhost yum.repos.d]yum reposync --repoid=localappstream --download -p /var/www/html/CentOS/8/AppStream\n```\n\n5，接下来我们在当前目录新建一个repo文件，地址指向指向本地http，如需其他源请自行百度，推荐[阿里源](https://developer.aliyun.com/mirror/)\n```bash\n[root@localhost yum.repos.d]vim test.repo\n\t\t\t\t\t\t\t\t//这是我的配置，仅供参考\n[localbase]\t\t\t\t\t\t\t//repo id\t\nname=local base\t\t\t\t\t\t\t//仓库名\n#baseurl=file:///mnt/BaseOS\t\t\t\t\t//本地源路径,记得使用前先挂载\nbaseurl=http://localhost/mnt/BaseOS\t\t\t\t//http路径，这里我使用的一台机器，所以是localhost，也可以填127.0.0.1\n#baseurl=https://example/some/path\t\t\t\t//https路径\n#baseurl=ftp:///you/ftp/path\t\t\t\t\t//ftp路径\n#baseurl=http://pan.alybaba.top/CentOS.Download.RPM.1\t\t//这两个是我搭建的测试站点，如果觉得操作太麻烦，可直接复制该url\n#baseurl=http://pan.alybaba.top/CentOS.Download.RPM\ngpgcheck=0\t\t\t\t\t\t\t//是否校验，默认为1\n#enable=1\t\t\t\t\t\t\t//是否用，默认为1。为0则不使用该源\n#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\t//配合校验使用\n#failovermethod={roundrobin，priority}\t\t\t\t//有多个baseurl，此项决定访问规则，roundrobin 随机，priority:按顺序访问\n#cost=1000 \t\t\t\t\t\t\t//优先级\n\n[localappstream]\t\t\t\t\t\t//链接可以分多个文件，也可以放在一起，但是名字一定要见名知意\nname=local appstream\nbaseurl=file:///mnt/AppStream\n#baseurl=http://localhost/AppStream\ngpgcheck=1\nenable=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\n\n:wq\t//保存退出\n```\n6，接着使用yum命令做一些操作\n```bash\n[root@localhost yum.repos.d]yum clean all && yum makecache\n[root@localhost yum.repos.d]yum repolist\t\t\t//如果想查看RPM包数量，可以加-v选项\n\trepo id                                           repo name\n\tlocalappstream \t\t                          local appstream\n\tlocalbase                        \t          local base\n[root@localhost yum.repos.d]yum  list\t\t\t\t//查看所有RPM包\n[root@localhost yum.repos.d]yum install package -y\t\t//安装软件包\n[root@localhost yum.repos.d]yum remove package -y\t\t//卸载软件包，不会卸载依赖\n[root@localhost yum.repos.d]yum autoremove package -y\t\t//卸载软件包及其依赖\n[root@localhost yum.repos.d]yum reinstall package -y\t\t//重新安装软件包\n[root@localhost yum.repos.d]yum search package \t\t\t//搜索包\n[root@localhost yum.repos.d]yum info package\t\t\t//查看包信息\n[root@localhost yum.repos.d]yum provides command\t\t//查看命令所需要安装的包\n[root@localhost yum.repos.d]yum clean all\t\t\t//清理缓存\n[root@localhost yum.repos.d]yum makecache\t\t\t//生成缓存\n[root@localhost yum.repos.d]yum history\t\t\t\t//查询安装历史\n[root@localhost yum.repos.d]yum install --downloadonly package --downloaddir=/you/package/path\n//这个命令是指只下载包和该包的依赖包到指定目录且不安装，该命令对于不联网的系统，解决依赖关系非常好用\n[root@localhost yum.repos.d]yum·············\t\t\t\t\n```\n7，到这里我们的私仓就搭建完毕了，总结一下，该操作在红帽初级认证必考，所以一定要熟练。其次我们来说重要的点，在repo配置文件中，其实只需要repoid，baseurl，以及gpgcheck这三项，如果没有特殊要求的话，其次baseurl一定要带head，不然一定会报错的，就四种头：http，https，ftp和本地。其次好像centos8就把包的作用分的很清楚，8以下都是在一个Base文件下的，所以说有空还是要去了解下包名的意思。还有能够被识别的源目录下一定会有repodata和Packages两个文件夹，不然也会报错。上层文件名无所谓，一个baseurl可以写多条，意思是备份把，就是这一条url挂了，往下一条url找，但是问题是如果是该url没有找到对应的package会不会往下找下去，还是换其他的repo。最后说下dnf命令，8以上才有，两个命令基本上是一样。\n","source":"_posts/简单搭建私人仓库源.md","raw":"---\ntitle: 利用nginx或apache简单搭建个人仓库源\ndate: 2023-03-25 20:36:00\ntags:\n---\n1，运行环境，一台centos虚拟机即可，最好两台，这里我们使用虚拟机本地挂载的ISO文件，如果你想要更多可以去百度自己找。\n\n2，接着我们先安装apache，然后启动apache，并且把80端口打开（nginx同理，这里我们就演示apache了）\n```bash\n[root@localhost]#yum install apache -y && systemctl start apache ; systemctl enable apache\n[root@localhost]#firewall-cmd --add-port=80/tcp --permanent ; firewall-cmd --reload \n```\n\n3，进入到源目录，把目录下所有文件拷贝到/backup下\n```bash\n[root@localhost]# cd /etc/yum.repos.d/\n[root@localhost yum.repos.d]# makedir /backup && cp  * /backup\n```\n\n4，观看虚拟机右下角光盘是否连接，如果未连接请手动连接然后挂载至/mnt目录下，再把元数据和RPM包拷贝至apache网页目录下\n```bash\n[root@localhost yum.repos.d]mount /dev/sr0 /mnt && mkdir -p /var/www/html/CentOS/8/\n[root@localhost yum.repos.d]cp -r /mnt/AppStream  /var/www/html/CentOS/8/\n[root@localhost yum.repos.d]cp -r /mnt/BaseOS\t/var/www/html/CentOS/8/\ntips:为了省时间，这里我们也可以做软连接过去\n[root@localhost yum.repos.d]ln -s  /mnt/AppStream /var/www/html/CentOS/8/AppStream\n[root@localhost yum.repos.d]ln -s  /mnt/BaseOS\t/var/www/html/CentOS/8/BaseOS\ntips2:当然我们也可以在网上自行下载相关文件，不过不推荐\n[root@localhost yum.repos.d]yum reposync --repoid=localbase --download -p /var/www/html/CentOS/8/BaseOS\n[root@localhost yum.repos.d]yum reposync --repoid=localappstream --download -p /var/www/html/CentOS/8/AppStream\n```\n\n5，接下来我们在当前目录新建一个repo文件，地址指向指向本地http，如需其他源请自行百度，推荐[阿里源](https://developer.aliyun.com/mirror/)\n```bash\n[root@localhost yum.repos.d]vim test.repo\n\t\t\t\t\t\t\t\t//这是我的配置，仅供参考\n[localbase]\t\t\t\t\t\t\t//repo id\t\nname=local base\t\t\t\t\t\t\t//仓库名\n#baseurl=file:///mnt/BaseOS\t\t\t\t\t//本地源路径,记得使用前先挂载\nbaseurl=http://localhost/mnt/BaseOS\t\t\t\t//http路径，这里我使用的一台机器，所以是localhost，也可以填127.0.0.1\n#baseurl=https://example/some/path\t\t\t\t//https路径\n#baseurl=ftp:///you/ftp/path\t\t\t\t\t//ftp路径\n#baseurl=http://pan.alybaba.top/CentOS.Download.RPM.1\t\t//这两个是我搭建的测试站点，如果觉得操作太麻烦，可直接复制该url\n#baseurl=http://pan.alybaba.top/CentOS.Download.RPM\ngpgcheck=0\t\t\t\t\t\t\t//是否校验，默认为1\n#enable=1\t\t\t\t\t\t\t//是否用，默认为1。为0则不使用该源\n#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\t//配合校验使用\n#failovermethod={roundrobin，priority}\t\t\t\t//有多个baseurl，此项决定访问规则，roundrobin 随机，priority:按顺序访问\n#cost=1000 \t\t\t\t\t\t\t//优先级\n\n[localappstream]\t\t\t\t\t\t//链接可以分多个文件，也可以放在一起，但是名字一定要见名知意\nname=local appstream\nbaseurl=file:///mnt/AppStream\n#baseurl=http://localhost/AppStream\ngpgcheck=1\nenable=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\n\n:wq\t//保存退出\n```\n6，接着使用yum命令做一些操作\n```bash\n[root@localhost yum.repos.d]yum clean all && yum makecache\n[root@localhost yum.repos.d]yum repolist\t\t\t//如果想查看RPM包数量，可以加-v选项\n\trepo id                                           repo name\n\tlocalappstream \t\t                          local appstream\n\tlocalbase                        \t          local base\n[root@localhost yum.repos.d]yum  list\t\t\t\t//查看所有RPM包\n[root@localhost yum.repos.d]yum install package -y\t\t//安装软件包\n[root@localhost yum.repos.d]yum remove package -y\t\t//卸载软件包，不会卸载依赖\n[root@localhost yum.repos.d]yum autoremove package -y\t\t//卸载软件包及其依赖\n[root@localhost yum.repos.d]yum reinstall package -y\t\t//重新安装软件包\n[root@localhost yum.repos.d]yum search package \t\t\t//搜索包\n[root@localhost yum.repos.d]yum info package\t\t\t//查看包信息\n[root@localhost yum.repos.d]yum provides command\t\t//查看命令所需要安装的包\n[root@localhost yum.repos.d]yum clean all\t\t\t//清理缓存\n[root@localhost yum.repos.d]yum makecache\t\t\t//生成缓存\n[root@localhost yum.repos.d]yum history\t\t\t\t//查询安装历史\n[root@localhost yum.repos.d]yum install --downloadonly package --downloaddir=/you/package/path\n//这个命令是指只下载包和该包的依赖包到指定目录且不安装，该命令对于不联网的系统，解决依赖关系非常好用\n[root@localhost yum.repos.d]yum·············\t\t\t\t\n```\n7，到这里我们的私仓就搭建完毕了，总结一下，该操作在红帽初级认证必考，所以一定要熟练。其次我们来说重要的点，在repo配置文件中，其实只需要repoid，baseurl，以及gpgcheck这三项，如果没有特殊要求的话，其次baseurl一定要带head，不然一定会报错的，就四种头：http，https，ftp和本地。其次好像centos8就把包的作用分的很清楚，8以下都是在一个Base文件下的，所以说有空还是要去了解下包名的意思。还有能够被识别的源目录下一定会有repodata和Packages两个文件夹，不然也会报错。上层文件名无所谓，一个baseurl可以写多条，意思是备份把，就是这一条url挂了，往下一条url找，但是问题是如果是该url没有找到对应的package会不会往下找下去，还是换其他的repo。最后说下dnf命令，8以上才有，两个命令基本上是一样。\n","slug":"简单搭建私人仓库源","published":1,"updated":"2023-04-19T12:09:32.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtg7xt700054n8fc3phcz05","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>1，运行环境，一台centos虚拟机即可，最好两台，这里我们使用虚拟机本地挂载的ISO文件，如果你想要更多可以去百度自己找。</p>\n<p>2，接着我们先安装apache，然后启动apache，并且把80端口打开（nginx同理，这里我们就演示apache了）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]<span class=\"comment\">#yum install apache -y &amp;&amp; systemctl start apache ; systemctl enable apache</span></span><br><span class=\"line\">[root@localhost]<span class=\"comment\">#firewall-cmd --add-port=80/tcp --permanent ; firewall-cmd --reload </span></span><br></pre></td></tr></table></figure>\n\n<p>3，进入到源目录，把目录下所有文件拷贝到&#x2F;backup下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]<span class=\"comment\"># cd /etc/yum.repos.d/</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># makedir /backup &amp;&amp; cp  * /backup</span></span><br></pre></td></tr></table></figure>\n\n<p>4，观看虚拟机右下角光盘是否连接，如果未连接请手动连接然后挂载至&#x2F;mnt目录下，再把元数据和RPM包拷贝至apache网页目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]mount /dev/sr0 /mnt &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/www/html/CentOS/8/</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">cp</span> -r /mnt/AppStream  /var/www/html/CentOS/8/</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">cp</span> -r /mnt/BaseOS\t/var/www/html/CentOS/8/</span><br><span class=\"line\">tips:为了省时间，这里我们也可以做软连接过去</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">ln</span> -s  /mnt/AppStream /var/www/html/CentOS/8/AppStream</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">ln</span> -s  /mnt/BaseOS\t/var/www/html/CentOS/8/BaseOS</span><br><span class=\"line\">tips2:当然我们也可以在网上自行下载相关文件，不过不推荐</span><br><span class=\"line\">[root@localhost yum.repos.d]yum reposync --repoid=localbase --download -p /var/www/html/CentOS/8/BaseOS</span><br><span class=\"line\">[root@localhost yum.repos.d]yum reposync --repoid=localappstream --download -p /var/www/html/CentOS/8/AppStream</span><br></pre></td></tr></table></figure>\n\n<p>5，接下来我们在当前目录新建一个repo文件，地址指向指向本地http，如需其他源请自行百度，推荐<a href=\"https://developer.aliyun.com/mirror/\">阿里源</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]vim test.repo</span><br><span class=\"line\">\t\t\t\t\t\t\t\t//这是我的配置，仅供参考</span><br><span class=\"line\">[localbase]\t\t\t\t\t\t\t//repo <span class=\"built_in\">id</span>\t</span><br><span class=\"line\">name=<span class=\"built_in\">local</span> base\t\t\t\t\t\t\t//仓库名</span><br><span class=\"line\"><span class=\"comment\">#baseurl=file:///mnt/BaseOS\t\t\t\t\t//本地源路径,记得使用前先挂载</span></span><br><span class=\"line\">baseurl=http://localhost/mnt/BaseOS\t\t\t\t//http路径，这里我使用的一台机器，所以是localhost，也可以填127.0.0.1</span><br><span class=\"line\"><span class=\"comment\">#baseurl=https://example/some/path\t\t\t\t//https路径</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=ftp:///you/ftp/path\t\t\t\t\t//ftp路径</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://pan.alybaba.top/CentOS.Download.RPM.1\t\t//这两个是我搭建的测试站点，如果觉得操作太麻烦，可直接复制该url</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://pan.alybaba.top/CentOS.Download.RPM</span></span><br><span class=\"line\">gpgcheck=0\t\t\t\t\t\t\t//是否校验，默认为1</span><br><span class=\"line\"><span class=\"comment\">#enable=1\t\t\t\t\t\t\t//是否用，默认为1。为0则不使用该源</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\t//配合校验使用</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=&#123;roundrobin，priority&#125;\t\t\t\t//有多个baseurl，此项决定访问规则，roundrobin 随机，priority:按顺序访问</span></span><br><span class=\"line\"><span class=\"comment\">#cost=1000 \t\t\t\t\t\t\t//优先级</span></span><br><span class=\"line\"></span><br><span class=\"line\">[localappstream]\t\t\t\t\t\t//链接可以分多个文件，也可以放在一起，但是名字一定要见名知意</span><br><span class=\"line\">name=<span class=\"built_in\">local</span> appstream</span><br><span class=\"line\">baseurl=file:///mnt/AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://localhost/AppStream</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"><span class=\"built_in\">enable</span>=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial</span><br><span class=\"line\"></span><br><span class=\"line\">:wq\t//保存退出</span><br></pre></td></tr></table></figure>\n<p>6，接着使用yum命令做一些操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]yum clean all &amp;&amp; yum makecache</span><br><span class=\"line\">[root@localhost yum.repos.d]yum repolist\t\t\t//如果想查看RPM包数量，可以加-v选项</span><br><span class=\"line\">\trepo <span class=\"built_in\">id</span>                                           repo name</span><br><span class=\"line\">\tlocalappstream \t\t                          <span class=\"built_in\">local</span> appstream</span><br><span class=\"line\">\tlocalbase                        \t          <span class=\"built_in\">local</span> base</span><br><span class=\"line\">[root@localhost yum.repos.d]yum  list\t\t\t\t//查看所有RPM包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum install package -y\t\t//安装软件包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum remove package -y\t\t//卸载软件包，不会卸载依赖</span><br><span class=\"line\">[root@localhost yum.repos.d]yum autoremove package -y\t\t//卸载软件包及其依赖</span><br><span class=\"line\">[root@localhost yum.repos.d]yum reinstall package -y\t\t//重新安装软件包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum search package \t\t\t//搜索包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum info package\t\t\t//查看包信息</span><br><span class=\"line\">[root@localhost yum.repos.d]yum provides <span class=\"built_in\">command</span>\t\t//查看命令所需要安装的包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum clean all\t\t\t//清理缓存</span><br><span class=\"line\">[root@localhost yum.repos.d]yum makecache\t\t\t//生成缓存</span><br><span class=\"line\">[root@localhost yum.repos.d]yum <span class=\"built_in\">history</span>\t\t\t\t//查询安装历史</span><br><span class=\"line\">[root@localhost yum.repos.d]yum install --downloadonly package --downloaddir=/you/package/path</span><br><span class=\"line\">//这个命令是指只下载包和该包的依赖包到指定目录且不安装，该命令对于不联网的系统，解决依赖关系非常好用</span><br><span class=\"line\">[root@localhost yum.repos.d]yum·············\t\t\t\t</span><br></pre></td></tr></table></figure>\n<p>7，到这里我们的私仓就搭建完毕了，总结一下，该操作在红帽初级认证必考，所以一定要熟练。其次我们来说重要的点，在repo配置文件中，其实只需要repoid，baseurl，以及gpgcheck这三项，如果没有特殊要求的话，其次baseurl一定要带head，不然一定会报错的，就四种头：http，https，ftp和本地。其次好像centos8就把包的作用分的很清楚，8以下都是在一个Base文件下的，所以说有空还是要去了解下包名的意思。还有能够被识别的源目录下一定会有repodata和Packages两个文件夹，不然也会报错。上层文件名无所谓，一个baseurl可以写多条，意思是备份把，就是这一条url挂了，往下一条url找，但是问题是如果是该url没有找到对应的package会不会往下找下去，还是换其他的repo。最后说下dnf命令，8以上才有，两个命令基本上是一样。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>1，运行环境，一台centos虚拟机即可，最好两台，这里我们使用虚拟机本地挂载的ISO文件，如果你想要更多可以去百度自己找。</p>\n<p>2，接着我们先安装apache，然后启动apache，并且把80端口打开（nginx同理，这里我们就演示apache了）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]<span class=\"comment\">#yum install apache -y &amp;&amp; systemctl start apache ; systemctl enable apache</span></span><br><span class=\"line\">[root@localhost]<span class=\"comment\">#firewall-cmd --add-port=80/tcp --permanent ; firewall-cmd --reload </span></span><br></pre></td></tr></table></figure>\n\n<p>3，进入到源目录，把目录下所有文件拷贝到&#x2F;backup下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost]<span class=\"comment\"># cd /etc/yum.repos.d/</span></span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"comment\"># makedir /backup &amp;&amp; cp  * /backup</span></span><br></pre></td></tr></table></figure>\n\n<p>4，观看虚拟机右下角光盘是否连接，如果未连接请手动连接然后挂载至&#x2F;mnt目录下，再把元数据和RPM包拷贝至apache网页目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]mount /dev/sr0 /mnt &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/www/html/CentOS/8/</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">cp</span> -r /mnt/AppStream  /var/www/html/CentOS/8/</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">cp</span> -r /mnt/BaseOS\t/var/www/html/CentOS/8/</span><br><span class=\"line\">tips:为了省时间，这里我们也可以做软连接过去</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">ln</span> -s  /mnt/AppStream /var/www/html/CentOS/8/AppStream</span><br><span class=\"line\">[root@localhost yum.repos.d]<span class=\"built_in\">ln</span> -s  /mnt/BaseOS\t/var/www/html/CentOS/8/BaseOS</span><br><span class=\"line\">tips2:当然我们也可以在网上自行下载相关文件，不过不推荐</span><br><span class=\"line\">[root@localhost yum.repos.d]yum reposync --repoid=localbase --download -p /var/www/html/CentOS/8/BaseOS</span><br><span class=\"line\">[root@localhost yum.repos.d]yum reposync --repoid=localappstream --download -p /var/www/html/CentOS/8/AppStream</span><br></pre></td></tr></table></figure>\n\n<p>5，接下来我们在当前目录新建一个repo文件，地址指向指向本地http，如需其他源请自行百度，推荐<a href=\"https://developer.aliyun.com/mirror/\">阿里源</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]vim test.repo</span><br><span class=\"line\">\t\t\t\t\t\t\t\t//这是我的配置，仅供参考</span><br><span class=\"line\">[localbase]\t\t\t\t\t\t\t//repo <span class=\"built_in\">id</span>\t</span><br><span class=\"line\">name=<span class=\"built_in\">local</span> base\t\t\t\t\t\t\t//仓库名</span><br><span class=\"line\"><span class=\"comment\">#baseurl=file:///mnt/BaseOS\t\t\t\t\t//本地源路径,记得使用前先挂载</span></span><br><span class=\"line\">baseurl=http://localhost/mnt/BaseOS\t\t\t\t//http路径，这里我使用的一台机器，所以是localhost，也可以填127.0.0.1</span><br><span class=\"line\"><span class=\"comment\">#baseurl=https://example/some/path\t\t\t\t//https路径</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=ftp:///you/ftp/path\t\t\t\t\t//ftp路径</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://pan.alybaba.top/CentOS.Download.RPM.1\t\t//这两个是我搭建的测试站点，如果觉得操作太麻烦，可直接复制该url</span></span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://pan.alybaba.top/CentOS.Download.RPM</span></span><br><span class=\"line\">gpgcheck=0\t\t\t\t\t\t\t//是否校验，默认为1</span><br><span class=\"line\"><span class=\"comment\">#enable=1\t\t\t\t\t\t\t//是否用，默认为1。为0则不使用该源</span></span><br><span class=\"line\"><span class=\"comment\">#gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\t//配合校验使用</span></span><br><span class=\"line\"><span class=\"comment\">#failovermethod=&#123;roundrobin，priority&#125;\t\t\t\t//有多个baseurl，此项决定访问规则，roundrobin 随机，priority:按顺序访问</span></span><br><span class=\"line\"><span class=\"comment\">#cost=1000 \t\t\t\t\t\t\t//优先级</span></span><br><span class=\"line\"></span><br><span class=\"line\">[localappstream]\t\t\t\t\t\t//链接可以分多个文件，也可以放在一起，但是名字一定要见名知意</span><br><span class=\"line\">name=<span class=\"built_in\">local</span> appstream</span><br><span class=\"line\">baseurl=file:///mnt/AppStream</span><br><span class=\"line\"><span class=\"comment\">#baseurl=http://localhost/AppStream</span></span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\"><span class=\"built_in\">enable</span>=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial</span><br><span class=\"line\"></span><br><span class=\"line\">:wq\t//保存退出</span><br></pre></td></tr></table></figure>\n<p>6，接着使用yum命令做一些操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost yum.repos.d]yum clean all &amp;&amp; yum makecache</span><br><span class=\"line\">[root@localhost yum.repos.d]yum repolist\t\t\t//如果想查看RPM包数量，可以加-v选项</span><br><span class=\"line\">\trepo <span class=\"built_in\">id</span>                                           repo name</span><br><span class=\"line\">\tlocalappstream \t\t                          <span class=\"built_in\">local</span> appstream</span><br><span class=\"line\">\tlocalbase                        \t          <span class=\"built_in\">local</span> base</span><br><span class=\"line\">[root@localhost yum.repos.d]yum  list\t\t\t\t//查看所有RPM包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum install package -y\t\t//安装软件包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum remove package -y\t\t//卸载软件包，不会卸载依赖</span><br><span class=\"line\">[root@localhost yum.repos.d]yum autoremove package -y\t\t//卸载软件包及其依赖</span><br><span class=\"line\">[root@localhost yum.repos.d]yum reinstall package -y\t\t//重新安装软件包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum search package \t\t\t//搜索包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum info package\t\t\t//查看包信息</span><br><span class=\"line\">[root@localhost yum.repos.d]yum provides <span class=\"built_in\">command</span>\t\t//查看命令所需要安装的包</span><br><span class=\"line\">[root@localhost yum.repos.d]yum clean all\t\t\t//清理缓存</span><br><span class=\"line\">[root@localhost yum.repos.d]yum makecache\t\t\t//生成缓存</span><br><span class=\"line\">[root@localhost yum.repos.d]yum <span class=\"built_in\">history</span>\t\t\t\t//查询安装历史</span><br><span class=\"line\">[root@localhost yum.repos.d]yum install --downloadonly package --downloaddir=/you/package/path</span><br><span class=\"line\">//这个命令是指只下载包和该包的依赖包到指定目录且不安装，该命令对于不联网的系统，解决依赖关系非常好用</span><br><span class=\"line\">[root@localhost yum.repos.d]yum·············\t\t\t\t</span><br></pre></td></tr></table></figure>\n<p>7，到这里我们的私仓就搭建完毕了，总结一下，该操作在红帽初级认证必考，所以一定要熟练。其次我们来说重要的点，在repo配置文件中，其实只需要repoid，baseurl，以及gpgcheck这三项，如果没有特殊要求的话，其次baseurl一定要带head，不然一定会报错的，就四种头：http，https，ftp和本地。其次好像centos8就把包的作用分的很清楚，8以下都是在一个Base文件下的，所以说有空还是要去了解下包名的意思。还有能够被识别的源目录下一定会有repodata和Packages两个文件夹，不然也会报错。上层文件名无所谓，一个baseurl可以写多条，意思是备份把，就是这一条url挂了，往下一条url找，但是问题是如果是该url没有找到对应的package会不会往下找下去，还是换其他的repo。最后说下dnf命令，8以上才有，两个命令基本上是一样。</p>\n"},{"title":"简单实现mysql主从","date":"2023-05-01T14:18:44.000Z","_content":"原理\n\n```bash\n两个日志，三个线程\nmaster节点上会为每一个slave的节点开启一个dump线程，用来提供master本机的二进制日志\nslave节点上的i/o线程会请求master节点dump线程传输的二进制事件，并将得到的内容写入replay日志中\nslave节点的SQL线程实时检测replay log内容，有更新则解析成sql语句还原到slave数据库中，这样保证主从数据同步\n```\nmaster节点配置\n```bash\nvim /etc/my.cnf\n[mysqld]                \nlog_bin=/mysql/log/binlog \n#启动并修改二进制日志目录,可选，不添加则为默认目录，这个binlog指的是日志命名\nserver-id=128  \n#为当前节点设置全局唯一ID，一般都是以ip地址结尾数字命名\n:wq\nmkdir -p /mysql/log  &&  chown -R mysql.mysql  /mysql\n#对应配置文件log-bin日志路径\ncreate user backuser@'172.18.0.%' identified by '123456'\n#这里是我的内网，如果是公网，应具体到某一个的32位ip（如果没有vpn的话），同时注意生产环境请不要设这么弱鸡的密码\ngrant replication slave on *.* to backuser@'172.18.0.%'\n授权，因为是要复制所有库表信息，这里给*.*，更为详细的权限分配这里暂且就不提\nsystemctl restart mysqld.service\n```\nslave节点配置\n```bash\nvim /etc/my.cnf\n[mysqld]\nserver-id=43\n#为当前节点设置一个全局惟的ID号\nlog-bin=/mysql/log/binlog\n#开启并修改slave节点二进制日志\nread_only=1\n#设置数据库只读，针对超级用户无效\n:wq\nsystemctl restart mysqld.service\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\n```\n\n执行一下sql语句，这里注意注释不要，如果懒的删除，可以复制到文件里，再mysql命令行界面source /you/path/file即可,也可以再bash下执行mysql -u user -p < /you/path/file\n```bash\nmysql -uroot -p 'enter you password'\nCHANGE MASTER TO MASTER_HOST='172.18.0.127', \n#指定master节点\nMASTER_USER='backuser', \n#连接用户\nMASTER_PASSWORD='123456', \n#连接密码\n#下面两条语句请根据master节点执行show master status给出的信息填写\nMASTER_LOG_FILE='binlog.xxxxxx', \n#从哪个二进制文件开始复制\nMASTER_LOG_POS=123;\n#指定同步开始的位置\n\n启动服务并查看状态\nstart slave;\nshow slave status;\n\n删除配置\nreset master all;\nreset slave all;\n\n查看端口是否监听\nss -tun\nnetstat -an | grep EST\n```\n\n总结：总体配置完成后，即可在master上进行写入操作,随后可查看slave是否同步，这里值得深思的是，如果mysql版本不同，请让低版本做master，高版本做slave，别问为什么，问就是百度。其次有一点要注意的是关于binlog的选择上，如果是binlog被清理过，那就需要执行mysqldump(ps不止这一种备份访问，看个人爱好)全量备份，还原到slave上，才能实现主从一致\n","source":"_posts/简单实现mysql主从.md","raw":"---\ntitle: 简单实现mysql主从\ndate: 2023-05-01 22:18:44\ntags:\n---\n原理\n\n```bash\n两个日志，三个线程\nmaster节点上会为每一个slave的节点开启一个dump线程，用来提供master本机的二进制日志\nslave节点上的i/o线程会请求master节点dump线程传输的二进制事件，并将得到的内容写入replay日志中\nslave节点的SQL线程实时检测replay log内容，有更新则解析成sql语句还原到slave数据库中，这样保证主从数据同步\n```\nmaster节点配置\n```bash\nvim /etc/my.cnf\n[mysqld]                \nlog_bin=/mysql/log/binlog \n#启动并修改二进制日志目录,可选，不添加则为默认目录，这个binlog指的是日志命名\nserver-id=128  \n#为当前节点设置全局唯一ID，一般都是以ip地址结尾数字命名\n:wq\nmkdir -p /mysql/log  &&  chown -R mysql.mysql  /mysql\n#对应配置文件log-bin日志路径\ncreate user backuser@'172.18.0.%' identified by '123456'\n#这里是我的内网，如果是公网，应具体到某一个的32位ip（如果没有vpn的话），同时注意生产环境请不要设这么弱鸡的密码\ngrant replication slave on *.* to backuser@'172.18.0.%'\n授权，因为是要复制所有库表信息，这里给*.*，更为详细的权限分配这里暂且就不提\nsystemctl restart mysqld.service\n```\nslave节点配置\n```bash\nvim /etc/my.cnf\n[mysqld]\nserver-id=43\n#为当前节点设置一个全局惟的ID号\nlog-bin=/mysql/log/binlog\n#开启并修改slave节点二进制日志\nread_only=1\n#设置数据库只读，针对超级用户无效\n:wq\nsystemctl restart mysqld.service\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\n```\n\n执行一下sql语句，这里注意注释不要，如果懒的删除，可以复制到文件里，再mysql命令行界面source /you/path/file即可,也可以再bash下执行mysql -u user -p < /you/path/file\n```bash\nmysql -uroot -p 'enter you password'\nCHANGE MASTER TO MASTER_HOST='172.18.0.127', \n#指定master节点\nMASTER_USER='backuser', \n#连接用户\nMASTER_PASSWORD='123456', \n#连接密码\n#下面两条语句请根据master节点执行show master status给出的信息填写\nMASTER_LOG_FILE='binlog.xxxxxx', \n#从哪个二进制文件开始复制\nMASTER_LOG_POS=123;\n#指定同步开始的位置\n\n启动服务并查看状态\nstart slave;\nshow slave status;\n\n删除配置\nreset master all;\nreset slave all;\n\n查看端口是否监听\nss -tun\nnetstat -an | grep EST\n```\n\n总结：总体配置完成后，即可在master上进行写入操作,随后可查看slave是否同步，这里值得深思的是，如果mysql版本不同，请让低版本做master，高版本做slave，别问为什么，问就是百度。其次有一点要注意的是关于binlog的选择上，如果是binlog被清理过，那就需要执行mysqldump(ps不止这一种备份访问，看个人爱好)全量备份，还原到slave上，才能实现主从一致\n","slug":"简单实现mysql主从","published":1,"updated":"2023-05-02T11:33:22.661Z","_id":"clh4zlppr0000mw8ffl9k8nf3","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>原理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个日志，三个线程</span><br><span class=\"line\">master节点上会为每一个slave的节点开启一个dump线程，用来提供master本机的二进制日志</span><br><span class=\"line\">slave节点上的i/o线程会请求master节点dump线程传输的二进制事件，并将得到的内容写入replay日志中</span><br><span class=\"line\">slave节点的SQL线程实时检测replay <span class=\"built_in\">log</span>内容，有更新则解析成sql语句还原到slave数据库中，这样保证主从数据同步</span><br></pre></td></tr></table></figure>\n<p>master节点配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]                </span><br><span class=\"line\">log_bin=/mysql/log/binlog </span><br><span class=\"line\"><span class=\"comment\">#启动并修改二进制日志目录,可选，不添加则为默认目录，这个binlog指的是日志命名</span></span><br><span class=\"line\">server-id=128  </span><br><span class=\"line\"><span class=\"comment\">#为当前节点设置全局唯一ID，一般都是以ip地址结尾数字命名</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log  &amp;&amp;  <span class=\"built_in\">chown</span> -R mysql.mysql  /mysql</span><br><span class=\"line\"><span class=\"comment\">#对应配置文件log-bin日志路径</span></span><br><span class=\"line\">create user backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#这里是我的内网，如果是公网，应具体到某一个的32位ip（如果没有vpn的话），同时注意生产环境请不要设这么弱鸡的密码</span></span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span></span><br><span class=\"line\">授权，因为是要复制所有库表信息，这里给*.*，更为详细的权限分配这里暂且就不提</span><br><span class=\"line\">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>\n<p>slave节点配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=43</span><br><span class=\"line\"><span class=\"comment\">#为当前节点设置一个全局惟的ID号</span></span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"><span class=\"comment\">#开启并修改slave节点二进制日志</span></span><br><span class=\"line\">read_only=1</span><br><span class=\"line\"><span class=\"comment\">#设置数据库只读，针对超级用户无效</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br></pre></td></tr></table></figure>\n\n<p>执行一下sql语句，这里注意注释不要，如果懒的删除，可以复制到文件里，再mysql命令行界面source &#x2F;you&#x2F;path&#x2F;file即可,也可以再bash下执行mysql -u user -p &lt; &#x2F;you&#x2F;path&#x2F;file</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p <span class=\"string\">&#x27;enter you password&#x27;</span></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.127&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#指定master节点</span></span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#连接用户</span></span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#连接密码</span></span><br><span class=\"line\"><span class=\"comment\">#下面两条语句请根据master节点执行show master status给出的信息填写</span></span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.xxxxxx&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#从哪个二进制文件开始复制</span></span><br><span class=\"line\">MASTER_LOG_POS=123;</span><br><span class=\"line\"><span class=\"comment\">#指定同步开始的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动服务并查看状态</span><br><span class=\"line\">start slave;</span><br><span class=\"line\">show slave status;</span><br><span class=\"line\"></span><br><span class=\"line\">删除配置</span><br><span class=\"line\">reset master all;</span><br><span class=\"line\">reset slave all;</span><br><span class=\"line\"></span><br><span class=\"line\">查看端口是否监听</span><br><span class=\"line\">ss -tun</span><br><span class=\"line\">netstat -an | grep EST</span><br></pre></td></tr></table></figure>\n\n<p>总结：总体配置完成后，即可在master上进行写入操作,随后可查看slave是否同步，这里值得深思的是，如果mysql版本不同，请让低版本做master，高版本做slave，别问为什么，问就是百度。其次有一点要注意的是关于binlog的选择上，如果是binlog被清理过，那就需要执行mysqldump(ps不止这一种备份访问，看个人爱好)全量备份，还原到slave上，才能实现主从一致</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>原理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两个日志，三个线程</span><br><span class=\"line\">master节点上会为每一个slave的节点开启一个dump线程，用来提供master本机的二进制日志</span><br><span class=\"line\">slave节点上的i/o线程会请求master节点dump线程传输的二进制事件，并将得到的内容写入replay日志中</span><br><span class=\"line\">slave节点的SQL线程实时检测replay <span class=\"built_in\">log</span>内容，有更新则解析成sql语句还原到slave数据库中，这样保证主从数据同步</span><br></pre></td></tr></table></figure>\n<p>master节点配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]                </span><br><span class=\"line\">log_bin=/mysql/log/binlog </span><br><span class=\"line\"><span class=\"comment\">#启动并修改二进制日志目录,可选，不添加则为默认目录，这个binlog指的是日志命名</span></span><br><span class=\"line\">server-id=128  </span><br><span class=\"line\"><span class=\"comment\">#为当前节点设置全局唯一ID，一般都是以ip地址结尾数字命名</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log  &amp;&amp;  <span class=\"built_in\">chown</span> -R mysql.mysql  /mysql</span><br><span class=\"line\"><span class=\"comment\">#对应配置文件log-bin日志路径</span></span><br><span class=\"line\">create user backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#这里是我的内网，如果是公网，应具体到某一个的32位ip（如果没有vpn的话），同时注意生产环境请不要设这么弱鸡的密码</span></span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span></span><br><span class=\"line\">授权，因为是要复制所有库表信息，这里给*.*，更为详细的权限分配这里暂且就不提</span><br><span class=\"line\">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>\n<p>slave节点配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=43</span><br><span class=\"line\"><span class=\"comment\">#为当前节点设置一个全局惟的ID号</span></span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"><span class=\"comment\">#开启并修改slave节点二进制日志</span></span><br><span class=\"line\">read_only=1</span><br><span class=\"line\"><span class=\"comment\">#设置数据库只读，针对超级用户无效</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br></pre></td></tr></table></figure>\n\n<p>执行一下sql语句，这里注意注释不要，如果懒的删除，可以复制到文件里，再mysql命令行界面source &#x2F;you&#x2F;path&#x2F;file即可,也可以再bash下执行mysql -u user -p &lt; &#x2F;you&#x2F;path&#x2F;file</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p <span class=\"string\">&#x27;enter you password&#x27;</span></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.127&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#指定master节点</span></span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#连接用户</span></span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#连接密码</span></span><br><span class=\"line\"><span class=\"comment\">#下面两条语句请根据master节点执行show master status给出的信息填写</span></span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.xxxxxx&#x27;</span>, </span><br><span class=\"line\"><span class=\"comment\">#从哪个二进制文件开始复制</span></span><br><span class=\"line\">MASTER_LOG_POS=123;</span><br><span class=\"line\"><span class=\"comment\">#指定同步开始的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动服务并查看状态</span><br><span class=\"line\">start slave;</span><br><span class=\"line\">show slave status;</span><br><span class=\"line\"></span><br><span class=\"line\">删除配置</span><br><span class=\"line\">reset master all;</span><br><span class=\"line\">reset slave all;</span><br><span class=\"line\"></span><br><span class=\"line\">查看端口是否监听</span><br><span class=\"line\">ss -tun</span><br><span class=\"line\">netstat -an | grep EST</span><br></pre></td></tr></table></figure>\n\n<p>总结：总体配置完成后，即可在master上进行写入操作,随后可查看slave是否同步，这里值得深思的是，如果mysql版本不同，请让低版本做master，高版本做slave，别问为什么，问就是百度。其次有一点要注意的是关于binlog的选择上，如果是binlog被清理过，那就需要执行mysqldump(ps不止这一种备份访问，看个人爱好)全量备份，还原到slave上，才能实现主从一致</p>\n"},{"title":"LVS-NAT和Keepalived的高可用","date":"2023-05-14T14:36:00.000Z","_content":"\n# LVS-NAT+Keepalived+LAMP+NFS+Mysql\n## 架构图如下\n![LVS-NAT+Keepalived高可用](/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png)\n## LVS\n```bash\nhostnamectl set-hostname LVS\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: true\n    ens37:\n      dhcp4: no\n      addresses:\n        - 192.168.59.100/24\n\n  version: 2\n#这里偷懒了。。\napt update && apt install ipvsadm keepalived\necho \"1\" > /proc/sys/net/ipv4/ip_forward\nvim /etc/keepalived/keepalived.conf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   router_id LVS_1\n}\nvrrp_instance VI_1 {\n    state MASTER\n    interface ens37\n    virtual_router_id 51\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.59.100\n        192.168.59.200\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    state MASTER\n    interface ens33\n    virtual_router_id 62\n    priority 100\n    advert_int 1\n    authentication {\n auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        172.18.0.100\n    }\n}\nvirtual_server 192.168.59.100 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n               connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n        }\n    }\n}\nvirtual_server 192.168.59.200 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n}\n#keepalived会根据配置文件配置LVS和LVS-BAK的ipvsadm\nsystemctl start keepalived \nsystemctl status keepalived \n```\n\n## LVS-BAK\n```bash\nhostnamectl set-hostname LVS-BAK\n#ip配置同LVS\napt update && apt install ipvsadm keepalived\necho \"1\" > /proc/sys/net/ipv4/ip_forward\nvim /etc/keepalived/keepalived.conf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   router_id LVS_2\n}\nvrrp_instance VI_1 {\n    state BACKUP\n    interface ens37\n    virtual_router_id 50\n    priority 99\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.59.100\n        192.168.59.200\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    state BACKUP\n    interface ens33\n    virtual_router_id 62\n    priority 99\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        172.18.0.100\n    }\n}\nvirtual_server 192.168.59.100 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n               connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n   }\n}\nvirtual_server 192.168.59.200 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n}\nsystemctl start keepalived \nsystemctl status keepalived \n```\n\n## Web1\n```bash\nhostnamectl set-hostname web1\napt update && apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y\nufw allow 80/tcp\nwget https://cn.wordpress.org/latest-zh_CN.zip\nroute del  default\nroute add default gw 172.18.0.100\nunzip wordpress-6.2-zh_CN.zip &>/dev/null\nrm /var/www/html/index.html\nmv wordpress/* /var/www/html/\nchown -R www-data.www-data wordpress\n#在配置完mysql后，请访问80端配置好wordpress连接\nsystemctl restart apache2.service\n\n#配置完NFS后才能做以下配置\nrsync -av /var/www/html/* 172.18.0.145:/data/wordpress\necho \"172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0\"  > /etc/fstab\nmount -a\n```\nWeb2\n```bash\nhostnamectl set-hostname web2\napt update && apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y\nufw allow 80/tcp\nroute del  default\nroute add default gw 172.18.0.100\n#web2同理\necho \"172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0\"  > /etc/fstab\nmount -a\n```\n## Master\n```bash\nhostnamectl set-hostname Master\napt update &&  apt install mysql-server -y\nufw allow 3306/tcp\nsed -i 's/^bind-address/#&/'  /etc/mysql/mysql.conf.d/mysqld.cnf\necho \"server-id = 147\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql\ncreate user backuser@'172.18.0.%' identified by '1234567890';\ngrant replication slave on *.* to backuser@'172.18.0.%';\nreset master;\ncreate user wordpress@'172.18.0.%' identified by 'wordpress123'\ngrant all on wordpress.* to wordpress@'172.18.0.%'\n```\n\n## Slave\n```bash\napt update &&  apt install mysql-server -y\nufw allow 3306/tcp\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 146\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql\n#复制以下语句\nCHANGE MASTER TO MASTER_HOST='172.18.0.147',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步\nshow slave status\\G\n#查看slave同步状态\nselect user,host from mysql.user;\n#测试woedpress账号是否同步\n```\n\n## NFS\n```bash\nhostnamectl set-hostname NFS\nmkdir -p /data/wordpress ; mkdir /etc/exports.d ;chown -R www-data.www-data /data\nvim /etc/exports.d/wordpress.exports\n/data/wordpress 172.18.0.0/24(rw)\n:wq\n\nexportfs -r\nexportfs -v\nsystemctl restart nfs-server.service\nwget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz\ntar xf sersync2.5.4_64bit_binary_stable_final.tar.gz\ncp -a GNU-Linux-x86   /usr/local/sersync\necho 'PATH=/usr/local/sersync:$PATH' > /etc/profile.d/sersync.sh\nsource /etc/profile.d/sersync.sh\nvim /usr/local/sersync/confxml.xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<head version=\"2.5\">\n    <host hostip=\"localhost\" port=\"8008\"></host>\n    <debug start=\"false\"/>\n    <fileSystem xfs=\"false\"/>\n    <filter start=\"false\">\n        <exclude expression=\"(.*)\\.svn\"></exclude>\n        <exclude expression=\"(.*)\\.gz\"></exclude>\n        <exclude expression=\"^info/*\"></exclude>\n        <exclude expression=\"^static/*\"></exclude>\n    </filter>\n    <inotify>\n        <delete start=\"true\"/>\n        <createFolder start=\"true\"/>\n        <createFile start=\"false\"/>\n        <closeWrite start=\"true\"/>\n        <moveFrom start=\"true\"/>\n        <moveTo start=\"true\"/>\n        <attrib start=\"true\"/>\n        <modify start=\"false\"/>\n    </inotify>\n\n    <sersync>\n        <localpath watch=\"/data/wordpress\">\n\t\t<!--本地需要监控的目录-->\n            <remote ip=\"172.18.0.148\" name=\"backup\"/>\n                      <!--rsync服务器IP，以及rsync模块名-->\n            <!--<remote ip=\"192.168.8.39\" name=\"tongbu\"/>-->\n            <!--<remote ip=\"192.168.8.40\" name=\"tongbu\"/>-->\n        </localpath>\n        <rsync>\n            <commonParams params=\"-artuz\"/>\n            <auth start=\"true\" users=\"rsyncuser\" passwordfile=\"/etc/rsync.pas\"/>\n\t\t\t\t\t\t\t<!--远程用户名，以及密码文件-->\n            <userDefinedPort start=\"false\" port=\"874\"/><!-- port=874 -->\n            <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n            <ssh start=\"false\"/>\n        </rsync>\n        <failLog path=\"/tmp/rsync_fail_log.sh\" timeToExecute=\"60\"/><!--default every 60mins execute once-->\n        <crontab start=\"false\" schedule=\"600\"><!--600mins-->\n            <crontabfilter start=\"false\">\n                <exclude expression=\"*.php\"></exclude>\n                <exclude expression=\"info/*\"></exclude>\n            </crontabfilter>\n        </crontab>\n        <plugin start=\"false\" name=\"command\"/>\n    </sersync>\n\n    <plugin name=\"command\">\n        <param prefix=\"/bin/sh\" suffix=\"\" ignoreError=\"true\"/>  <!--prefix /opt/tongbu/mmm.sh suffix-->\n        <filter start=\"false\">\n            <include expression=\"(.*)\\.php\"/>\n            <include expression=\"(.*)\\.sh\"/>\n        </filter>\n</plugin>\n\n    <plugin name=\"socket\">\n        <localpath watch=\"/opt/tongbu\">\n            <deshost ip=\"192.168.138.20\" port=\"8009\"/>\n        </localpath>\n    </plugin>\n    <plugin name=\"refreshCDN\">\n        <localpath watch=\"/data0/htdocs/cms.xoyo.com/site/\">\n            <cdninfo domainname=\"ccms.chinacache.com\" port=\"80\" username=\"xxxx\" passwd=\"xxxx\"/>\n            <sendurl base=\"http://pic.xoyo.com/cms\"/>\n            <regexurl regex=\"false\" match=\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"/>\n        </localpath>\n    </plugin>\n</head>\n\necho 123456 > /etc/rsync.pas\nchmod 600   /etc/rsync.pas\n\n#配置完rsync服务器后才能进行以下步骤\nrsync --password-file=/etc/rsync.pas rsync://rsymcser@172.18.0.148/backup\n#测试连通性，如果报错，请检查rsync配置是否出错\nsersync2 -dro /usr/local/sersync/confxml.xml\n#开启rsync自动监控\n```\n## NFS-BAK\n```bash\nhostnamectl set-hostname NFS-BAK\n#我所有主机已经安装了rsync服务了\nvim /etc/rsyncd.conf \nuid = root\ngid = root\nmax connections = 0\nignore errors\nexclude = lost+found/\nlog file = /var/log/rsyncd.log\npid file = /var/run/rsyncd.pid\nlock file = /var/run/rsyncd.lock\nreverse lookup = no\n[backup]\npath = /data/wordpress/\ncomment = backup dir\nread only = no\nauth users = rsyncuser\nsecrets file = /etc/rsync.pas\n\nmkdir -p /data/wordpress/\necho \"rsyncuser:123456\" > /etc/rsync.pas\nchmod 600  /etc/rsync.pas\nsystemctl restart rsync\n```\n\n## 测试：\n```bash\n#在NFS-BAK上查看\nls /data/wordpress\n#此刻没有意外的话你已经同步了 172.18.0.145上 NFSserver 下 /data/wordpress 的文件\ntree   /data/wordpress/wp-content/uploads/\n#然后在Web1或Web2的wordpress上传图片，查看172.18.0.148也就是NFS-BAK是否同步\n\n#在LVS上down掉keepalived\nsystemctl stop keepalived \n#在lvs上停掉keepalived服务,查看NVIP是否漂移，备份机是否生效\ncurl 172.18.0.100\n#不出意外的话，依旧会返回wordpress网站信息\n```\n## 总结：\n### 到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\n","source":"_posts/LVS-NAT和Keepalived的高可用.md","raw":"---\ntitle: LVS-NAT和Keepalived的高可用\ndate: 2023-05-14 22:36:00\ntags:\n---\n\n# LVS-NAT+Keepalived+LAMP+NFS+Mysql\n## 架构图如下\n![LVS-NAT+Keepalived高可用](/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png)\n## LVS\n```bash\nhostnamectl set-hostname LVS\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: true\n    ens37:\n      dhcp4: no\n      addresses:\n        - 192.168.59.100/24\n\n  version: 2\n#这里偷懒了。。\napt update && apt install ipvsadm keepalived\necho \"1\" > /proc/sys/net/ipv4/ip_forward\nvim /etc/keepalived/keepalived.conf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   router_id LVS_1\n}\nvrrp_instance VI_1 {\n    state MASTER\n    interface ens37\n    virtual_router_id 51\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.59.100\n        192.168.59.200\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    state MASTER\n    interface ens33\n    virtual_router_id 62\n    priority 100\n    advert_int 1\n    authentication {\n auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        172.18.0.100\n    }\n}\nvirtual_server 192.168.59.100 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n               connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n        }\n    }\n}\nvirtual_server 192.168.59.200 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n}\n#keepalived会根据配置文件配置LVS和LVS-BAK的ipvsadm\nsystemctl start keepalived \nsystemctl status keepalived \n```\n\n## LVS-BAK\n```bash\nhostnamectl set-hostname LVS-BAK\n#ip配置同LVS\napt update && apt install ipvsadm keepalived\necho \"1\" > /proc/sys/net/ipv4/ip_forward\nvim /etc/keepalived/keepalived.conf\n! Configuration File for keepalived\nglobal_defs {\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   router_id LVS_2\n}\nvrrp_instance VI_1 {\n    state BACKUP\n    interface ens37\n    virtual_router_id 50\n    priority 99\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.59.100\n        192.168.59.200\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    state BACKUP\n    interface ens33\n    virtual_router_id 62\n    priority 99\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        172.18.0.100\n    }\n}\nvirtual_server 192.168.59.100 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n               connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n   }\n}\nvirtual_server 192.168.59.200 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 172.18.0.142 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 172.18.0.141 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n}\nsystemctl start keepalived \nsystemctl status keepalived \n```\n\n## Web1\n```bash\nhostnamectl set-hostname web1\napt update && apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y\nufw allow 80/tcp\nwget https://cn.wordpress.org/latest-zh_CN.zip\nroute del  default\nroute add default gw 172.18.0.100\nunzip wordpress-6.2-zh_CN.zip &>/dev/null\nrm /var/www/html/index.html\nmv wordpress/* /var/www/html/\nchown -R www-data.www-data wordpress\n#在配置完mysql后，请访问80端配置好wordpress连接\nsystemctl restart apache2.service\n\n#配置完NFS后才能做以下配置\nrsync -av /var/www/html/* 172.18.0.145:/data/wordpress\necho \"172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0\"  > /etc/fstab\nmount -a\n```\nWeb2\n```bash\nhostnamectl set-hostname web2\napt update && apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y\nufw allow 80/tcp\nroute del  default\nroute add default gw 172.18.0.100\n#web2同理\necho \"172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0\"  > /etc/fstab\nmount -a\n```\n## Master\n```bash\nhostnamectl set-hostname Master\napt update &&  apt install mysql-server -y\nufw allow 3306/tcp\nsed -i 's/^bind-address/#&/'  /etc/mysql/mysql.conf.d/mysqld.cnf\necho \"server-id = 147\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql\ncreate user backuser@'172.18.0.%' identified by '1234567890';\ngrant replication slave on *.* to backuser@'172.18.0.%';\nreset master;\ncreate user wordpress@'172.18.0.%' identified by 'wordpress123'\ngrant all on wordpress.* to wordpress@'172.18.0.%'\n```\n\n## Slave\n```bash\napt update &&  apt install mysql-server -y\nufw allow 3306/tcp\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 146\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql\n#复制以下语句\nCHANGE MASTER TO MASTER_HOST='172.18.0.147',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步\nshow slave status\\G\n#查看slave同步状态\nselect user,host from mysql.user;\n#测试woedpress账号是否同步\n```\n\n## NFS\n```bash\nhostnamectl set-hostname NFS\nmkdir -p /data/wordpress ; mkdir /etc/exports.d ;chown -R www-data.www-data /data\nvim /etc/exports.d/wordpress.exports\n/data/wordpress 172.18.0.0/24(rw)\n:wq\n\nexportfs -r\nexportfs -v\nsystemctl restart nfs-server.service\nwget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz\ntar xf sersync2.5.4_64bit_binary_stable_final.tar.gz\ncp -a GNU-Linux-x86   /usr/local/sersync\necho 'PATH=/usr/local/sersync:$PATH' > /etc/profile.d/sersync.sh\nsource /etc/profile.d/sersync.sh\nvim /usr/local/sersync/confxml.xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<head version=\"2.5\">\n    <host hostip=\"localhost\" port=\"8008\"></host>\n    <debug start=\"false\"/>\n    <fileSystem xfs=\"false\"/>\n    <filter start=\"false\">\n        <exclude expression=\"(.*)\\.svn\"></exclude>\n        <exclude expression=\"(.*)\\.gz\"></exclude>\n        <exclude expression=\"^info/*\"></exclude>\n        <exclude expression=\"^static/*\"></exclude>\n    </filter>\n    <inotify>\n        <delete start=\"true\"/>\n        <createFolder start=\"true\"/>\n        <createFile start=\"false\"/>\n        <closeWrite start=\"true\"/>\n        <moveFrom start=\"true\"/>\n        <moveTo start=\"true\"/>\n        <attrib start=\"true\"/>\n        <modify start=\"false\"/>\n    </inotify>\n\n    <sersync>\n        <localpath watch=\"/data/wordpress\">\n\t\t<!--本地需要监控的目录-->\n            <remote ip=\"172.18.0.148\" name=\"backup\"/>\n                      <!--rsync服务器IP，以及rsync模块名-->\n            <!--<remote ip=\"192.168.8.39\" name=\"tongbu\"/>-->\n            <!--<remote ip=\"192.168.8.40\" name=\"tongbu\"/>-->\n        </localpath>\n        <rsync>\n            <commonParams params=\"-artuz\"/>\n            <auth start=\"true\" users=\"rsyncuser\" passwordfile=\"/etc/rsync.pas\"/>\n\t\t\t\t\t\t\t<!--远程用户名，以及密码文件-->\n            <userDefinedPort start=\"false\" port=\"874\"/><!-- port=874 -->\n            <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n            <ssh start=\"false\"/>\n        </rsync>\n        <failLog path=\"/tmp/rsync_fail_log.sh\" timeToExecute=\"60\"/><!--default every 60mins execute once-->\n        <crontab start=\"false\" schedule=\"600\"><!--600mins-->\n            <crontabfilter start=\"false\">\n                <exclude expression=\"*.php\"></exclude>\n                <exclude expression=\"info/*\"></exclude>\n            </crontabfilter>\n        </crontab>\n        <plugin start=\"false\" name=\"command\"/>\n    </sersync>\n\n    <plugin name=\"command\">\n        <param prefix=\"/bin/sh\" suffix=\"\" ignoreError=\"true\"/>  <!--prefix /opt/tongbu/mmm.sh suffix-->\n        <filter start=\"false\">\n            <include expression=\"(.*)\\.php\"/>\n            <include expression=\"(.*)\\.sh\"/>\n        </filter>\n</plugin>\n\n    <plugin name=\"socket\">\n        <localpath watch=\"/opt/tongbu\">\n            <deshost ip=\"192.168.138.20\" port=\"8009\"/>\n        </localpath>\n    </plugin>\n    <plugin name=\"refreshCDN\">\n        <localpath watch=\"/data0/htdocs/cms.xoyo.com/site/\">\n            <cdninfo domainname=\"ccms.chinacache.com\" port=\"80\" username=\"xxxx\" passwd=\"xxxx\"/>\n            <sendurl base=\"http://pic.xoyo.com/cms\"/>\n            <regexurl regex=\"false\" match=\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"/>\n        </localpath>\n    </plugin>\n</head>\n\necho 123456 > /etc/rsync.pas\nchmod 600   /etc/rsync.pas\n\n#配置完rsync服务器后才能进行以下步骤\nrsync --password-file=/etc/rsync.pas rsync://rsymcser@172.18.0.148/backup\n#测试连通性，如果报错，请检查rsync配置是否出错\nsersync2 -dro /usr/local/sersync/confxml.xml\n#开启rsync自动监控\n```\n## NFS-BAK\n```bash\nhostnamectl set-hostname NFS-BAK\n#我所有主机已经安装了rsync服务了\nvim /etc/rsyncd.conf \nuid = root\ngid = root\nmax connections = 0\nignore errors\nexclude = lost+found/\nlog file = /var/log/rsyncd.log\npid file = /var/run/rsyncd.pid\nlock file = /var/run/rsyncd.lock\nreverse lookup = no\n[backup]\npath = /data/wordpress/\ncomment = backup dir\nread only = no\nauth users = rsyncuser\nsecrets file = /etc/rsync.pas\n\nmkdir -p /data/wordpress/\necho \"rsyncuser:123456\" > /etc/rsync.pas\nchmod 600  /etc/rsync.pas\nsystemctl restart rsync\n```\n\n## 测试：\n```bash\n#在NFS-BAK上查看\nls /data/wordpress\n#此刻没有意外的话你已经同步了 172.18.0.145上 NFSserver 下 /data/wordpress 的文件\ntree   /data/wordpress/wp-content/uploads/\n#然后在Web1或Web2的wordpress上传图片，查看172.18.0.148也就是NFS-BAK是否同步\n\n#在LVS上down掉keepalived\nsystemctl stop keepalived \n#在lvs上停掉keepalived服务,查看NVIP是否漂移，备份机是否生效\ncurl 172.18.0.100\n#不出意外的话，依旧会返回wordpress网站信息\n```\n## 总结：\n### 到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\n","slug":"LVS-NAT和Keepalived的高可用","published":1,"updated":"2023-05-28T02:21:28.627Z","_id":"clhpyh4qc0000md8f16lr0nqn","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"LVS-NAT-Keepalived-LAMP-NFS-Mysql\"><a href=\"#LVS-NAT-Keepalived-LAMP-NFS-Mysql\" class=\"headerlink\" title=\"LVS-NAT+Keepalived+LAMP+NFS+Mysql\"></a>LVS-NAT+Keepalived+LAMP+NFS+Mysql</h1><h2 id=\"架构图如下\"><a href=\"#架构图如下\" class=\"headerlink\" title=\"架构图如下\"></a>架构图如下</h2><p><img src=\"/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png\" alt=\"LVS-NAT+Keepalived高可用\"></p>\n<h2 id=\"LVS\"><a href=\"#LVS\" class=\"headerlink\" title=\"LVS\"></a>LVS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LVS</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: <span class=\"literal\">true</span></span><br><span class=\"line\">    ens37:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 192.168.59.100/24</span><br><span class=\"line\"></span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"><span class=\"comment\">#这里偷懒了。。</span></span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm keepalived</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens37</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.59.100</span><br><span class=\"line\">        192.168.59.200</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\"> auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        172.18.0.100</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.100 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">               connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.200 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#keepalived会根据配置文件配置LVS和LVS-BAK的ipvsadm</span></span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LVS-BAK\"><a href=\"#LVS-BAK\" class=\"headerlink\" title=\"LVS-BAK\"></a>LVS-BAK</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LVS-BAK</span><br><span class=\"line\"><span class=\"comment\">#ip配置同LVS</span></span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm keepalived</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens37</span><br><span class=\"line\">    virtual_router_id 50</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.59.100</span><br><span class=\"line\">        192.168.59.200</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        172.18.0.100</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.100 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">               connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.200 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Web1\"><a href=\"#Web1\" class=\"headerlink\" title=\"Web1\"></a>Web1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname web1</span><br><span class=\"line\">apt update &amp;&amp; apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y</span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\">wget https://cn.wordpress.org/latest-zh_CN.zip</span><br><span class=\"line\">route del  default</span><br><span class=\"line\">route add default gw 172.18.0.100</span><br><span class=\"line\">unzip wordpress-6.2-zh_CN.zip &amp;&gt;/dev/null</span><br><span class=\"line\"><span class=\"built_in\">rm</span> /var/www/html/index.html</span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/* /var/www/html/</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www-data.www-data wordpress</span><br><span class=\"line\"><span class=\"comment\">#在配置完mysql后，请访问80端配置好wordpress连接</span></span><br><span class=\"line\">systemctl restart apache2.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置完NFS后才能做以下配置</span></span><br><span class=\"line\">rsync -av /var/www/html/* 172.18.0.145:/data/wordpress</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0&quot;</span>  &gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<p>Web2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname web2</span><br><span class=\"line\">apt update &amp;&amp; apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y</span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\">route del  default</span><br><span class=\"line\">route add default gw 172.18.0.100</span><br><span class=\"line\"><span class=\"comment\">#web2同理</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0&quot;</span>  &gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Master</span><br><span class=\"line\">apt update &amp;&amp;  apt install mysql-server -y</span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span>  /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;server-id = 147&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\">create user backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;1234567890&#x27;</span>;</span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span>;</span><br><span class=\"line\">reset master;</span><br><span class=\"line\">create user wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;wordpress123&#x27;</span></span><br><span class=\"line\">grant all on wordpress.* to wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Slave\"><a href=\"#Slave\" class=\"headerlink\" title=\"Slave\"></a>Slave</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp;  apt install mysql-server -y</span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 146\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\"><span class=\"comment\">#复制以下语句</span></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.147&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"><span class=\"comment\">#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步</span></span><br><span class=\"line\">show slave status\\G</span><br><span class=\"line\"><span class=\"comment\">#查看slave同步状态</span></span><br><span class=\"line\">select user,host from mysql.user;</span><br><span class=\"line\"><span class=\"comment\">#测试woedpress账号是否同步</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname NFS</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress ; <span class=\"built_in\">mkdir</span> /etc/exports.d ;<span class=\"built_in\">chown</span> -R www-data.www-data /data</span><br><span class=\"line\">vim /etc/exports.d/wordpress.exports</span><br><span class=\"line\">/data/wordpress 172.18.0.0/24(rw)</span><br><span class=\"line\">:wq</span><br><span class=\"line\"></span><br><span class=\"line\">exportfs -r</span><br><span class=\"line\">exportfs -v</span><br><span class=\"line\">systemctl restart nfs-server.service</span><br><span class=\"line\">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a GNU-Linux-x86   /usr/local/sersync</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/sersync:$PATH&#x27;</span> &gt; /etc/profile.d/sersync.sh</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/sersync.sh</span><br><span class=\"line\">vim /usr/local/sersync/confxml.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>?&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span> version=<span class=\"string\">&quot;2.5&quot;</span>&gt;</span><br><span class=\"line\">    &lt;host hostip=<span class=\"string\">&quot;localhost&quot;</span> port=<span class=\"string\">&quot;8008&quot;</span>&gt;&lt;/host&gt;</span><br><span class=\"line\">    &lt;debug start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;fileSystem xfs=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;filter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;(.*)\\.svn&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;(.*)\\.gz&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;^info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;inotify&gt;</span><br><span class=\"line\">        &lt;delete start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFolder start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFile start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;closeWrite start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveFrom start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveTo start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;attrib start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;modify start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/inotify&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;sersync&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data/wordpress&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;!--本地需要监控的目录--&gt;</span><br><span class=\"line\">            &lt;remote ip=<span class=\"string\">&quot;172.18.0.148&quot;</span> name=<span class=\"string\">&quot;backup&quot;</span>/&gt;</span><br><span class=\"line\">                      &lt;!--rsync服务器IP，以及rsync模块名--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.39&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.40&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">        &lt;rsync&gt;</span><br><span class=\"line\">            &lt;commonParams params=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;auth start=<span class=\"string\">&quot;true&quot;</span> <span class=\"built_in\">users</span>=<span class=\"string\">&quot;rsyncuser&quot;</span> passwordfile=<span class=\"string\">&quot;/etc/rsync.pas&quot;</span>/&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t&lt;!--远程用户名，以及密码文件--&gt;</span><br><span class=\"line\">            &lt;userDefinedPort start=<span class=\"string\">&quot;false&quot;</span> port=<span class=\"string\">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class=\"line\">            &lt;<span class=\"built_in\">timeout</span> start=<span class=\"string\">&quot;false&quot;</span> time=<span class=\"string\">&quot;100&quot;</span>/&gt;&lt;!-- <span class=\"built_in\">timeout</span>=100 --&gt;</span><br><span class=\"line\">            &lt;ssh start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/rsync&gt;</span><br><span class=\"line\">        &lt;failLog path=<span class=\"string\">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class=\"string\">&quot;60&quot;</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class=\"line\">        &lt;crontab start=<span class=\"string\">&quot;false&quot;</span> schedule=<span class=\"string\">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt;</span><br><span class=\"line\">            &lt;crontabfilter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">            &lt;/crontabfilter&gt;</span><br><span class=\"line\">        &lt;/crontab&gt;</span><br><span class=\"line\">        &lt;plugin start=<span class=\"string\">&quot;false&quot;</span> name=<span class=\"string\">&quot;command&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/sersync&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;command&quot;</span>&gt;</span><br><span class=\"line\">        &lt;param prefix=<span class=\"string\">&quot;/bin/sh&quot;</span> suffix=<span class=\"string\">&quot;&quot;</span> ignoreError=<span class=\"string\">&quot;true&quot;</span>/&gt;  &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class=\"line\">        &lt;filter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.php&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.sh&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/filter&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;socket&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/opt/tongbu&quot;</span>&gt;</span><br><span class=\"line\">            &lt;deshost ip=<span class=\"string\">&quot;192.168.138.20&quot;</span> port=<span class=\"string\">&quot;8009&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;refreshCDN&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br><span class=\"line\">            &lt;cdninfo domainname=<span class=\"string\">&quot;ccms.chinacache.com&quot;</span> port=<span class=\"string\">&quot;80&quot;</span> username=<span class=\"string\">&quot;xxxx&quot;</span> passwd=<span class=\"string\">&quot;xxxx&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;sendurl base=<span class=\"string\">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;regexurl regex=<span class=\"string\">&quot;false&quot;</span> match=<span class=\"string\">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123456 &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600   /etc/rsync.pas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置完rsync服务器后才能进行以下步骤</span></span><br><span class=\"line\">rsync --password-file=/etc/rsync.pas rsync://rsymcser@172.18.0.148/backup</span><br><span class=\"line\"><span class=\"comment\">#测试连通性，如果报错，请检查rsync配置是否出错</span></span><br><span class=\"line\">sersync2 -dro /usr/local/sersync/confxml.xml</span><br><span class=\"line\"><span class=\"comment\">#开启rsync自动监控</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"NFS-BAK\"><a href=\"#NFS-BAK\" class=\"headerlink\" title=\"NFS-BAK\"></a>NFS-BAK</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname NFS-BAK</span><br><span class=\"line\"><span class=\"comment\">#我所有主机已经安装了rsync服务了</span></span><br><span class=\"line\">vim /etc/rsyncd.conf </span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\">max connections = 0</span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">exclude = lost+found/</span><br><span class=\"line\"><span class=\"built_in\">log</span> file = /var/log/rsyncd.log</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid</span><br><span class=\"line\">lock file = /var/run/rsyncd.lock</span><br><span class=\"line\">reverse lookup = no</span><br><span class=\"line\">[backup]</span><br><span class=\"line\">path = /data/wordpress/</span><br><span class=\"line\">comment = backup <span class=\"built_in\">dir</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> only = no</span><br><span class=\"line\">auth <span class=\"built_in\">users</span> = rsyncuser</span><br><span class=\"line\">secrets file = /etc/rsync.pas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;rsyncuser:123456&quot;</span> &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600  /etc/rsync.pas</span><br><span class=\"line\">systemctl restart rsync</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在NFS-BAK上查看</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> /data/wordpress</span><br><span class=\"line\"><span class=\"comment\">#此刻没有意外的话你已经同步了 172.18.0.145上 NFSserver 下 /data/wordpress 的文件</span></span><br><span class=\"line\">tree   /data/wordpress/wp-content/uploads/</span><br><span class=\"line\"><span class=\"comment\">#然后在Web1或Web2的wordpress上传图片，查看172.18.0.148也就是NFS-BAK是否同步</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在LVS上down掉keepalived</span></span><br><span class=\"line\">systemctl stop keepalived </span><br><span class=\"line\"><span class=\"comment\">#在lvs上停掉keepalived服务,查看NVIP是否漂移，备份机是否生效</span></span><br><span class=\"line\">curl 172.18.0.100</span><br><span class=\"line\"><span class=\"comment\">#不出意外的话，依旧会返回wordpress网站信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><h3 id=\"到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel-需要编译内核-模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\"><a href=\"#到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel-需要编译内核-模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\" class=\"headerlink\" title=\"到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\"></a>到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG</h3>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"LVS-NAT-Keepalived-LAMP-NFS-Mysql\"><a href=\"#LVS-NAT-Keepalived-LAMP-NFS-Mysql\" class=\"headerlink\" title=\"LVS-NAT+Keepalived+LAMP+NFS+Mysql\"></a>LVS-NAT+Keepalived+LAMP+NFS+Mysql</h1><h2 id=\"架构图如下\"><a href=\"#架构图如下\" class=\"headerlink\" title=\"架构图如下\"></a>架构图如下</h2><p><img src=\"/images/LVS-NAT+LAMP+MYSQL+NFS+Keepalived.png\" alt=\"LVS-NAT+Keepalived高可用\"></p>\n<h2 id=\"LVS\"><a href=\"#LVS\" class=\"headerlink\" title=\"LVS\"></a>LVS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LVS</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: <span class=\"literal\">true</span></span><br><span class=\"line\">    ens37:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 192.168.59.100/24</span><br><span class=\"line\"></span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"><span class=\"comment\">#这里偷懒了。。</span></span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm keepalived</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens37</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.59.100</span><br><span class=\"line\">        192.168.59.200</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\"> auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        172.18.0.100</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.100 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">               connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.200 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#keepalived会根据配置文件配置LVS和LVS-BAK的ipvsadm</span></span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LVS-BAK\"><a href=\"#LVS-BAK\" class=\"headerlink\" title=\"LVS-BAK\"></a>LVS-BAK</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LVS-BAK</span><br><span class=\"line\"><span class=\"comment\">#ip配置同LVS</span></span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm keepalived</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens37</span><br><span class=\"line\">    virtual_router_id 50</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.59.100</span><br><span class=\"line\">        192.168.59.200</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens33</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        172.18.0.100</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.100 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">               connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.200 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 172.18.0.142 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 172.18.0.141 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Web1\"><a href=\"#Web1\" class=\"headerlink\" title=\"Web1\"></a>Web1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname web1</span><br><span class=\"line\">apt update &amp;&amp; apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y</span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\">wget https://cn.wordpress.org/latest-zh_CN.zip</span><br><span class=\"line\">route del  default</span><br><span class=\"line\">route add default gw 172.18.0.100</span><br><span class=\"line\">unzip wordpress-6.2-zh_CN.zip &amp;&gt;/dev/null</span><br><span class=\"line\"><span class=\"built_in\">rm</span> /var/www/html/index.html</span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/* /var/www/html/</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www-data.www-data wordpress</span><br><span class=\"line\"><span class=\"comment\">#在配置完mysql后，请访问80端配置好wordpress连接</span></span><br><span class=\"line\">systemctl restart apache2.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置完NFS后才能做以下配置</span></span><br><span class=\"line\">rsync -av /var/www/html/* 172.18.0.145:/data/wordpress</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0&quot;</span>  &gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<p>Web2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname web2</span><br><span class=\"line\">apt update &amp;&amp; apt install apache2  php-mysql php nfs-kernel-server libapache2-mod-php zip -y</span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\">route del  default</span><br><span class=\"line\">route add default gw 172.18.0.100</span><br><span class=\"line\"><span class=\"comment\">#web2同理</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.145:/data/wordpress /var/www/html/ nfs _netdev 0 0&quot;</span>  &gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Master</span><br><span class=\"line\">apt update &amp;&amp;  apt install mysql-server -y</span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span>  /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;server-id = 147&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\">create user backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;1234567890&#x27;</span>;</span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span>;</span><br><span class=\"line\">reset master;</span><br><span class=\"line\">create user wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;wordpress123&#x27;</span></span><br><span class=\"line\">grant all on wordpress.* to wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Slave\"><a href=\"#Slave\" class=\"headerlink\" title=\"Slave\"></a>Slave</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp;  apt install mysql-server -y</span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 146\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\"><span class=\"comment\">#复制以下语句</span></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.147&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"><span class=\"comment\">#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步</span></span><br><span class=\"line\">show slave status\\G</span><br><span class=\"line\"><span class=\"comment\">#查看slave同步状态</span></span><br><span class=\"line\">select user,host from mysql.user;</span><br><span class=\"line\"><span class=\"comment\">#测试woedpress账号是否同步</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname NFS</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress ; <span class=\"built_in\">mkdir</span> /etc/exports.d ;<span class=\"built_in\">chown</span> -R www-data.www-data /data</span><br><span class=\"line\">vim /etc/exports.d/wordpress.exports</span><br><span class=\"line\">/data/wordpress 172.18.0.0/24(rw)</span><br><span class=\"line\">:wq</span><br><span class=\"line\"></span><br><span class=\"line\">exportfs -r</span><br><span class=\"line\">exportfs -v</span><br><span class=\"line\">systemctl restart nfs-server.service</span><br><span class=\"line\">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a GNU-Linux-x86   /usr/local/sersync</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/sersync:$PATH&#x27;</span> &gt; /etc/profile.d/sersync.sh</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/sersync.sh</span><br><span class=\"line\">vim /usr/local/sersync/confxml.xml</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;ISO-8859-1&quot;</span>?&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span> version=<span class=\"string\">&quot;2.5&quot;</span>&gt;</span><br><span class=\"line\">    &lt;host hostip=<span class=\"string\">&quot;localhost&quot;</span> port=<span class=\"string\">&quot;8008&quot;</span>&gt;&lt;/host&gt;</span><br><span class=\"line\">    &lt;debug start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;fileSystem xfs=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;filter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;(.*)\\.svn&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;(.*)\\.gz&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;^info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;inotify&gt;</span><br><span class=\"line\">        &lt;delete start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFolder start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFile start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;closeWrite start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveFrom start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveTo start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;attrib start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;modify start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/inotify&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;sersync&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data/wordpress&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;!--本地需要监控的目录--&gt;</span><br><span class=\"line\">            &lt;remote ip=<span class=\"string\">&quot;172.18.0.148&quot;</span> name=<span class=\"string\">&quot;backup&quot;</span>/&gt;</span><br><span class=\"line\">                      &lt;!--rsync服务器IP，以及rsync模块名--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.39&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.40&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">        &lt;rsync&gt;</span><br><span class=\"line\">            &lt;commonParams params=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;auth start=<span class=\"string\">&quot;true&quot;</span> <span class=\"built_in\">users</span>=<span class=\"string\">&quot;rsyncuser&quot;</span> passwordfile=<span class=\"string\">&quot;/etc/rsync.pas&quot;</span>/&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t&lt;!--远程用户名，以及密码文件--&gt;</span><br><span class=\"line\">            &lt;userDefinedPort start=<span class=\"string\">&quot;false&quot;</span> port=<span class=\"string\">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class=\"line\">            &lt;<span class=\"built_in\">timeout</span> start=<span class=\"string\">&quot;false&quot;</span> time=<span class=\"string\">&quot;100&quot;</span>/&gt;&lt;!-- <span class=\"built_in\">timeout</span>=100 --&gt;</span><br><span class=\"line\">            &lt;ssh start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/rsync&gt;</span><br><span class=\"line\">        &lt;failLog path=<span class=\"string\">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class=\"string\">&quot;60&quot;</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class=\"line\">        &lt;crontab start=<span class=\"string\">&quot;false&quot;</span> schedule=<span class=\"string\">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt;</span><br><span class=\"line\">            &lt;crontabfilter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">            &lt;/crontabfilter&gt;</span><br><span class=\"line\">        &lt;/crontab&gt;</span><br><span class=\"line\">        &lt;plugin start=<span class=\"string\">&quot;false&quot;</span> name=<span class=\"string\">&quot;command&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/sersync&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;command&quot;</span>&gt;</span><br><span class=\"line\">        &lt;param prefix=<span class=\"string\">&quot;/bin/sh&quot;</span> suffix=<span class=\"string\">&quot;&quot;</span> ignoreError=<span class=\"string\">&quot;true&quot;</span>/&gt;  &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class=\"line\">        &lt;filter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.php&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.sh&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/filter&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;socket&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/opt/tongbu&quot;</span>&gt;</span><br><span class=\"line\">            &lt;deshost ip=<span class=\"string\">&quot;192.168.138.20&quot;</span> port=<span class=\"string\">&quot;8009&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;refreshCDN&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br><span class=\"line\">            &lt;cdninfo domainname=<span class=\"string\">&quot;ccms.chinacache.com&quot;</span> port=<span class=\"string\">&quot;80&quot;</span> username=<span class=\"string\">&quot;xxxx&quot;</span> passwd=<span class=\"string\">&quot;xxxx&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;sendurl base=<span class=\"string\">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;regexurl regex=<span class=\"string\">&quot;false&quot;</span> match=<span class=\"string\">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123456 &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600   /etc/rsync.pas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置完rsync服务器后才能进行以下步骤</span></span><br><span class=\"line\">rsync --password-file=/etc/rsync.pas rsync://rsymcser@172.18.0.148/backup</span><br><span class=\"line\"><span class=\"comment\">#测试连通性，如果报错，请检查rsync配置是否出错</span></span><br><span class=\"line\">sersync2 -dro /usr/local/sersync/confxml.xml</span><br><span class=\"line\"><span class=\"comment\">#开启rsync自动监控</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"NFS-BAK\"><a href=\"#NFS-BAK\" class=\"headerlink\" title=\"NFS-BAK\"></a>NFS-BAK</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname NFS-BAK</span><br><span class=\"line\"><span class=\"comment\">#我所有主机已经安装了rsync服务了</span></span><br><span class=\"line\">vim /etc/rsyncd.conf </span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\">max connections = 0</span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">exclude = lost+found/</span><br><span class=\"line\"><span class=\"built_in\">log</span> file = /var/log/rsyncd.log</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid</span><br><span class=\"line\">lock file = /var/run/rsyncd.lock</span><br><span class=\"line\">reverse lookup = no</span><br><span class=\"line\">[backup]</span><br><span class=\"line\">path = /data/wordpress/</span><br><span class=\"line\">comment = backup <span class=\"built_in\">dir</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> only = no</span><br><span class=\"line\">auth <span class=\"built_in\">users</span> = rsyncuser</span><br><span class=\"line\">secrets file = /etc/rsync.pas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;rsyncuser:123456&quot;</span> &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600  /etc/rsync.pas</span><br><span class=\"line\">systemctl restart rsync</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在NFS-BAK上查看</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> /data/wordpress</span><br><span class=\"line\"><span class=\"comment\">#此刻没有意外的话你已经同步了 172.18.0.145上 NFSserver 下 /data/wordpress 的文件</span></span><br><span class=\"line\">tree   /data/wordpress/wp-content/uploads/</span><br><span class=\"line\"><span class=\"comment\">#然后在Web1或Web2的wordpress上传图片，查看172.18.0.148也就是NFS-BAK是否同步</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在LVS上down掉keepalived</span></span><br><span class=\"line\">systemctl stop keepalived </span><br><span class=\"line\"><span class=\"comment\">#在lvs上停掉keepalived服务,查看NVIP是否漂移，备份机是否生效</span></span><br><span class=\"line\">curl 172.18.0.100</span><br><span class=\"line\"><span class=\"comment\">#不出意外的话，依旧会返回wordpress网站信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><h3 id=\"到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel-需要编译内核-模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\"><a href=\"#到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel-需要编译内核-模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\" class=\"headerlink\" title=\"到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG\"></a>到这里我们就完成了LVS-NAT和keepalived的高可用和负载均衡配置方案了，当然这仅仅是NAT，还有DR和tunnel以及fulltunnel (需要编译内核)模式。这种架构的优点是具有高可用性和负载均衡能力，可以在服务器出现故障时自动切换到其他正常的服务器上，从而保证服务的稳定性和可用性。此外，通过NFS文件共享woredpress的文件，还实现了数据的共享和同步，提高了系统的可靠性和灵活性。同时mysql还可以进行扩展，这里就不再做过多演示。那么问题来了，如果NFS-SERVER挂机怎么办？GG</h3>"},{"title":"LVS-NAT,DR,TUNNL模式简单实现","date":"2023-05-13T12:36:00.000Z","_content":"# LVS-NAT简单实战\n注意：请关闭所有主机selinux和firewalld，架构图如下\n![LVS-NAT](/images/LVS-NAT.png)\n## LVS配置\n```bash\nhostnamectl set-hostname lvs\n#修改主机名\necho \"1\" >  /proc/sys/net/ipv4/ip_forward\n#开启ip转发，回包是需要经过LVS\napt update && apt install ipvsadm\n#安装软件\nipvsadm -A -t 172.18.0.100:80 -s wrr\n#新增VS配置，-t为tcp，-s为模式，wrr为权重轮询\nipvsadm -a -t 172.18.0.100:80 -r 192.168.59.131:80 -m\n#新增RS配置,-r表示后端服务器，-m为NAT模式\nipvsadm -a -t 172.18.0.100:80 -r 192.168.59.132:80 -m\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n        - 172.18.0.100/24\n      gateway4: 172.18.0.1\n      nameservers:\n         addresses: [172.18.0.1,8.8.8.8]\n    ens37:\n      dhcp4: no\n      addresses:\n        - 192.168.59.100/24\n  version: 2\n#修改网卡文件\n\nipvsadm -Ln\n#查看集群配置信息\nipvsadm-save -n > ipvsadm.rule\n#以数字方式保存配置\nipvsadm-restore <  ipvsadm.rule\n#从文件加载配置\n```\n\n## RS1配置\n```bash\napt update && apt install ngixn -y\necho \"仅主机 192.168.59.131\" > /var/www/html/index.nginx-debian.html\nsystemctl start nginx\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n          - 192.168.59.131/24\n      gateway4: 192.168.59.100\n  version: 2\n\nnetplan apply\n```\n## RS2配置\n```bash\napt install ngixn -y\necho \"仅主机 192.168.59.132\" > /var/www/html/index.nginx-debian.html\nsystemctl start nginx\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n          - 192.168.59.132/24\n      gateway4: 192.168.59.100\n  version: 2\n\nnetplan apply\n```\n## 测试：\n在Client上curl 172.18.0.100，在这里我们配置的权重轮询，但是没有配置weight，所以每curl一次都会换一次主机，一定程度上进行了负载。\n```bash\nipvsadm -e -t 172.18.0.100:80 -r 192.168.59.131:80 -m -w 3\n#这里我们修改了131主机权重为3，也就是比如客户机每访问4次，3次为131，1次为132。比例为3比1\n```\n## 总结：\n请记得一定要关闭防火墙，如果为redhat，请禁用selinux。其次NAT模式需要在LVS主机上进行IP地址的转换，会产生额外的网络开销，降低了网络性能，所以LVS主机需要具备较高的性能和带宽。在本次实验中的NAT模式存在单点故障的风险，实际生产最好使用主备，有兴趣的可自行尝试，这里就不再做过多叙述。\n\n# LVS-DR模式单网段案例\n注意：请关闭所有主机selinux和firewalld，架构图如下\n![LVS-DR-单网段](/images/LVS-DR-single.png)\n## CIP配置\n```bash\nhostnamectl set-hostname CIP\nroute del default\n#删除默认路由\nroute add default gw 172.18.0.100\n#增加默认路由，也就是网关，下一跳地址\nroute -n\n#打印路由\n```\n## Route配置\n```bash\nhostnamectl set-hostname route\necho \"1\" >  /proc/sys/net/ipv4/ip_forward\nsystemctl stop firewalld\ncd /etc/sysconfig/network-scripts/\nvim  ifcfg-ens160\n\tBOOTPROTO=static\n\tIPADDR=172.18.0.100\n\tNETMASK=255.255.255.0\n\tNAME=ens160\n\tDEVICE=ens160\n\tONBOOT=yes\ncp ifcfg-ens160  ifcfg-ens224\nvim  ifcfg-ens224\n\tBOOTPROTO=static\n\tIPADDR=192.168.59.200\n\tNETMASK=255.255.255.0\n\tNAME=ens224\n\tDEVICE=ens224\n\tONBOOT=yes\n\nnmcli con reload; nmcli con up ens160;nmcli con up ens224\n#重加载配置文件，并不会启动，所以后面还要加启动命令\n#注意，Router用的是redhat系列，如果是debian系列，网卡配置可能稍有不同\n```\n## LVS配置\n```bash\nhostnamectl set-hostname lvs\nsystemctl stop firewalld\napt update && apt install ipvsadm\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens37:\n      dhcp4: no\n      addresses:\n        - 192.168.59.130/24\n      gateway4: 192.168.59.200\n\n  version: 2\n\nnetplan apply\n#重载网卡配置文件，且重启网卡\nifconfig lo:1 192.168.59.100 netmask 255.255.255.255\n#为环回网口配置IP\nipvsadm -A -t 192.168.59.100:80 -s rr\n#rr为轮询算法\nipvsadm -a -t 192.168.59.100:80 -r 192.168.59.131:80 -g\n#-g为DR模式\nipvsadm -a -t 192.168.59.100:80 -r 192.168.59.132:80 -g\nipvsadm -Ln\n```\n## RS1配置\n```bash\nIP配置参考LVS\nhostnamectl set-hostname RS1\nsystemctl stop firewalld\necho 1 > /proc/sys/net/ipv4/conf/all/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/all/arp_announce\necho 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/lo/arp_announce\n#ignore=1使该网卡只响应LVS的请求\n#announce=2，忽略IP数据包的源IP地址\nifconfig lo:1 192.168.59.100 netmask 255.255.255.255\n```\n## RS2配置\n```bash\nhostnamectl set-hostname RS2\nsystemctl stop firewalld\necho 1 > /proc/sys/net/ipv4/conf/all/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/all/arp_announce\necho 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/lo/arp_announce\nifconfig lo:1 10.0.0.100 netmask 255.255.255.255\n```\nLVS的eth0的网关可否不配置？如果随便配置，发现什么问题？如果不配置，怎么解决\n可以，修改一下内核参数就行\n```bash\nubuntu\necho \"0\" > /proc/sys/net/ipv4/conf/all/rp_filter\necho \"0\" > /proc/sys/net/ipv4/conf/LVS 网卡名/rp_filter\n#关闭反向路径过滤，所有数据包均允许通过。\n\nredhat\necho \"0\" > /proc/sys/net/ipv4/conf/all/rp_filter\n#参数rp_filter用来控制系统是否开启对数据包源地址的校验。\n#0表示不校验\n#1表开启严格的反向路径校验。对每一个收到的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包；\n#2表示开启松散的反向路径校验，对每个收到的数据包，校验其源地址是否可以到达，即反向路径是否可以ping通，如反向路径不通，则直接丢弃该数据包。\n```\nLVS的VIP可以配置到lo网卡,但必须使用32位的netmask,为什么?\n```bash\n由于回环地址是一个单独的网络，因此需要使用32位掩码来配置回环网口的地址，以确保只有该地址的唯一性，避免因为掩码设置错误而导致不必要的网络通信和安全问题。\n```\n## 测试\n```bash\ncrul 192.168.59.100\n#这里访问的是lvs，终端应轮询返回RS1和RS2的网址信息\n```\n## 总结：\nLVS-DR模式单网段可能更容易被黑客扫描，因为LVS-DR模式下，虚拟服务器和Real Server都使用了同一网段，这使得黑客更容易发现虚拟服务器所在的IP地址。而且，由于Real Server的响应包不会经过Director，所以在单网段情况下，Real Server的响应包直接返回给客户端，黑客可以通过分析这些响应包来发现Real Server的IP地址。其次LVS主机和后端RS在同一个子网内，因此可能存在ARP欺骗的风险。同时要注意的是我在这里修改内核参数只是临时修改，重启后参数会复位，回环网卡ip也是同理。如果需要永久生效，请修改网卡配置文件。ipvsadm也可配置开机自启。\n\n\n# LVS-DR模式多网段案例\n我们可直接在单网端上稍作修改即可，架构图如下\n![LVS-DR-多网段](/images/LVS-DR-more.png)\n```bash\n在LVS，RS1，RS2上删除原来地址，然后添加新地址\nifconfig  lo:1 del 192.168.59.100\nifconfig lo:1 10.0.0.100 netmask 255.255.255.255\n```\n## Router配置\n```bash\nifconfig lo:1 10.0.0.100 netmask 255.255.255.255\n```\n## LVS配置\n```bash\nlvsadm -C\nipvsadm  -A -t 10.0.0.100:80 -s wrr\nipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.131:80 -g -w 1\nipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.132:80 -g -w 1\n#-w可不写，权重默认为1\n```\n## 测试\n```bash\ncrul 10.0.0.200\n#终端应轮询返回RS1和RS2的网址信息\n```\n## 总结：\nLVS-DR多网段模式是在LVS-DR单网段模式的基础上进行改进的，多个网段来增加LVS集群的可扩展性，同时避免了单网段模式中可能出现的ARP攻击问题。此外，多网段模式还可以让LVS集群在多个物理网络上分布，以提高整个集群的可靠性。但相应而来的缺点是需要在路由器上配置静态路由或动态路由协议，这可能会增加一些管理成本。其次，LVS-DR多网段模式还可能会增加一些网络延迟，特别是当LVS集群分布在多个物理网络上时。LVS-DR多网段模式适合于大型网络环境中需要高可扩展性和高可靠性的应用场景，例如互联网数据中心、大型企业应用、电子商务等场景。同时，也适合于需要通过LVS来实现负载均衡和高可用性的应用程序。\n\n\n# LVS-TUNNEL隧道模式\n根据DR多网段进行修改，架构图如下\n![LVS-DR-隧道](/images/LVS-TUNNEL.jpg)\n\n## 为LVS，RS1，RS2添加tun0隧道地址\n```bash\nifconfig  lo:1 del 10.0.0.100\n#添加tunl隧道方法1\nifconfig tunl0 192.168.59.100 netmask 255.255.255.255 up\n#添加tun隧道方法2\nip addr add 192.168.59.100/32 dev tunl0\nip link set up tunl0\n```\n## Router配置\n```bash\nip address delete  10.0.0.200/24 dev ens224\n```\n\n## LVS配置\n```bash\nroute add default gw 192.168.59.200\n#上次实验在最后把网关给删了，在这里我们给他加上\n```\n## 测试：\n```bash\ncurl 192.168.59.200\n#在这里我们可以使用wireshark进行抓包\n```\n## 抓包图\n![LVS-TUNNEL-抓包](/images/LVS-TUNNEL-抓包.png)\n## 原理：\n### LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。\n## 总结：\ntunnel模式的优点是支持跨网段的负载均衡，因为请求数据包经过封装后，可以通过IP网络传输到不同网段中的Real Server上。但是由于封装和解封装的过程会增加额外的延迟和负担，因此性能比直接路由的DR模式差。同时，tunnel模式也需要额外的配置和管理工作，增加了部署和维护的难度。\n\n\n# LVS高可用\n## LVS和RS故障\n### 解决方案\n#### LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\n\n#### LVS + heartbeat/corosync：heartbeat/corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\n\n#### LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat/corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\n","source":"_posts/LVS实战.md","raw":"---\ntitle: LVS-NAT,DR,TUNNL模式简单实现\ndate: 2023-05-13 20:36:00\ntags:\n---\n# LVS-NAT简单实战\n注意：请关闭所有主机selinux和firewalld，架构图如下\n![LVS-NAT](/images/LVS-NAT.png)\n## LVS配置\n```bash\nhostnamectl set-hostname lvs\n#修改主机名\necho \"1\" >  /proc/sys/net/ipv4/ip_forward\n#开启ip转发，回包是需要经过LVS\napt update && apt install ipvsadm\n#安装软件\nipvsadm -A -t 172.18.0.100:80 -s wrr\n#新增VS配置，-t为tcp，-s为模式，wrr为权重轮询\nipvsadm -a -t 172.18.0.100:80 -r 192.168.59.131:80 -m\n#新增RS配置,-r表示后端服务器，-m为NAT模式\nipvsadm -a -t 172.18.0.100:80 -r 192.168.59.132:80 -m\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n        - 172.18.0.100/24\n      gateway4: 172.18.0.1\n      nameservers:\n         addresses: [172.18.0.1,8.8.8.8]\n    ens37:\n      dhcp4: no\n      addresses:\n        - 192.168.59.100/24\n  version: 2\n#修改网卡文件\n\nipvsadm -Ln\n#查看集群配置信息\nipvsadm-save -n > ipvsadm.rule\n#以数字方式保存配置\nipvsadm-restore <  ipvsadm.rule\n#从文件加载配置\n```\n\n## RS1配置\n```bash\napt update && apt install ngixn -y\necho \"仅主机 192.168.59.131\" > /var/www/html/index.nginx-debian.html\nsystemctl start nginx\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n          - 192.168.59.131/24\n      gateway4: 192.168.59.100\n  version: 2\n\nnetplan apply\n```\n## RS2配置\n```bash\napt install ngixn -y\necho \"仅主机 192.168.59.132\" > /var/www/html/index.nginx-debian.html\nsystemctl start nginx\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n          - 192.168.59.132/24\n      gateway4: 192.168.59.100\n  version: 2\n\nnetplan apply\n```\n## 测试：\n在Client上curl 172.18.0.100，在这里我们配置的权重轮询，但是没有配置weight，所以每curl一次都会换一次主机，一定程度上进行了负载。\n```bash\nipvsadm -e -t 172.18.0.100:80 -r 192.168.59.131:80 -m -w 3\n#这里我们修改了131主机权重为3，也就是比如客户机每访问4次，3次为131，1次为132。比例为3比1\n```\n## 总结：\n请记得一定要关闭防火墙，如果为redhat，请禁用selinux。其次NAT模式需要在LVS主机上进行IP地址的转换，会产生额外的网络开销，降低了网络性能，所以LVS主机需要具备较高的性能和带宽。在本次实验中的NAT模式存在单点故障的风险，实际生产最好使用主备，有兴趣的可自行尝试，这里就不再做过多叙述。\n\n# LVS-DR模式单网段案例\n注意：请关闭所有主机selinux和firewalld，架构图如下\n![LVS-DR-单网段](/images/LVS-DR-single.png)\n## CIP配置\n```bash\nhostnamectl set-hostname CIP\nroute del default\n#删除默认路由\nroute add default gw 172.18.0.100\n#增加默认路由，也就是网关，下一跳地址\nroute -n\n#打印路由\n```\n## Route配置\n```bash\nhostnamectl set-hostname route\necho \"1\" >  /proc/sys/net/ipv4/ip_forward\nsystemctl stop firewalld\ncd /etc/sysconfig/network-scripts/\nvim  ifcfg-ens160\n\tBOOTPROTO=static\n\tIPADDR=172.18.0.100\n\tNETMASK=255.255.255.0\n\tNAME=ens160\n\tDEVICE=ens160\n\tONBOOT=yes\ncp ifcfg-ens160  ifcfg-ens224\nvim  ifcfg-ens224\n\tBOOTPROTO=static\n\tIPADDR=192.168.59.200\n\tNETMASK=255.255.255.0\n\tNAME=ens224\n\tDEVICE=ens224\n\tONBOOT=yes\n\nnmcli con reload; nmcli con up ens160;nmcli con up ens224\n#重加载配置文件，并不会启动，所以后面还要加启动命令\n#注意，Router用的是redhat系列，如果是debian系列，网卡配置可能稍有不同\n```\n## LVS配置\n```bash\nhostnamectl set-hostname lvs\nsystemctl stop firewalld\napt update && apt install ipvsadm\nvim /etc/netplan/00-installer-config.yaml\nnetwork:\n  ethernets:\n    ens37:\n      dhcp4: no\n      addresses:\n        - 192.168.59.130/24\n      gateway4: 192.168.59.200\n\n  version: 2\n\nnetplan apply\n#重载网卡配置文件，且重启网卡\nifconfig lo:1 192.168.59.100 netmask 255.255.255.255\n#为环回网口配置IP\nipvsadm -A -t 192.168.59.100:80 -s rr\n#rr为轮询算法\nipvsadm -a -t 192.168.59.100:80 -r 192.168.59.131:80 -g\n#-g为DR模式\nipvsadm -a -t 192.168.59.100:80 -r 192.168.59.132:80 -g\nipvsadm -Ln\n```\n## RS1配置\n```bash\nIP配置参考LVS\nhostnamectl set-hostname RS1\nsystemctl stop firewalld\necho 1 > /proc/sys/net/ipv4/conf/all/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/all/arp_announce\necho 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/lo/arp_announce\n#ignore=1使该网卡只响应LVS的请求\n#announce=2，忽略IP数据包的源IP地址\nifconfig lo:1 192.168.59.100 netmask 255.255.255.255\n```\n## RS2配置\n```bash\nhostnamectl set-hostname RS2\nsystemctl stop firewalld\necho 1 > /proc/sys/net/ipv4/conf/all/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/all/arp_announce\necho 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore\necho 2 > /proc/sys/net/ipv4/conf/lo/arp_announce\nifconfig lo:1 10.0.0.100 netmask 255.255.255.255\n```\nLVS的eth0的网关可否不配置？如果随便配置，发现什么问题？如果不配置，怎么解决\n可以，修改一下内核参数就行\n```bash\nubuntu\necho \"0\" > /proc/sys/net/ipv4/conf/all/rp_filter\necho \"0\" > /proc/sys/net/ipv4/conf/LVS 网卡名/rp_filter\n#关闭反向路径过滤，所有数据包均允许通过。\n\nredhat\necho \"0\" > /proc/sys/net/ipv4/conf/all/rp_filter\n#参数rp_filter用来控制系统是否开启对数据包源地址的校验。\n#0表示不校验\n#1表开启严格的反向路径校验。对每一个收到的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包；\n#2表示开启松散的反向路径校验，对每个收到的数据包，校验其源地址是否可以到达，即反向路径是否可以ping通，如反向路径不通，则直接丢弃该数据包。\n```\nLVS的VIP可以配置到lo网卡,但必须使用32位的netmask,为什么?\n```bash\n由于回环地址是一个单独的网络，因此需要使用32位掩码来配置回环网口的地址，以确保只有该地址的唯一性，避免因为掩码设置错误而导致不必要的网络通信和安全问题。\n```\n## 测试\n```bash\ncrul 192.168.59.100\n#这里访问的是lvs，终端应轮询返回RS1和RS2的网址信息\n```\n## 总结：\nLVS-DR模式单网段可能更容易被黑客扫描，因为LVS-DR模式下，虚拟服务器和Real Server都使用了同一网段，这使得黑客更容易发现虚拟服务器所在的IP地址。而且，由于Real Server的响应包不会经过Director，所以在单网段情况下，Real Server的响应包直接返回给客户端，黑客可以通过分析这些响应包来发现Real Server的IP地址。其次LVS主机和后端RS在同一个子网内，因此可能存在ARP欺骗的风险。同时要注意的是我在这里修改内核参数只是临时修改，重启后参数会复位，回环网卡ip也是同理。如果需要永久生效，请修改网卡配置文件。ipvsadm也可配置开机自启。\n\n\n# LVS-DR模式多网段案例\n我们可直接在单网端上稍作修改即可，架构图如下\n![LVS-DR-多网段](/images/LVS-DR-more.png)\n```bash\n在LVS，RS1，RS2上删除原来地址，然后添加新地址\nifconfig  lo:1 del 192.168.59.100\nifconfig lo:1 10.0.0.100 netmask 255.255.255.255\n```\n## Router配置\n```bash\nifconfig lo:1 10.0.0.100 netmask 255.255.255.255\n```\n## LVS配置\n```bash\nlvsadm -C\nipvsadm  -A -t 10.0.0.100:80 -s wrr\nipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.131:80 -g -w 1\nipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.132:80 -g -w 1\n#-w可不写，权重默认为1\n```\n## 测试\n```bash\ncrul 10.0.0.200\n#终端应轮询返回RS1和RS2的网址信息\n```\n## 总结：\nLVS-DR多网段模式是在LVS-DR单网段模式的基础上进行改进的，多个网段来增加LVS集群的可扩展性，同时避免了单网段模式中可能出现的ARP攻击问题。此外，多网段模式还可以让LVS集群在多个物理网络上分布，以提高整个集群的可靠性。但相应而来的缺点是需要在路由器上配置静态路由或动态路由协议，这可能会增加一些管理成本。其次，LVS-DR多网段模式还可能会增加一些网络延迟，特别是当LVS集群分布在多个物理网络上时。LVS-DR多网段模式适合于大型网络环境中需要高可扩展性和高可靠性的应用场景，例如互联网数据中心、大型企业应用、电子商务等场景。同时，也适合于需要通过LVS来实现负载均衡和高可用性的应用程序。\n\n\n# LVS-TUNNEL隧道模式\n根据DR多网段进行修改，架构图如下\n![LVS-DR-隧道](/images/LVS-TUNNEL.jpg)\n\n## 为LVS，RS1，RS2添加tun0隧道地址\n```bash\nifconfig  lo:1 del 10.0.0.100\n#添加tunl隧道方法1\nifconfig tunl0 192.168.59.100 netmask 255.255.255.255 up\n#添加tun隧道方法2\nip addr add 192.168.59.100/32 dev tunl0\nip link set up tunl0\n```\n## Router配置\n```bash\nip address delete  10.0.0.200/24 dev ens224\n```\n\n## LVS配置\n```bash\nroute add default gw 192.168.59.200\n#上次实验在最后把网关给删了，在这里我们给他加上\n```\n## 测试：\n```bash\ncurl 192.168.59.200\n#在这里我们可以使用wireshark进行抓包\n```\n## 抓包图\n![LVS-TUNNEL-抓包](/images/LVS-TUNNEL-抓包.png)\n## 原理：\n### LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。\n## 总结：\ntunnel模式的优点是支持跨网段的负载均衡，因为请求数据包经过封装后，可以通过IP网络传输到不同网段中的Real Server上。但是由于封装和解封装的过程会增加额外的延迟和负担，因此性能比直接路由的DR模式差。同时，tunnel模式也需要额外的配置和管理工作，增加了部署和维护的难度。\n\n\n# LVS高可用\n## LVS和RS故障\n### 解决方案\n#### LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\n\n#### LVS + heartbeat/corosync：heartbeat/corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\n\n#### LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat/corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\n","slug":"LVS实战","published":1,"updated":"2023-05-14T07:03:26.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhpyh4qi0001md8fffmdg4zo","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"LVS-NAT简单实战\"><a href=\"#LVS-NAT简单实战\" class=\"headerlink\" title=\"LVS-NAT简单实战\"></a>LVS-NAT简单实战</h1><p>注意：请关闭所有主机selinux和firewalld，架构图如下<br><img src=\"/images/LVS-NAT.png\" alt=\"LVS-NAT\"></p>\n<h2 id=\"LVS配置\"><a href=\"#LVS配置\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname lvs</span><br><span class=\"line\"><span class=\"comment\">#修改主机名</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt;  /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"><span class=\"comment\">#开启ip转发，回包是需要经过LVS</span></span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm</span><br><span class=\"line\"><span class=\"comment\">#安装软件</span></span><br><span class=\"line\">ipvsadm -A -t 172.18.0.100:80 -s wrr</span><br><span class=\"line\"><span class=\"comment\">#新增VS配置，-t为tcp，-s为模式，wrr为权重轮询</span></span><br><span class=\"line\">ipvsadm -a -t 172.18.0.100:80 -r 192.168.59.131:80 -m</span><br><span class=\"line\"><span class=\"comment\">#新增RS配置,-r表示后端服务器，-m为NAT模式</span></span><br><span class=\"line\">ipvsadm -a -t 172.18.0.100:80 -r 192.168.59.132:80 -m</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 172.18.0.100/24</span><br><span class=\"line\">      gateway4: 172.18.0.1</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">         addresses: [172.18.0.1,8.8.8.8]</span><br><span class=\"line\">    ens37:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 192.168.59.100/24</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"><span class=\"comment\">#修改网卡文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">ipvsadm -Ln</span><br><span class=\"line\"><span class=\"comment\">#查看集群配置信息</span></span><br><span class=\"line\">ipvsadm-save -n &gt; ipvsadm.rule</span><br><span class=\"line\"><span class=\"comment\">#以数字方式保存配置</span></span><br><span class=\"line\">ipvsadm-restore &lt;  ipvsadm.rule</span><br><span class=\"line\"><span class=\"comment\">#从文件加载配置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RS1配置\"><a href=\"#RS1配置\" class=\"headerlink\" title=\"RS1配置\"></a>RS1配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install ngixn -y</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;仅主机 192.168.59.131&quot;</span> &gt; /var/www/html/index.nginx-debian.html</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">          - 192.168.59.131/24</span><br><span class=\"line\">      gateway4: 192.168.59.100</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">netplan apply</span><br></pre></td></tr></table></figure>\n<h2 id=\"RS2配置\"><a href=\"#RS2配置\" class=\"headerlink\" title=\"RS2配置\"></a>RS2配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install ngixn -y</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;仅主机 192.168.59.132&quot;</span> &gt; /var/www/html/index.nginx-debian.html</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">          - 192.168.59.132/24</span><br><span class=\"line\">      gateway4: 192.168.59.100</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">netplan apply</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><p>在Client上curl 172.18.0.100，在这里我们配置的权重轮询，但是没有配置weight，所以每curl一次都会换一次主机，一定程度上进行了负载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -e -t 172.18.0.100:80 -r 192.168.59.131:80 -m -w 3</span><br><span class=\"line\"><span class=\"comment\">#这里我们修改了131主机权重为3，也就是比如客户机每访问4次，3次为131，1次为132。比例为3比1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>请记得一定要关闭防火墙，如果为redhat，请禁用selinux。其次NAT模式需要在LVS主机上进行IP地址的转换，会产生额外的网络开销，降低了网络性能，所以LVS主机需要具备较高的性能和带宽。在本次实验中的NAT模式存在单点故障的风险，实际生产最好使用主备，有兴趣的可自行尝试，这里就不再做过多叙述。</p>\n<h1 id=\"LVS-DR模式单网段案例\"><a href=\"#LVS-DR模式单网段案例\" class=\"headerlink\" title=\"LVS-DR模式单网段案例\"></a>LVS-DR模式单网段案例</h1><p>注意：请关闭所有主机selinux和firewalld，架构图如下<br><img src=\"/images/LVS-DR-single.png\" alt=\"LVS-DR-单网段\"></p>\n<h2 id=\"CIP配置\"><a href=\"#CIP配置\" class=\"headerlink\" title=\"CIP配置\"></a>CIP配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname CIP</span><br><span class=\"line\">route del default</span><br><span class=\"line\"><span class=\"comment\">#删除默认路由</span></span><br><span class=\"line\">route add default gw 172.18.0.100</span><br><span class=\"line\"><span class=\"comment\">#增加默认路由，也就是网关，下一跳地址</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"comment\">#打印路由</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Route配置\"><a href=\"#Route配置\" class=\"headerlink\" title=\"Route配置\"></a>Route配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname route</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt;  /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/sysconfig/network-scripts/</span><br><span class=\"line\">vim  ifcfg-ens160</span><br><span class=\"line\">\tBOOTPROTO=static</span><br><span class=\"line\">\tIPADDR=172.18.0.100</span><br><span class=\"line\">\tNETMASK=255.255.255.0</span><br><span class=\"line\">\tNAME=ens160</span><br><span class=\"line\">\tDEVICE=ens160</span><br><span class=\"line\">\tONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> ifcfg-ens160  ifcfg-ens224</span><br><span class=\"line\">vim  ifcfg-ens224</span><br><span class=\"line\">\tBOOTPROTO=static</span><br><span class=\"line\">\tIPADDR=192.168.59.200</span><br><span class=\"line\">\tNETMASK=255.255.255.0</span><br><span class=\"line\">\tNAME=ens224</span><br><span class=\"line\">\tDEVICE=ens224</span><br><span class=\"line\">\tONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">nmcli con reload; nmcli con up ens160;nmcli con up ens224</span><br><span class=\"line\"><span class=\"comment\">#重加载配置文件，并不会启动，所以后面还要加启动命令</span></span><br><span class=\"line\"><span class=\"comment\">#注意，Router用的是redhat系列，如果是debian系列，网卡配置可能稍有不同</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"LVS配置-1\"><a href=\"#LVS配置-1\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname lvs</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens37:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 192.168.59.130/24</span><br><span class=\"line\">      gateway4: 192.168.59.200</span><br><span class=\"line\"></span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">netplan apply</span><br><span class=\"line\"><span class=\"comment\">#重载网卡配置文件，且重启网卡</span></span><br><span class=\"line\">ifconfig lo:1 192.168.59.100 netmask 255.255.255.255</span><br><span class=\"line\"><span class=\"comment\">#为环回网口配置IP</span></span><br><span class=\"line\">ipvsadm -A -t 192.168.59.100:80 -s rr</span><br><span class=\"line\"><span class=\"comment\">#rr为轮询算法</span></span><br><span class=\"line\">ipvsadm -a -t 192.168.59.100:80 -r 192.168.59.131:80 -g</span><br><span class=\"line\"><span class=\"comment\">#-g为DR模式</span></span><br><span class=\"line\">ipvsadm -a -t 192.168.59.100:80 -r 192.168.59.132:80 -g</span><br><span class=\"line\">ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n<h2 id=\"RS1配置-1\"><a href=\"#RS1配置-1\" class=\"headerlink\" title=\"RS1配置\"></a>RS1配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IP配置参考LVS</span><br><span class=\"line\">hostnamectl set-hostname RS1</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\"><span class=\"comment\">#ignore=1使该网卡只响应LVS的请求</span></span><br><span class=\"line\"><span class=\"comment\">#announce=2，忽略IP数据包的源IP地址</span></span><br><span class=\"line\">ifconfig lo:1 192.168.59.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"RS2配置-1\"><a href=\"#RS2配置-1\" class=\"headerlink\" title=\"RS2配置\"></a>RS2配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname RS2</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<p>LVS的eth0的网关可否不配置？如果随便配置，发现什么问题？如果不配置，怎么解决<br>可以，修改一下内核参数就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/LVS 网卡名/rp_filter</span><br><span class=\"line\"><span class=\"comment\">#关闭反向路径过滤，所有数据包均允许通过。</span></span><br><span class=\"line\"></span><br><span class=\"line\">redhat</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class=\"line\"><span class=\"comment\">#参数rp_filter用来控制系统是否开启对数据包源地址的校验。</span></span><br><span class=\"line\"><span class=\"comment\">#0表示不校验</span></span><br><span class=\"line\"><span class=\"comment\">#1表开启严格的反向路径校验。对每一个收到的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包；</span></span><br><span class=\"line\"><span class=\"comment\">#2表示开启松散的反向路径校验，对每个收到的数据包，校验其源地址是否可以到达，即反向路径是否可以ping通，如反向路径不通，则直接丢弃该数据包。</span></span><br></pre></td></tr></table></figure>\n<p>LVS的VIP可以配置到lo网卡,但必须使用32位的netmask,为什么?</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于回环地址是一个单独的网络，因此需要使用32位掩码来配置回环网口的地址，以确保只有该地址的唯一性，避免因为掩码设置错误而导致不必要的网络通信和安全问题。</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crul 192.168.59.100</span><br><span class=\"line\"><span class=\"comment\">#这里访问的是lvs，终端应轮询返回RS1和RS2的网址信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>LVS-DR模式单网段可能更容易被黑客扫描，因为LVS-DR模式下，虚拟服务器和Real Server都使用了同一网段，这使得黑客更容易发现虚拟服务器所在的IP地址。而且，由于Real Server的响应包不会经过Director，所以在单网段情况下，Real Server的响应包直接返回给客户端，黑客可以通过分析这些响应包来发现Real Server的IP地址。其次LVS主机和后端RS在同一个子网内，因此可能存在ARP欺骗的风险。同时要注意的是我在这里修改内核参数只是临时修改，重启后参数会复位，回环网卡ip也是同理。如果需要永久生效，请修改网卡配置文件。ipvsadm也可配置开机自启。</p>\n<h1 id=\"LVS-DR模式多网段案例\"><a href=\"#LVS-DR模式多网段案例\" class=\"headerlink\" title=\"LVS-DR模式多网段案例\"></a>LVS-DR模式多网段案例</h1><p>我们可直接在单网端上稍作修改即可，架构图如下<br><img src=\"/images/LVS-DR-more.png\" alt=\"LVS-DR-多网段\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在LVS，RS1，RS2上删除原来地址，然后添加新地址</span><br><span class=\"line\">ifconfig  lo:1 del 192.168.59.100</span><br><span class=\"line\">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"Router配置\"><a href=\"#Router配置\" class=\"headerlink\" title=\"Router配置\"></a>Router配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"LVS配置-2\"><a href=\"#LVS配置-2\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvsadm -C</span><br><span class=\"line\">ipvsadm  -A -t 10.0.0.100:80 -s wrr</span><br><span class=\"line\">ipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.131:80 -g -w 1</span><br><span class=\"line\">ipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.132:80 -g -w 1</span><br><span class=\"line\"><span class=\"comment\">#-w可不写，权重默认为1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crul 10.0.0.200</span><br><span class=\"line\"><span class=\"comment\">#终端应轮询返回RS1和RS2的网址信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：-2\"><a href=\"#总结：-2\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>LVS-DR多网段模式是在LVS-DR单网段模式的基础上进行改进的，多个网段来增加LVS集群的可扩展性，同时避免了单网段模式中可能出现的ARP攻击问题。此外，多网段模式还可以让LVS集群在多个物理网络上分布，以提高整个集群的可靠性。但相应而来的缺点是需要在路由器上配置静态路由或动态路由协议，这可能会增加一些管理成本。其次，LVS-DR多网段模式还可能会增加一些网络延迟，特别是当LVS集群分布在多个物理网络上时。LVS-DR多网段模式适合于大型网络环境中需要高可扩展性和高可靠性的应用场景，例如互联网数据中心、大型企业应用、电子商务等场景。同时，也适合于需要通过LVS来实现负载均衡和高可用性的应用程序。</p>\n<h1 id=\"LVS-TUNNEL隧道模式\"><a href=\"#LVS-TUNNEL隧道模式\" class=\"headerlink\" title=\"LVS-TUNNEL隧道模式\"></a>LVS-TUNNEL隧道模式</h1><p>根据DR多网段进行修改，架构图如下<br><img src=\"/images/LVS-TUNNEL.jpg\" alt=\"LVS-DR-隧道\"></p>\n<h2 id=\"为LVS，RS1，RS2添加tun0隧道地址\"><a href=\"#为LVS，RS1，RS2添加tun0隧道地址\" class=\"headerlink\" title=\"为LVS，RS1，RS2添加tun0隧道地址\"></a>为LVS，RS1，RS2添加tun0隧道地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig  lo:1 del 10.0.0.100</span><br><span class=\"line\"><span class=\"comment\">#添加tunl隧道方法1</span></span><br><span class=\"line\">ifconfig tunl0 192.168.59.100 netmask 255.255.255.255 up</span><br><span class=\"line\"><span class=\"comment\">#添加tun隧道方法2</span></span><br><span class=\"line\">ip addr add 192.168.59.100/32 dev tunl0</span><br><span class=\"line\">ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> up tunl0</span><br></pre></td></tr></table></figure>\n<h2 id=\"Router配置-1\"><a href=\"#Router配置-1\" class=\"headerlink\" title=\"Router配置\"></a>Router配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip address delete  10.0.0.200/24 dev ens224</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LVS配置-3\"><a href=\"#LVS配置-3\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route add default gw 192.168.59.200</span><br><span class=\"line\"><span class=\"comment\">#上次实验在最后把网关给删了，在这里我们给他加上</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试：-1\"><a href=\"#测试：-1\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.59.200</span><br><span class=\"line\"><span class=\"comment\">#在这里我们可以使用wireshark进行抓包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"抓包图\"><a href=\"#抓包图\" class=\"headerlink\" title=\"抓包图\"></a>抓包图</h2><p><img src=\"/images/LVS-TUNNEL-%E6%8A%93%E5%8C%85.png\" alt=\"LVS-TUNNEL-抓包\"></p>\n<h2 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h2><h3 id=\"LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real-Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real-Server的IP地址，这样数据包才能传递到Real-Server上。\"><a href=\"#LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real-Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real-Server的IP地址，这样数据包才能传递到Real-Server上。\" class=\"headerlink\" title=\"LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。\"></a>LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。</h3><h2 id=\"总结：-3\"><a href=\"#总结：-3\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>tunnel模式的优点是支持跨网段的负载均衡，因为请求数据包经过封装后，可以通过IP网络传输到不同网段中的Real Server上。但是由于封装和解封装的过程会增加额外的延迟和负担，因此性能比直接路由的DR模式差。同时，tunnel模式也需要额外的配置和管理工作，增加了部署和维护的难度。</p>\n<h1 id=\"LVS高可用\"><a href=\"#LVS高可用\" class=\"headerlink\" title=\"LVS高可用\"></a>LVS高可用</h1><h2 id=\"LVS和RS故障\"><a href=\"#LVS和RS故障\" class=\"headerlink\" title=\"LVS和RS故障\"></a>LVS和RS故障</h2><h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"LVS-keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\"><a href=\"#LVS-keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\" class=\"headerlink\" title=\"LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\"></a>LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。</h4><h4 id=\"LVS-heartbeat-x2F-corosync：heartbeat-x2F-corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\"><a href=\"#LVS-heartbeat-x2F-corosync：heartbeat-x2F-corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\" class=\"headerlink\" title=\"LVS + heartbeat&#x2F;corosync：heartbeat&#x2F;corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\"></a>LVS + heartbeat&#x2F;corosync：heartbeat&#x2F;corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。</h4><h4 id=\"LVS-ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat-x2F-corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\"><a href=\"#LVS-ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat-x2F-corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\" class=\"headerlink\" title=\"LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat&#x2F;corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\"></a>LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat&#x2F;corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。</h4>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"LVS-NAT简单实战\"><a href=\"#LVS-NAT简单实战\" class=\"headerlink\" title=\"LVS-NAT简单实战\"></a>LVS-NAT简单实战</h1><p>注意：请关闭所有主机selinux和firewalld，架构图如下<br><img src=\"/images/LVS-NAT.png\" alt=\"LVS-NAT\"></p>\n<h2 id=\"LVS配置\"><a href=\"#LVS配置\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname lvs</span><br><span class=\"line\"><span class=\"comment\">#修改主机名</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt;  /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"><span class=\"comment\">#开启ip转发，回包是需要经过LVS</span></span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm</span><br><span class=\"line\"><span class=\"comment\">#安装软件</span></span><br><span class=\"line\">ipvsadm -A -t 172.18.0.100:80 -s wrr</span><br><span class=\"line\"><span class=\"comment\">#新增VS配置，-t为tcp，-s为模式，wrr为权重轮询</span></span><br><span class=\"line\">ipvsadm -a -t 172.18.0.100:80 -r 192.168.59.131:80 -m</span><br><span class=\"line\"><span class=\"comment\">#新增RS配置,-r表示后端服务器，-m为NAT模式</span></span><br><span class=\"line\">ipvsadm -a -t 172.18.0.100:80 -r 192.168.59.132:80 -m</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 172.18.0.100/24</span><br><span class=\"line\">      gateway4: 172.18.0.1</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">         addresses: [172.18.0.1,8.8.8.8]</span><br><span class=\"line\">    ens37:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 192.168.59.100/24</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"><span class=\"comment\">#修改网卡文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">ipvsadm -Ln</span><br><span class=\"line\"><span class=\"comment\">#查看集群配置信息</span></span><br><span class=\"line\">ipvsadm-save -n &gt; ipvsadm.rule</span><br><span class=\"line\"><span class=\"comment\">#以数字方式保存配置</span></span><br><span class=\"line\">ipvsadm-restore &lt;  ipvsadm.rule</span><br><span class=\"line\"><span class=\"comment\">#从文件加载配置</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RS1配置\"><a href=\"#RS1配置\" class=\"headerlink\" title=\"RS1配置\"></a>RS1配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install ngixn -y</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;仅主机 192.168.59.131&quot;</span> &gt; /var/www/html/index.nginx-debian.html</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">          - 192.168.59.131/24</span><br><span class=\"line\">      gateway4: 192.168.59.100</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">netplan apply</span><br></pre></td></tr></table></figure>\n<h2 id=\"RS2配置\"><a href=\"#RS2配置\" class=\"headerlink\" title=\"RS2配置\"></a>RS2配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install ngixn -y</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;仅主机 192.168.59.132&quot;</span> &gt; /var/www/html/index.nginx-debian.html</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">          - 192.168.59.132/24</span><br><span class=\"line\">      gateway4: 192.168.59.100</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">netplan apply</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试：\"><a href=\"#测试：\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><p>在Client上curl 172.18.0.100，在这里我们配置的权重轮询，但是没有配置weight，所以每curl一次都会换一次主机，一定程度上进行了负载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipvsadm -e -t 172.18.0.100:80 -r 192.168.59.131:80 -m -w 3</span><br><span class=\"line\"><span class=\"comment\">#这里我们修改了131主机权重为3，也就是比如客户机每访问4次，3次为131，1次为132。比例为3比1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>请记得一定要关闭防火墙，如果为redhat，请禁用selinux。其次NAT模式需要在LVS主机上进行IP地址的转换，会产生额外的网络开销，降低了网络性能，所以LVS主机需要具备较高的性能和带宽。在本次实验中的NAT模式存在单点故障的风险，实际生产最好使用主备，有兴趣的可自行尝试，这里就不再做过多叙述。</p>\n<h1 id=\"LVS-DR模式单网段案例\"><a href=\"#LVS-DR模式单网段案例\" class=\"headerlink\" title=\"LVS-DR模式单网段案例\"></a>LVS-DR模式单网段案例</h1><p>注意：请关闭所有主机selinux和firewalld，架构图如下<br><img src=\"/images/LVS-DR-single.png\" alt=\"LVS-DR-单网段\"></p>\n<h2 id=\"CIP配置\"><a href=\"#CIP配置\" class=\"headerlink\" title=\"CIP配置\"></a>CIP配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname CIP</span><br><span class=\"line\">route del default</span><br><span class=\"line\"><span class=\"comment\">#删除默认路由</span></span><br><span class=\"line\">route add default gw 172.18.0.100</span><br><span class=\"line\"><span class=\"comment\">#增加默认路由，也就是网关，下一跳地址</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"comment\">#打印路由</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Route配置\"><a href=\"#Route配置\" class=\"headerlink\" title=\"Route配置\"></a>Route配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname route</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt;  /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/sysconfig/network-scripts/</span><br><span class=\"line\">vim  ifcfg-ens160</span><br><span class=\"line\">\tBOOTPROTO=static</span><br><span class=\"line\">\tIPADDR=172.18.0.100</span><br><span class=\"line\">\tNETMASK=255.255.255.0</span><br><span class=\"line\">\tNAME=ens160</span><br><span class=\"line\">\tDEVICE=ens160</span><br><span class=\"line\">\tONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> ifcfg-ens160  ifcfg-ens224</span><br><span class=\"line\">vim  ifcfg-ens224</span><br><span class=\"line\">\tBOOTPROTO=static</span><br><span class=\"line\">\tIPADDR=192.168.59.200</span><br><span class=\"line\">\tNETMASK=255.255.255.0</span><br><span class=\"line\">\tNAME=ens224</span><br><span class=\"line\">\tDEVICE=ens224</span><br><span class=\"line\">\tONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">nmcli con reload; nmcli con up ens160;nmcli con up ens224</span><br><span class=\"line\"><span class=\"comment\">#重加载配置文件，并不会启动，所以后面还要加启动命令</span></span><br><span class=\"line\"><span class=\"comment\">#注意，Router用的是redhat系列，如果是debian系列，网卡配置可能稍有不同</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"LVS配置-1\"><a href=\"#LVS配置-1\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname lvs</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">apt update &amp;&amp; apt install ipvsadm</span><br><span class=\"line\">vim /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens37:</span><br><span class=\"line\">      dhcp4: no</span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 192.168.59.130/24</span><br><span class=\"line\">      gateway4: 192.168.59.200</span><br><span class=\"line\"></span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\">netplan apply</span><br><span class=\"line\"><span class=\"comment\">#重载网卡配置文件，且重启网卡</span></span><br><span class=\"line\">ifconfig lo:1 192.168.59.100 netmask 255.255.255.255</span><br><span class=\"line\"><span class=\"comment\">#为环回网口配置IP</span></span><br><span class=\"line\">ipvsadm -A -t 192.168.59.100:80 -s rr</span><br><span class=\"line\"><span class=\"comment\">#rr为轮询算法</span></span><br><span class=\"line\">ipvsadm -a -t 192.168.59.100:80 -r 192.168.59.131:80 -g</span><br><span class=\"line\"><span class=\"comment\">#-g为DR模式</span></span><br><span class=\"line\">ipvsadm -a -t 192.168.59.100:80 -r 192.168.59.132:80 -g</span><br><span class=\"line\">ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n<h2 id=\"RS1配置-1\"><a href=\"#RS1配置-1\" class=\"headerlink\" title=\"RS1配置\"></a>RS1配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IP配置参考LVS</span><br><span class=\"line\">hostnamectl set-hostname RS1</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\"><span class=\"comment\">#ignore=1使该网卡只响应LVS的请求</span></span><br><span class=\"line\"><span class=\"comment\">#announce=2，忽略IP数据包的源IP地址</span></span><br><span class=\"line\">ifconfig lo:1 192.168.59.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"RS2配置-1\"><a href=\"#RS2配置-1\" class=\"headerlink\" title=\"RS2配置\"></a>RS2配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname RS2</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class=\"line\">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<p>LVS的eth0的网关可否不配置？如果随便配置，发现什么问题？如果不配置，怎么解决<br>可以，修改一下内核参数就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/LVS 网卡名/rp_filter</span><br><span class=\"line\"><span class=\"comment\">#关闭反向路径过滤，所有数据包均允许通过。</span></span><br><span class=\"line\"></span><br><span class=\"line\">redhat</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;0&quot;</span> &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br><span class=\"line\"><span class=\"comment\">#参数rp_filter用来控制系统是否开启对数据包源地址的校验。</span></span><br><span class=\"line\"><span class=\"comment\">#0表示不校验</span></span><br><span class=\"line\"><span class=\"comment\">#1表开启严格的反向路径校验。对每一个收到的数据包，校验其反向路径是否是最佳路径。如果反向路径不是最佳路径，则直接丢弃该数据包；</span></span><br><span class=\"line\"><span class=\"comment\">#2表示开启松散的反向路径校验，对每个收到的数据包，校验其源地址是否可以到达，即反向路径是否可以ping通，如反向路径不通，则直接丢弃该数据包。</span></span><br></pre></td></tr></table></figure>\n<p>LVS的VIP可以配置到lo网卡,但必须使用32位的netmask,为什么?</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于回环地址是一个单独的网络，因此需要使用32位掩码来配置回环网口的地址，以确保只有该地址的唯一性，避免因为掩码设置错误而导致不必要的网络通信和安全问题。</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crul 192.168.59.100</span><br><span class=\"line\"><span class=\"comment\">#这里访问的是lvs，终端应轮询返回RS1和RS2的网址信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>LVS-DR模式单网段可能更容易被黑客扫描，因为LVS-DR模式下，虚拟服务器和Real Server都使用了同一网段，这使得黑客更容易发现虚拟服务器所在的IP地址。而且，由于Real Server的响应包不会经过Director，所以在单网段情况下，Real Server的响应包直接返回给客户端，黑客可以通过分析这些响应包来发现Real Server的IP地址。其次LVS主机和后端RS在同一个子网内，因此可能存在ARP欺骗的风险。同时要注意的是我在这里修改内核参数只是临时修改，重启后参数会复位，回环网卡ip也是同理。如果需要永久生效，请修改网卡配置文件。ipvsadm也可配置开机自启。</p>\n<h1 id=\"LVS-DR模式多网段案例\"><a href=\"#LVS-DR模式多网段案例\" class=\"headerlink\" title=\"LVS-DR模式多网段案例\"></a>LVS-DR模式多网段案例</h1><p>我们可直接在单网端上稍作修改即可，架构图如下<br><img src=\"/images/LVS-DR-more.png\" alt=\"LVS-DR-多网段\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在LVS，RS1，RS2上删除原来地址，然后添加新地址</span><br><span class=\"line\">ifconfig  lo:1 del 192.168.59.100</span><br><span class=\"line\">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"Router配置\"><a href=\"#Router配置\" class=\"headerlink\" title=\"Router配置\"></a>Router配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig lo:1 10.0.0.100 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"LVS配置-2\"><a href=\"#LVS配置-2\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvsadm -C</span><br><span class=\"line\">ipvsadm  -A -t 10.0.0.100:80 -s wrr</span><br><span class=\"line\">ipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.131:80 -g -w 1</span><br><span class=\"line\">ipvsadm  -a -t 10.0.0.100:80 -r 192.168.59.132:80 -g -w 1</span><br><span class=\"line\"><span class=\"comment\">#-w可不写，权重默认为1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crul 10.0.0.200</span><br><span class=\"line\"><span class=\"comment\">#终端应轮询返回RS1和RS2的网址信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结：-2\"><a href=\"#总结：-2\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>LVS-DR多网段模式是在LVS-DR单网段模式的基础上进行改进的，多个网段来增加LVS集群的可扩展性，同时避免了单网段模式中可能出现的ARP攻击问题。此外，多网段模式还可以让LVS集群在多个物理网络上分布，以提高整个集群的可靠性。但相应而来的缺点是需要在路由器上配置静态路由或动态路由协议，这可能会增加一些管理成本。其次，LVS-DR多网段模式还可能会增加一些网络延迟，特别是当LVS集群分布在多个物理网络上时。LVS-DR多网段模式适合于大型网络环境中需要高可扩展性和高可靠性的应用场景，例如互联网数据中心、大型企业应用、电子商务等场景。同时，也适合于需要通过LVS来实现负载均衡和高可用性的应用程序。</p>\n<h1 id=\"LVS-TUNNEL隧道模式\"><a href=\"#LVS-TUNNEL隧道模式\" class=\"headerlink\" title=\"LVS-TUNNEL隧道模式\"></a>LVS-TUNNEL隧道模式</h1><p>根据DR多网段进行修改，架构图如下<br><img src=\"/images/LVS-TUNNEL.jpg\" alt=\"LVS-DR-隧道\"></p>\n<h2 id=\"为LVS，RS1，RS2添加tun0隧道地址\"><a href=\"#为LVS，RS1，RS2添加tun0隧道地址\" class=\"headerlink\" title=\"为LVS，RS1，RS2添加tun0隧道地址\"></a>为LVS，RS1，RS2添加tun0隧道地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig  lo:1 del 10.0.0.100</span><br><span class=\"line\"><span class=\"comment\">#添加tunl隧道方法1</span></span><br><span class=\"line\">ifconfig tunl0 192.168.59.100 netmask 255.255.255.255 up</span><br><span class=\"line\"><span class=\"comment\">#添加tun隧道方法2</span></span><br><span class=\"line\">ip addr add 192.168.59.100/32 dev tunl0</span><br><span class=\"line\">ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> up tunl0</span><br></pre></td></tr></table></figure>\n<h2 id=\"Router配置-1\"><a href=\"#Router配置-1\" class=\"headerlink\" title=\"Router配置\"></a>Router配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip address delete  10.0.0.200/24 dev ens224</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LVS配置-3\"><a href=\"#LVS配置-3\" class=\"headerlink\" title=\"LVS配置\"></a>LVS配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route add default gw 192.168.59.200</span><br><span class=\"line\"><span class=\"comment\">#上次实验在最后把网关给删了，在这里我们给他加上</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试：-1\"><a href=\"#测试：-1\" class=\"headerlink\" title=\"测试：\"></a>测试：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.59.200</span><br><span class=\"line\"><span class=\"comment\">#在这里我们可以使用wireshark进行抓包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"抓包图\"><a href=\"#抓包图\" class=\"headerlink\" title=\"抓包图\"></a>抓包图</h2><p><img src=\"/images/LVS-TUNNEL-%E6%8A%93%E5%8C%85.png\" alt=\"LVS-TUNNEL-抓包\"></p>\n<h2 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h2><h3 id=\"LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real-Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real-Server的IP地址，这样数据包才能传递到Real-Server上。\"><a href=\"#LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real-Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real-Server的IP地址，这样数据包才能传递到Real-Server上。\" class=\"headerlink\" title=\"LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。\"></a>LVS的tunnel模式是指将请求的数据包封装在一个新的数据包中，再通过IP网络传输到后端的Real Server上进行处理的一种LVS工作模式。在tunnel模式下，LVS将请求的数据包封装在一个新的数据包中，新的数据包的目的IP地址是后端Real Server的IP地址，这样数据包才能传递到Real Server上。</h3><h2 id=\"总结：-3\"><a href=\"#总结：-3\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>tunnel模式的优点是支持跨网段的负载均衡，因为请求数据包经过封装后，可以通过IP网络传输到不同网段中的Real Server上。但是由于封装和解封装的过程会增加额外的延迟和负担，因此性能比直接路由的DR模式差。同时，tunnel模式也需要额外的配置和管理工作，增加了部署和维护的难度。</p>\n<h1 id=\"LVS高可用\"><a href=\"#LVS高可用\" class=\"headerlink\" title=\"LVS高可用\"></a>LVS高可用</h1><h2 id=\"LVS和RS故障\"><a href=\"#LVS和RS故障\" class=\"headerlink\" title=\"LVS和RS故障\"></a>LVS和RS故障</h2><h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"LVS-keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\"><a href=\"#LVS-keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\" class=\"headerlink\" title=\"LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。\"></a>LVS + keepalived：keepalived是一种常见的高可用解决方案，可以通过监测LVS服务器的状态来实现自动故障转移和负载均衡。当主LVS服务器出现故障时，keepalived会自动将VIP转移到备用LVS服务器上。</h4><h4 id=\"LVS-heartbeat-x2F-corosync：heartbeat-x2F-corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\"><a href=\"#LVS-heartbeat-x2F-corosync：heartbeat-x2F-corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\" class=\"headerlink\" title=\"LVS + heartbeat&#x2F;corosync：heartbeat&#x2F;corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。\"></a>LVS + heartbeat&#x2F;corosync：heartbeat&#x2F;corosync是另一种常用的高可用解决方案，可以在多个LVS服务器之间同步状态，并实现自动故障转移和负载均衡。当主LVS服务器出现故障时，备用LVS服务器可以接管其工作。</h4><h4 id=\"LVS-ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat-x2F-corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\"><a href=\"#LVS-ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat-x2F-corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\" class=\"headerlink\" title=\"LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat&#x2F;corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。\"></a>LVS + ldirectord：ldirectord是一个可以管理LVS集群的工具，可以实现自动故障转移和负载均衡。与keepalived和heartbeat&#x2F;corosync相比，ldirectord的配置更为灵活，可以根据实际需求来进行配置。</h4>"},{"title":"MySQL半同步复制简单实现","date":"2023-05-05T12:36:00.000Z","_content":"在mysql8.0中实现半同步复制\n```bash\n主机IP \t         角色    MySQL版本\n172.18.0.127\tmaster     8以上\n172.18.0.48\tslave-1    8以上\n172.18.0.43 \tslave-2    8以上\n```\nmaster配置\n```bash\nINSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';\n--安装半同步插件\nshow master logs; \n--查看二进制文件,主从同步用\ncreate user  backuser@'172.18.0.%' identified by '123456' \n --创建主从账号\ngrant replication slave on *.* to backuser@'172.18.0.%'   \n --给与相应权限\n\nvim /etc/my.cnf\n[mysqld]\nserver-id=123\nrpl_semi_sync_master_enabled\nlog-bin=/mysql/log/binlog\n\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\nsystemctl restart mysqld.service\nselect @@rpl_semi_sync_master_enabled;  \n--查看是否开启\n```\n\n\nslave节点48配置\n```bash\nINSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n--安装slave半同步插件\n\nvim /etc/my.cnf\n[mysqld]\nserver-id=48\nrpl_semi_sync_master_enabled\nlog-bin=/mysql/log/binlog\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\nsystemctl restart mysqld.service\nselect @@rpl_semi_sync_slave_enabled;  \n\nCHANGE MASTER TO MASTER_HOST='172.18.0.127',\nMASTER_USER='backuser',\nMASTER_PASSWORD='123456',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n\nstrat slave;\n```\nslave节点43配置\n```bash\nINSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n--安装slave半同步插件\n\nvim /etc/my.cnf\n[mysqld]\nserver-id=43\nrpl_semi_sync_slave_enabled\nlog-bin=/mysql/log/binlog\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\nsystemctl restart mysqld.service\nselect @@rpl_semi_sync_slave_enabled;  \n\nCHANGE MASTER TO MASTER_HOST='172.18.0.127',\nMASTER_USER='backuser',\nMASTER_PASSWORD='123456',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n\nstart slave\n```\n到这里我们的半同步复制就基本上完成了，由于这里是基于全新机器，所以比较快，当然如果是现有数据，直接备份主机还原的从鸡上就行了。\n```bash\n查看半同步策略\nshow global variables like '%semi%';\n--查看有几个节点\nshow global status like '%semi%';\n```\n这里我们来测试下半同步的原理（至少有一个节点同步成功才会给客户端返回成功，当然也有可能是超时，超时时间可自定义）\n```bash\n#首先我们测试从机是否能够同步\nMaster\nmysql> create database testdb1;\nQuery OK, 1 row affected (0.01 sec)\n\nSlave-1\nmysql> show databases;\n+-----------------------+\n| Database              |\n+-----------------------+\n| db1                   |\n| information_schema    |\n| mysql                 |\n| performance_schema    |\n| sys                   |\n| testdb1               |\n+-----------------------+\n6 rows in set (0.00 sec)\n\nSlave-2\nmysql> show databases;\n+-----------------------+\n| Database              |\n+-----------------------+\n| db1                   |\n| information_schema    |\n| mysql                 |\n| performance_schema    |\n| sys                   |\n| testdb1               |\n+-----------------------+\n6 rows in set (0.00 sec)\n```\n可以看到都没问题，那我们停掉一台从机，再写入数据试试\n```bash\nsystemctl stop mysqld.service\n\ncreate database testdb2;\nQuery OK, 1 row affected (0.01 sec)\n```\n还是没问题，我我们停掉第二台主机试试\n```bash\nsystemctl stop mysqld.service\ncreate database testdb3;\nQuery OK, 1 row affected (10.00 sec)\n```\n现在可以看到，当我们把两台从机停了之后，主机不知道找谁写入了，虽然如此，但还是有一个超时机制，默认10s。10s后不管有没有其他从机连上，都会提交本次写入。\n```bash\n--修改超时配置my.cnf\nrpl_semi_sync_master_timeout=3000\n```\n\n总结：半同步复制是 MySQL 的一种数据复制方式，相对于异步复制，它提高了数据复制的安全性，同时保持了较高的性能。半同步复制的基本思路是：当主库执行一个事务后，只有等到至少一个从库接收并写入了该事务才会提交成功。这样可以保证从库的数据和主库的数据是同步的。（PS：如果从机全部掉线也不是不可能）\n半同步复制的好处是：提高数据复制的安全性，防止从库数据丢失。相对于同步复制，半同步复制的性能有所提高，因为主库不需要等待所有从库都接收并写入数据。半同步复制的缺点是：相对于异步复制，半同步复制会增加主库的负载，因为主库需要等待至少一个从库接收数据。但总的来说，半同步复制是一种较好的数据复制方式，它提高了数据复制的安全性，同时也能保持较高的性能。\n同时我们还可以使用复制过滤器让从节点仅复制指定的数据库，或指定数据库的指定表，有兴趣的可以自行尝试。其实现方法就是往mysql配置文件写黑白名单。\n","source":"_posts/mysql半复制主从.md","raw":"---\ntitle: MySQL半同步复制简单实现\ndate: 2023-05-05 20:36:00\ntags:\n---\n在mysql8.0中实现半同步复制\n```bash\n主机IP \t         角色    MySQL版本\n172.18.0.127\tmaster     8以上\n172.18.0.48\tslave-1    8以上\n172.18.0.43 \tslave-2    8以上\n```\nmaster配置\n```bash\nINSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';\n--安装半同步插件\nshow master logs; \n--查看二进制文件,主从同步用\ncreate user  backuser@'172.18.0.%' identified by '123456' \n --创建主从账号\ngrant replication slave on *.* to backuser@'172.18.0.%'   \n --给与相应权限\n\nvim /etc/my.cnf\n[mysqld]\nserver-id=123\nrpl_semi_sync_master_enabled\nlog-bin=/mysql/log/binlog\n\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\nsystemctl restart mysqld.service\nselect @@rpl_semi_sync_master_enabled;  \n--查看是否开启\n```\n\n\nslave节点48配置\n```bash\nINSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n--安装slave半同步插件\n\nvim /etc/my.cnf\n[mysqld]\nserver-id=48\nrpl_semi_sync_master_enabled\nlog-bin=/mysql/log/binlog\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\nsystemctl restart mysqld.service\nselect @@rpl_semi_sync_slave_enabled;  \n\nCHANGE MASTER TO MASTER_HOST='172.18.0.127',\nMASTER_USER='backuser',\nMASTER_PASSWORD='123456',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n\nstrat slave;\n```\nslave节点43配置\n```bash\nINSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n--安装slave半同步插件\n\nvim /etc/my.cnf\n[mysqld]\nserver-id=43\nrpl_semi_sync_slave_enabled\nlog-bin=/mysql/log/binlog\nmkdir -p /mysql/log && chown -R mysql.mysql /mysql\nsystemctl restart mysqld.service\nselect @@rpl_semi_sync_slave_enabled;  \n\nCHANGE MASTER TO MASTER_HOST='172.18.0.127',\nMASTER_USER='backuser',\nMASTER_PASSWORD='123456',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n\nstart slave\n```\n到这里我们的半同步复制就基本上完成了，由于这里是基于全新机器，所以比较快，当然如果是现有数据，直接备份主机还原的从鸡上就行了。\n```bash\n查看半同步策略\nshow global variables like '%semi%';\n--查看有几个节点\nshow global status like '%semi%';\n```\n这里我们来测试下半同步的原理（至少有一个节点同步成功才会给客户端返回成功，当然也有可能是超时，超时时间可自定义）\n```bash\n#首先我们测试从机是否能够同步\nMaster\nmysql> create database testdb1;\nQuery OK, 1 row affected (0.01 sec)\n\nSlave-1\nmysql> show databases;\n+-----------------------+\n| Database              |\n+-----------------------+\n| db1                   |\n| information_schema    |\n| mysql                 |\n| performance_schema    |\n| sys                   |\n| testdb1               |\n+-----------------------+\n6 rows in set (0.00 sec)\n\nSlave-2\nmysql> show databases;\n+-----------------------+\n| Database              |\n+-----------------------+\n| db1                   |\n| information_schema    |\n| mysql                 |\n| performance_schema    |\n| sys                   |\n| testdb1               |\n+-----------------------+\n6 rows in set (0.00 sec)\n```\n可以看到都没问题，那我们停掉一台从机，再写入数据试试\n```bash\nsystemctl stop mysqld.service\n\ncreate database testdb2;\nQuery OK, 1 row affected (0.01 sec)\n```\n还是没问题，我我们停掉第二台主机试试\n```bash\nsystemctl stop mysqld.service\ncreate database testdb3;\nQuery OK, 1 row affected (10.00 sec)\n```\n现在可以看到，当我们把两台从机停了之后，主机不知道找谁写入了，虽然如此，但还是有一个超时机制，默认10s。10s后不管有没有其他从机连上，都会提交本次写入。\n```bash\n--修改超时配置my.cnf\nrpl_semi_sync_master_timeout=3000\n```\n\n总结：半同步复制是 MySQL 的一种数据复制方式，相对于异步复制，它提高了数据复制的安全性，同时保持了较高的性能。半同步复制的基本思路是：当主库执行一个事务后，只有等到至少一个从库接收并写入了该事务才会提交成功。这样可以保证从库的数据和主库的数据是同步的。（PS：如果从机全部掉线也不是不可能）\n半同步复制的好处是：提高数据复制的安全性，防止从库数据丢失。相对于同步复制，半同步复制的性能有所提高，因为主库不需要等待所有从库都接收并写入数据。半同步复制的缺点是：相对于异步复制，半同步复制会增加主库的负载，因为主库需要等待至少一个从库接收数据。但总的来说，半同步复制是一种较好的数据复制方式，它提高了数据复制的安全性，同时也能保持较高的性能。\n同时我们还可以使用复制过滤器让从节点仅复制指定的数据库，或指定数据库的指定表，有兴趣的可以自行尝试。其实现方法就是往mysql配置文件写黑白名单。\n","slug":"mysql半复制主从","published":1,"updated":"2023-05-05T13:34:45.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhpyh4qk0002md8f44cf2pm3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在mysql8.0中实现半同步复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主机IP \t         角色    MySQL版本</span><br><span class=\"line\">172.18.0.127\tmaster     8以上</span><br><span class=\"line\">172.18.0.48\tslave-1    8以上</span><br><span class=\"line\">172.18.0.43 \tslave-2    8以上</span><br></pre></td></tr></table></figure>\n<p>master配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALL PLUGIN rpl_semi_sync_master SONAME <span class=\"string\">&#x27;semisync_master.so&#x27;</span>;</span><br><span class=\"line\">--安装半同步插件</span><br><span class=\"line\">show master logs; </span><br><span class=\"line\">--查看二进制文件,主从同步用</span><br><span class=\"line\">create user  backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span> </span><br><span class=\"line\"> --创建主从账号</span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span>   </span><br><span class=\"line\"> --给与相应权限</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=123</span><br><span class=\"line\">rpl_semi_sync_master_enabled</span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\">select @@rpl_semi_sync_master_enabled;  </span><br><span class=\"line\">--查看是否开启</span><br></pre></td></tr></table></figure>\n\n\n<p>slave节点48配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\">--安装slave半同步插件</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=48</span><br><span class=\"line\">rpl_semi_sync_master_enabled</span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\">select @@rpl_semi_sync_slave_enabled;  </span><br><span class=\"line\"></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.127&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"></span><br><span class=\"line\">strat slave;</span><br></pre></td></tr></table></figure>\n<p>slave节点43配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\">--安装slave半同步插件</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=43</span><br><span class=\"line\">rpl_semi_sync_slave_enabled</span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\">select @@rpl_semi_sync_slave_enabled;  </span><br><span class=\"line\"></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.127&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"></span><br><span class=\"line\">start slave</span><br></pre></td></tr></table></figure>\n<p>到这里我们的半同步复制就基本上完成了，由于这里是基于全新机器，所以比较快，当然如果是现有数据，直接备份主机还原的从鸡上就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看半同步策略</span><br><span class=\"line\">show global variables like <span class=\"string\">&#x27;%semi%&#x27;</span>;</span><br><span class=\"line\">--查看有几个节点</span><br><span class=\"line\">show global status like <span class=\"string\">&#x27;%semi%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>这里我们来测试下半同步的原理（至少有一个节点同步成功才会给客户端返回成功，当然也有可能是超时，超时时间可自定义）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#首先我们测试从机是否能够同步</span></span><br><span class=\"line\">Master</span><br><span class=\"line\">mysql&gt; create database testdb1;</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Slave-1</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| Database              |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| db1                   |</span><br><span class=\"line\">| information_schema    |</span><br><span class=\"line\">| mysql                 |</span><br><span class=\"line\">| performance_schema    |</span><br><span class=\"line\">| sys                   |</span><br><span class=\"line\">| testdb1               |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">6 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Slave-2</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| Database              |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| db1                   |</span><br><span class=\"line\">| information_schema    |</span><br><span class=\"line\">| mysql                 |</span><br><span class=\"line\">| performance_schema    |</span><br><span class=\"line\">| sys                   |</span><br><span class=\"line\">| testdb1               |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">6 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到都没问题，那我们停掉一台从机，再写入数据试试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop mysqld.service</span><br><span class=\"line\"></span><br><span class=\"line\">create database testdb2;</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>还是没问题，我我们停掉第二台主机试试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop mysqld.service</span><br><span class=\"line\">create database testdb3;</span><br><span class=\"line\">Query OK, 1 row affected (10.00 sec)</span><br></pre></td></tr></table></figure>\n<p>现在可以看到，当我们把两台从机停了之后，主机不知道找谁写入了，虽然如此，但还是有一个超时机制，默认10s。10s后不管有没有其他从机连上，都会提交本次写入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--修改超时配置my.cnf</span><br><span class=\"line\">rpl_semi_sync_master_timeout=3000</span><br></pre></td></tr></table></figure>\n\n<p>总结：半同步复制是 MySQL 的一种数据复制方式，相对于异步复制，它提高了数据复制的安全性，同时保持了较高的性能。半同步复制的基本思路是：当主库执行一个事务后，只有等到至少一个从库接收并写入了该事务才会提交成功。这样可以保证从库的数据和主库的数据是同步的。（PS：如果从机全部掉线也不是不可能）<br>半同步复制的好处是：提高数据复制的安全性，防止从库数据丢失。相对于同步复制，半同步复制的性能有所提高，因为主库不需要等待所有从库都接收并写入数据。半同步复制的缺点是：相对于异步复制，半同步复制会增加主库的负载，因为主库需要等待至少一个从库接收数据。但总的来说，半同步复制是一种较好的数据复制方式，它提高了数据复制的安全性，同时也能保持较高的性能。<br>同时我们还可以使用复制过滤器让从节点仅复制指定的数据库，或指定数据库的指定表，有兴趣的可以自行尝试。其实现方法就是往mysql配置文件写黑白名单。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>在mysql8.0中实现半同步复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主机IP \t         角色    MySQL版本</span><br><span class=\"line\">172.18.0.127\tmaster     8以上</span><br><span class=\"line\">172.18.0.48\tslave-1    8以上</span><br><span class=\"line\">172.18.0.43 \tslave-2    8以上</span><br></pre></td></tr></table></figure>\n<p>master配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALL PLUGIN rpl_semi_sync_master SONAME <span class=\"string\">&#x27;semisync_master.so&#x27;</span>;</span><br><span class=\"line\">--安装半同步插件</span><br><span class=\"line\">show master logs; </span><br><span class=\"line\">--查看二进制文件,主从同步用</span><br><span class=\"line\">create user  backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span> </span><br><span class=\"line\"> --创建主从账号</span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span>   </span><br><span class=\"line\"> --给与相应权限</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=123</span><br><span class=\"line\">rpl_semi_sync_master_enabled</span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\">select @@rpl_semi_sync_master_enabled;  </span><br><span class=\"line\">--查看是否开启</span><br></pre></td></tr></table></figure>\n\n\n<p>slave节点48配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\">--安装slave半同步插件</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=48</span><br><span class=\"line\">rpl_semi_sync_master_enabled</span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\">select @@rpl_semi_sync_slave_enabled;  </span><br><span class=\"line\"></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.127&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"></span><br><span class=\"line\">strat slave;</span><br></pre></td></tr></table></figure>\n<p>slave节点43配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\">--安装slave半同步插件</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=43</span><br><span class=\"line\">rpl_semi_sync_slave_enabled</span><br><span class=\"line\">log-bin=/mysql/log/binlog</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mysql/log &amp;&amp; <span class=\"built_in\">chown</span> -R mysql.mysql /mysql</span><br><span class=\"line\">systemctl restart mysqld.service</span><br><span class=\"line\">select @@rpl_semi_sync_slave_enabled;  </span><br><span class=\"line\"></span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.127&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"></span><br><span class=\"line\">start slave</span><br></pre></td></tr></table></figure>\n<p>到这里我们的半同步复制就基本上完成了，由于这里是基于全新机器，所以比较快，当然如果是现有数据，直接备份主机还原的从鸡上就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看半同步策略</span><br><span class=\"line\">show global variables like <span class=\"string\">&#x27;%semi%&#x27;</span>;</span><br><span class=\"line\">--查看有几个节点</span><br><span class=\"line\">show global status like <span class=\"string\">&#x27;%semi%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>这里我们来测试下半同步的原理（至少有一个节点同步成功才会给客户端返回成功，当然也有可能是超时，超时时间可自定义）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#首先我们测试从机是否能够同步</span></span><br><span class=\"line\">Master</span><br><span class=\"line\">mysql&gt; create database testdb1;</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Slave-1</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| Database              |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| db1                   |</span><br><span class=\"line\">| information_schema    |</span><br><span class=\"line\">| mysql                 |</span><br><span class=\"line\">| performance_schema    |</span><br><span class=\"line\">| sys                   |</span><br><span class=\"line\">| testdb1               |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">6 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Slave-2</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| Database              |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">| db1                   |</span><br><span class=\"line\">| information_schema    |</span><br><span class=\"line\">| mysql                 |</span><br><span class=\"line\">| performance_schema    |</span><br><span class=\"line\">| sys                   |</span><br><span class=\"line\">| testdb1               |</span><br><span class=\"line\">+-----------------------+</span><br><span class=\"line\">6 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到都没问题，那我们停掉一台从机，再写入数据试试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop mysqld.service</span><br><span class=\"line\"></span><br><span class=\"line\">create database testdb2;</span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>还是没问题，我我们停掉第二台主机试试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop mysqld.service</span><br><span class=\"line\">create database testdb3;</span><br><span class=\"line\">Query OK, 1 row affected (10.00 sec)</span><br></pre></td></tr></table></figure>\n<p>现在可以看到，当我们把两台从机停了之后，主机不知道找谁写入了，虽然如此，但还是有一个超时机制，默认10s。10s后不管有没有其他从机连上，都会提交本次写入。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--修改超时配置my.cnf</span><br><span class=\"line\">rpl_semi_sync_master_timeout=3000</span><br></pre></td></tr></table></figure>\n\n<p>总结：半同步复制是 MySQL 的一种数据复制方式，相对于异步复制，它提高了数据复制的安全性，同时保持了较高的性能。半同步复制的基本思路是：当主库执行一个事务后，只有等到至少一个从库接收并写入了该事务才会提交成功。这样可以保证从库的数据和主库的数据是同步的。（PS：如果从机全部掉线也不是不可能）<br>半同步复制的好处是：提高数据复制的安全性，防止从库数据丢失。相对于同步复制，半同步复制的性能有所提高，因为主库不需要等待所有从库都接收并写入数据。半同步复制的缺点是：相对于异步复制，半同步复制会增加主库的负载，因为主库需要等待至少一个从库接收数据。但总的来说，半同步复制是一种较好的数据复制方式，它提高了数据复制的安全性，同时也能保持较高的性能。<br>同时我们还可以使用复制过滤器让从节点仅复制指定的数据库，或指定数据库的指定表，有兴趣的可以自行尝试。其实现方法就是往mysql配置文件写黑白名单。</p>\n"},{"title":"实现基于分布式的LAMP架构，并将NFS实时同步到备份服务器","date":"2023-05-11T14:10:00.000Z","_content":"\n本次实验机器全部为ubuntu22.04，如果使用redhat，稍有不同架构图如下\n![分布式LAMP架构](/images/实战.png)\n\nDNS配置 ip：172.18.0.122\n添加2个web的域名解析信息\n```bash\nbash <(curl -Ls http://pan.alybaba.top:81/script/install_dns.sh) 或者\nwget -qO- http://pan.alybaba.top:81/script/install_dns.sh | bash\necho \"www        A  172.18.0.129\" >> /etc/bind/wang.org.zone\n#该脚本只会添加一个解析，执行完毕后，请手动添加另一个解析进去\n```\n\nweb1  ip:172.18.0.121\n```bash\napt  update && apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip\n#安装相关软件\nwget https://wordpress.org/latest.zip  \n#下载wordpress\nunzip latest.zip\n#解压\nmv wordpress/    /var/www/html/\n#放置网页根目录，注意这里是把目录移动过去，如果您是把wordpress目录下的文件全部移动过去，请把index.html删除，下面也不用配置主站点目录了\nufw allow 80/tcp\n#开启端口\nsed -i 's,/var/www/html,/var/www/html/wordpress,g' /etc/apache2/sites-available/000-default.conf\n#配置主站点目录\nsystemctl start apache2\n#重启生效\n\nrsync -av /var/www/html/wordpress/* 172.18.0.131:/data/wordpress\n#把文件拷贝至nfs服务\nrm -rf   /var/www/html/wordpress\n#当nfs备份完后，可以删除或者是移动到其他目录\necho \"172.18.0.131:/data/    /var/www/html/    nfs  _netdev  0  0\" >> /etc/fstab\n#挂载nfs服务，这里是删除的wordpress目录，已经备份到nfs服务器中\nmount -a\n#重新挂载fstab\n```\n\nweb2   ip:172.18.0.129\n```bash\napt update && apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip\nmv wordpress/    /var/www/html/\nufw allow 80/tcp\nsed -i 's,/var/www/html,/var/www/html/wordpress,g' /etc/apache2/sites-available/000-default.conf\nsystemctl start apache2\n\nrm -rf   /var/www/html/wordpress\necho \"172.18.0.131:/data/ /var/www/html/ nfs _netdev 0 0\" >> /etc/fstab\nmount -a\n```\n\n\n\nmysql master ip：172.18.0.130，创建wordpress账户，并授权。配置为master节点\n```bash\napt update && apt install mysql-server\n#安装mysql服务\nufw allow 3306/tcp\n#开启mysql端口\nsed -i 's/^bind-address/#&/'  /etc/mysql/mysql.conf.d/mysqld.cnf\n#取消localhost监听，就是本机访问\necho \"server-id = 130\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#增加唯一server-id\nsystemctl start mysql\n#启动mysql服务\ncreate user backuser@'172.18.0.%' identified by '1234567890';\n#创建主从同步账号\ngrant replication slave on *.* to backuser@'172.18.0.%';\n#给与主从同步权限\nreset master;\n#重置binlog，然后去配置主从同步\ncreate user wordpress@'172.18.0.%' identified by 'wordpress123'\n#创建wordpress登录用户\ngrant all on wordpress.* to wordpress@'172.18.0.%'\n#给与相关权限，可以去检查用户是否同步\n```\n\nmysql  ip：172.18.0.133  配置slave节点\n```bash\napt update && apt install mysql-server\nufw allow 3306/tcp\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 133\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql\n复制以下语句\nCHANGE MASTER TO MASTER_HOST='172.18.0.130',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步\nshow slave status\\G\n#查看slave同步状态\nselect user,host from mysql.user;\n#测试账号是否同步\n```\n\n\nnfs  ip：172.18.0.131 配置nfs \n```bash\nmkdir /data/wordpress && mkdir /etc/exports.d\n#创建文件存放目录和扩展配置文件目录\nvim /etc/exports.d/wordpress.exports\n/data/wordpress 172.18.0.0/24(rw)\n:wq\n#配置存放目录，以及可挂载网段\nexportsfs -v\n#查看可挂载目录\nexportsfs -r\n#重载配置文件\nexportsfs -v\nchown -R www-data.www-data /data/wordpress\n#修改相应权限，方便写入\n#这里做完之后去web主机进行挂载，原文件可以删除，也可以备份\n\nwget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz\n#下载sersync，如下载不了，请export http_proxy=http://ipaddress:port或者export ALL_PROXY=socks5://ipaddress:port\n#还有很多的代理工具，如squid等等，请自行百度\ntar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/\n#解压文件至目录，可随意\nln -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin\n#添加环境变量\n#ln -s GNU-Linux-x86 sersync\nvim /usr/local/GNU-Linux-x86/confxml\n  <!-- #默认解压出来，只需要修改有注释的几行-->\n        <exclude expression=\"^static/*\"></exclude>\n    </filter>\n    <inotify>\n        <delete start=\"true\"/>\n        <createFolder start=\"true\"/>\n        <createFile start=\"false\"/>\n        <closeWrite start=\"true\"/>\n        <moveFrom start=\"true\"/>\n        <moveTo start=\"true\"/>\n        <attrib start=\"true\"/>\n        <modify start=\"false\"/>\n    </inotify>\n\n    <sersync>\n        <localpath watch=\"/data/wordpress\">                                 \n                                   <!-- #本地目录-->\n                <remote ip=\"172.18.0.132\" name=\"/data/backup\"/>  \n  <!--#备份服务器ip和备份目录，注意，如果是rsync，name则需要改成相应的模块名称-->\n            <!--<remote ip=\"192.168.8.39\" name=\"tongbu\"/>-->\n            <!--<remote ip=\"192.168.8.40\" name=\"tongbu\"/>-->\n        </localpath>\n        <rsync>\n            <commonParams params=\"-artuz\"/>\n            <auth start=\"false\" users=\"rsyncuser\" passwordfile=\"/etc/rsync.pas\"/> \n<!--rsync配置，这边就使用ssh了，所以rsync为false，如果使用rsync，则为true。ssh则需要改为false-->\n            <userDefinedPort start=\"false\" port=\"874\"/><!-- port=874 -->\n            <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n            <ssh start=\"true\"/>                                                                       #开启ssh同步协议\n        </rsync>\n        <failLog path=\"/tmp/rsync_fail_log.sh\" timeToExecute=\"60\"/><!--default every 60mins execute once-->\n        <crontab start=\"false\" schedule=\"600\"><!--600mins-->\n            <crontabfilter start=\"false\">\n                <exclude expression=\"*.php\"></exclude>\n                <exclude expression=\"info/*\"></exclude>\n            </crontabfilter>\n        </crontab>\n        <plugin start=\"false\" name=\"command\"/>\n    </sersync>\n\n    <plugin name=\"command\">\n        <param prefix=\"/bin/sh\" suffix=\"\" ignoreError=\"true\"/>  <!--prefix /opt/tongbu/mmm.sh suffix-->\n        <filter start=\"false\">\n            <include expression=\"(.*)\\.php\"/>\n            <include expression=\"(.*)\\.sh\"/>\n        </filter>\n    </plugin>\n<plugin name=\"socket\">\n        <localpath watch=\"/opt/tongbu\">\n            <deshost ip=\"192.168.138.20\" port=\"8009\"/>\n        </localpath>\n    </plugin>\n    <plugin name=\"refreshCDN\">\n        <localpath watch=\"/data0/htdocs/cms.xoyo.com/site/\">\n            <cdninfo domainname=\"ccms.chinacache.com\" port=\"80\" username=\"xxxx\" passwd=\"xxxx\"/>\n            <sendurl base=\"http://pic.xoyo.com/cms\"/>\n            <regexurl regex=\"false\" match=\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"/>\n        </localpath>\n    </plugin>\n</head>\n\nnohup sersync2 -dro /usr/local/sersync/confxml.xml &>/dev/null &\n#后台运行sersync程序\n```\n\nbackup 备份nfs ip：172.18.0.132\n```bash\nmkdir /data/backup \n#创建备份目录\n```\n在这里测试的话，我们可以开2个终端一个打开nfs，一个打开backup查看创建删除nfs下的/data/wordpress文件，然后查看backup下的/data/backup/下是否进行同步\n\n到这里已经搭建完成了，我们大概就实现了分布式的LAMP架构，总结一下，我们在dns服务也可配置主从，并且还可配置mysql中间件，实现更安全，更可靠的LAMP分布式架构，有兴趣的可以自行尝试。其次使用dns服务器作为负载均衡不是一个很好的选项，因为基于DNS的负载均衡具有一定的局限性，例如客户端可能会缓存DNS解析结果，导致一段时间内不会重新解析域名，这可能会导致负载不均衡。一般来说，推荐使用 nginx upstream。同时我们在配置的时候需要注意理清思路，一步一个脚印，先配置什么，后配置什么，不能乱了阵脚。同时注意的时在开启各种服务时，应该养成使用 systemctl enable server_name 配置开机自启动的好习惯，这里时实验环境，这个在实际生产环境要切记。\n","source":"_posts/分布式LAMP.md","raw":"---\ntitle: 实现基于分布式的LAMP架构，并将NFS实时同步到备份服务器\ndate: 2023-05-11 22:10:00\ntags:\n---\n\n本次实验机器全部为ubuntu22.04，如果使用redhat，稍有不同架构图如下\n![分布式LAMP架构](/images/实战.png)\n\nDNS配置 ip：172.18.0.122\n添加2个web的域名解析信息\n```bash\nbash <(curl -Ls http://pan.alybaba.top:81/script/install_dns.sh) 或者\nwget -qO- http://pan.alybaba.top:81/script/install_dns.sh | bash\necho \"www        A  172.18.0.129\" >> /etc/bind/wang.org.zone\n#该脚本只会添加一个解析，执行完毕后，请手动添加另一个解析进去\n```\n\nweb1  ip:172.18.0.121\n```bash\napt  update && apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip\n#安装相关软件\nwget https://wordpress.org/latest.zip  \n#下载wordpress\nunzip latest.zip\n#解压\nmv wordpress/    /var/www/html/\n#放置网页根目录，注意这里是把目录移动过去，如果您是把wordpress目录下的文件全部移动过去，请把index.html删除，下面也不用配置主站点目录了\nufw allow 80/tcp\n#开启端口\nsed -i 's,/var/www/html,/var/www/html/wordpress,g' /etc/apache2/sites-available/000-default.conf\n#配置主站点目录\nsystemctl start apache2\n#重启生效\n\nrsync -av /var/www/html/wordpress/* 172.18.0.131:/data/wordpress\n#把文件拷贝至nfs服务\nrm -rf   /var/www/html/wordpress\n#当nfs备份完后，可以删除或者是移动到其他目录\necho \"172.18.0.131:/data/    /var/www/html/    nfs  _netdev  0  0\" >> /etc/fstab\n#挂载nfs服务，这里是删除的wordpress目录，已经备份到nfs服务器中\nmount -a\n#重新挂载fstab\n```\n\nweb2   ip:172.18.0.129\n```bash\napt update && apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip\nmv wordpress/    /var/www/html/\nufw allow 80/tcp\nsed -i 's,/var/www/html,/var/www/html/wordpress,g' /etc/apache2/sites-available/000-default.conf\nsystemctl start apache2\n\nrm -rf   /var/www/html/wordpress\necho \"172.18.0.131:/data/ /var/www/html/ nfs _netdev 0 0\" >> /etc/fstab\nmount -a\n```\n\n\n\nmysql master ip：172.18.0.130，创建wordpress账户，并授权。配置为master节点\n```bash\napt update && apt install mysql-server\n#安装mysql服务\nufw allow 3306/tcp\n#开启mysql端口\nsed -i 's/^bind-address/#&/'  /etc/mysql/mysql.conf.d/mysqld.cnf\n#取消localhost监听，就是本机访问\necho \"server-id = 130\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#增加唯一server-id\nsystemctl start mysql\n#启动mysql服务\ncreate user backuser@'172.18.0.%' identified by '1234567890';\n#创建主从同步账号\ngrant replication slave on *.* to backuser@'172.18.0.%';\n#给与主从同步权限\nreset master;\n#重置binlog，然后去配置主从同步\ncreate user wordpress@'172.18.0.%' identified by 'wordpress123'\n#创建wordpress登录用户\ngrant all on wordpress.* to wordpress@'172.18.0.%'\n#给与相关权限，可以去检查用户是否同步\n```\n\nmysql  ip：172.18.0.133  配置slave节点\n```bash\napt update && apt install mysql-server\nufw allow 3306/tcp\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 133\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql\n复制以下语句\nCHANGE MASTER TO MASTER_HOST='172.18.0.130',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步\nshow slave status\\G\n#查看slave同步状态\nselect user,host from mysql.user;\n#测试账号是否同步\n```\n\n\nnfs  ip：172.18.0.131 配置nfs \n```bash\nmkdir /data/wordpress && mkdir /etc/exports.d\n#创建文件存放目录和扩展配置文件目录\nvim /etc/exports.d/wordpress.exports\n/data/wordpress 172.18.0.0/24(rw)\n:wq\n#配置存放目录，以及可挂载网段\nexportsfs -v\n#查看可挂载目录\nexportsfs -r\n#重载配置文件\nexportsfs -v\nchown -R www-data.www-data /data/wordpress\n#修改相应权限，方便写入\n#这里做完之后去web主机进行挂载，原文件可以删除，也可以备份\n\nwget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz\n#下载sersync，如下载不了，请export http_proxy=http://ipaddress:port或者export ALL_PROXY=socks5://ipaddress:port\n#还有很多的代理工具，如squid等等，请自行百度\ntar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/\n#解压文件至目录，可随意\nln -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin\n#添加环境变量\n#ln -s GNU-Linux-x86 sersync\nvim /usr/local/GNU-Linux-x86/confxml\n  <!-- #默认解压出来，只需要修改有注释的几行-->\n        <exclude expression=\"^static/*\"></exclude>\n    </filter>\n    <inotify>\n        <delete start=\"true\"/>\n        <createFolder start=\"true\"/>\n        <createFile start=\"false\"/>\n        <closeWrite start=\"true\"/>\n        <moveFrom start=\"true\"/>\n        <moveTo start=\"true\"/>\n        <attrib start=\"true\"/>\n        <modify start=\"false\"/>\n    </inotify>\n\n    <sersync>\n        <localpath watch=\"/data/wordpress\">                                 \n                                   <!-- #本地目录-->\n                <remote ip=\"172.18.0.132\" name=\"/data/backup\"/>  \n  <!--#备份服务器ip和备份目录，注意，如果是rsync，name则需要改成相应的模块名称-->\n            <!--<remote ip=\"192.168.8.39\" name=\"tongbu\"/>-->\n            <!--<remote ip=\"192.168.8.40\" name=\"tongbu\"/>-->\n        </localpath>\n        <rsync>\n            <commonParams params=\"-artuz\"/>\n            <auth start=\"false\" users=\"rsyncuser\" passwordfile=\"/etc/rsync.pas\"/> \n<!--rsync配置，这边就使用ssh了，所以rsync为false，如果使用rsync，则为true。ssh则需要改为false-->\n            <userDefinedPort start=\"false\" port=\"874\"/><!-- port=874 -->\n            <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n            <ssh start=\"true\"/>                                                                       #开启ssh同步协议\n        </rsync>\n        <failLog path=\"/tmp/rsync_fail_log.sh\" timeToExecute=\"60\"/><!--default every 60mins execute once-->\n        <crontab start=\"false\" schedule=\"600\"><!--600mins-->\n            <crontabfilter start=\"false\">\n                <exclude expression=\"*.php\"></exclude>\n                <exclude expression=\"info/*\"></exclude>\n            </crontabfilter>\n        </crontab>\n        <plugin start=\"false\" name=\"command\"/>\n    </sersync>\n\n    <plugin name=\"command\">\n        <param prefix=\"/bin/sh\" suffix=\"\" ignoreError=\"true\"/>  <!--prefix /opt/tongbu/mmm.sh suffix-->\n        <filter start=\"false\">\n            <include expression=\"(.*)\\.php\"/>\n            <include expression=\"(.*)\\.sh\"/>\n        </filter>\n    </plugin>\n<plugin name=\"socket\">\n        <localpath watch=\"/opt/tongbu\">\n            <deshost ip=\"192.168.138.20\" port=\"8009\"/>\n        </localpath>\n    </plugin>\n    <plugin name=\"refreshCDN\">\n        <localpath watch=\"/data0/htdocs/cms.xoyo.com/site/\">\n            <cdninfo domainname=\"ccms.chinacache.com\" port=\"80\" username=\"xxxx\" passwd=\"xxxx\"/>\n            <sendurl base=\"http://pic.xoyo.com/cms\"/>\n            <regexurl regex=\"false\" match=\"cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images\"/>\n        </localpath>\n    </plugin>\n</head>\n\nnohup sersync2 -dro /usr/local/sersync/confxml.xml &>/dev/null &\n#后台运行sersync程序\n```\n\nbackup 备份nfs ip：172.18.0.132\n```bash\nmkdir /data/backup \n#创建备份目录\n```\n在这里测试的话，我们可以开2个终端一个打开nfs，一个打开backup查看创建删除nfs下的/data/wordpress文件，然后查看backup下的/data/backup/下是否进行同步\n\n到这里已经搭建完成了，我们大概就实现了分布式的LAMP架构，总结一下，我们在dns服务也可配置主从，并且还可配置mysql中间件，实现更安全，更可靠的LAMP分布式架构，有兴趣的可以自行尝试。其次使用dns服务器作为负载均衡不是一个很好的选项，因为基于DNS的负载均衡具有一定的局限性，例如客户端可能会缓存DNS解析结果，导致一段时间内不会重新解析域名，这可能会导致负载不均衡。一般来说，推荐使用 nginx upstream。同时我们在配置的时候需要注意理清思路，一步一个脚印，先配置什么，后配置什么，不能乱了阵脚。同时注意的时在开启各种服务时，应该养成使用 systemctl enable server_name 配置开机自启动的好习惯，这里时实验环境，这个在实际生产环境要切记。\n","slug":"分布式LAMP","published":1,"updated":"2023-05-11T14:36:47.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhpyh4ql0003md8fblk5a200","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本次实验机器全部为ubuntu22.04，如果使用redhat，稍有不同架构图如下<br><img src=\"/images/%E5%AE%9E%E6%88%98.png\" alt=\"分布式LAMP架构\"></p>\n<p>DNS配置 ip：172.18.0.122<br>添加2个web的域名解析信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Ls http://pan.alybaba.top:81/script/install_dns.sh) 或者</span><br><span class=\"line\">wget -qO- http://pan.alybaba.top:81/script/install_dns.sh | bash</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;www        A  172.18.0.129&quot;</span> &gt;&gt; /etc/bind/wang.org.zone</span><br><span class=\"line\"><span class=\"comment\">#该脚本只会添加一个解析，执行完毕后，请手动添加另一个解析进去</span></span><br></pre></td></tr></table></figure>\n\n<p>web1  ip:172.18.0.121</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt  update &amp;&amp; apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip</span><br><span class=\"line\"><span class=\"comment\">#安装相关软件</span></span><br><span class=\"line\">wget https://wordpress.org/latest.zip  </span><br><span class=\"line\"><span class=\"comment\">#下载wordpress</span></span><br><span class=\"line\">unzip latest.zip</span><br><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/    /var/www/html/</span><br><span class=\"line\"><span class=\"comment\">#放置网页根目录，注意这里是把目录移动过去，如果您是把wordpress目录下的文件全部移动过去，请把index.html删除，下面也不用配置主站点目录了</span></span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\"><span class=\"comment\">#开启端口</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s,/var/www/html,/var/www/html/wordpress,g&#x27;</span> /etc/apache2/sites-available/000-default.conf</span><br><span class=\"line\"><span class=\"comment\">#配置主站点目录</span></span><br><span class=\"line\">systemctl start apache2</span><br><span class=\"line\"><span class=\"comment\">#重启生效</span></span><br><span class=\"line\"></span><br><span class=\"line\">rsync -av /var/www/html/wordpress/* 172.18.0.131:/data/wordpress</span><br><span class=\"line\"><span class=\"comment\">#把文件拷贝至nfs服务</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf   /var/www/html/wordpress</span><br><span class=\"line\"><span class=\"comment\">#当nfs备份完后，可以删除或者是移动到其他目录</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.131:/data/    /var/www/html/    nfs  _netdev  0  0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\">#挂载nfs服务，这里是删除的wordpress目录，已经备份到nfs服务器中</span></span><br><span class=\"line\">mount -a</span><br><span class=\"line\"><span class=\"comment\">#重新挂载fstab</span></span><br></pre></td></tr></table></figure>\n\n<p>web2   ip:172.18.0.129</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip</span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/    /var/www/html/</span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s,/var/www/html,/var/www/html/wordpress,g&#x27;</span> /etc/apache2/sites-available/000-default.conf</span><br><span class=\"line\">systemctl start apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf   /var/www/html/wordpress</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.131:/data/ /var/www/html/ nfs _netdev 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n\n\n\n<p>mysql master ip：172.18.0.130，创建wordpress账户，并授权。配置为master节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install mysql-server</span><br><span class=\"line\"><span class=\"comment\">#安装mysql服务</span></span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\"><span class=\"comment\">#开启mysql端口</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span>  /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#取消localhost监听，就是本机访问</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;server-id = 130&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#增加唯一server-id</span></span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\"><span class=\"comment\">#启动mysql服务</span></span><br><span class=\"line\">create user backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;1234567890&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#创建主从同步账号</span></span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#给与主从同步权限</span></span><br><span class=\"line\">reset master;</span><br><span class=\"line\"><span class=\"comment\">#重置binlog，然后去配置主从同步</span></span><br><span class=\"line\">create user wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;wordpress123&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#创建wordpress登录用户</span></span><br><span class=\"line\">grant all on wordpress.* to wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#给与相关权限，可以去检查用户是否同步</span></span><br></pre></td></tr></table></figure>\n\n<p>mysql  ip：172.18.0.133  配置slave节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install mysql-server</span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 133\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\">复制以下语句</span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.130&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"><span class=\"comment\">#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步</span></span><br><span class=\"line\">show slave status\\G</span><br><span class=\"line\"><span class=\"comment\">#查看slave同步状态</span></span><br><span class=\"line\">select user,host from mysql.user;</span><br><span class=\"line\"><span class=\"comment\">#测试账号是否同步</span></span><br></pre></td></tr></table></figure>\n\n\n<p>nfs  ip：172.18.0.131 配置nfs </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/wordpress &amp;&amp; <span class=\"built_in\">mkdir</span> /etc/exports.d</span><br><span class=\"line\"><span class=\"comment\">#创建文件存放目录和扩展配置文件目录</span></span><br><span class=\"line\">vim /etc/exports.d/wordpress.exports</span><br><span class=\"line\">/data/wordpress 172.18.0.0/24(rw)</span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"comment\">#配置存放目录，以及可挂载网段</span></span><br><span class=\"line\">exportsfs -v</span><br><span class=\"line\"><span class=\"comment\">#查看可挂载目录</span></span><br><span class=\"line\">exportsfs -r</span><br><span class=\"line\"><span class=\"comment\">#重载配置文件</span></span><br><span class=\"line\">exportsfs -v</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www-data.www-data /data/wordpress</span><br><span class=\"line\"><span class=\"comment\">#修改相应权限，方便写入</span></span><br><span class=\"line\"><span class=\"comment\">#这里做完之后去web主机进行挂载，原文件可以删除，也可以备份</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#下载sersync，如下载不了，请export http_proxy=http://ipaddress:port或者export ALL_PROXY=socks5://ipaddress:port</span></span><br><span class=\"line\"><span class=\"comment\">#还有很多的代理工具，如squid等等，请自行百度</span></span><br><span class=\"line\">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"comment\">#解压文件至目录，可随意</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\">#添加环境变量</span></span><br><span class=\"line\"><span class=\"comment\">#ln -s GNU-Linux-x86 sersync</span></span><br><span class=\"line\">vim /usr/local/GNU-Linux-x86/confxml</span><br><span class=\"line\">  &lt;!-- <span class=\"comment\">#默认解压出来，只需要修改有注释的几行--&gt;</span></span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;inotify&gt;</span><br><span class=\"line\">        &lt;delete start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFolder start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFile start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;closeWrite start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveFrom start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveTo start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;attrib start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;modify start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/inotify&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;sersync&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data/wordpress&quot;</span>&gt;                                 </span><br><span class=\"line\">                                   &lt;!-- <span class=\"comment\">#本地目录--&gt;</span></span><br><span class=\"line\">                &lt;remote ip=<span class=\"string\">&quot;172.18.0.132&quot;</span> name=<span class=\"string\">&quot;/data/backup&quot;</span>/&gt;  </span><br><span class=\"line\">  &lt;!--<span class=\"comment\">#备份服务器ip和备份目录，注意，如果是rsync，name则需要改成相应的模块名称--&gt;</span></span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.39&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.40&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">        &lt;rsync&gt;</span><br><span class=\"line\">            &lt;commonParams params=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;auth start=<span class=\"string\">&quot;false&quot;</span> <span class=\"built_in\">users</span>=<span class=\"string\">&quot;rsyncuser&quot;</span> passwordfile=<span class=\"string\">&quot;/etc/rsync.pas&quot;</span>/&gt; </span><br><span class=\"line\">&lt;!--rsync配置，这边就使用ssh了，所以rsync为<span class=\"literal\">false</span>，如果使用rsync，则为<span class=\"literal\">true</span>。ssh则需要改为<span class=\"literal\">false</span>--&gt;</span><br><span class=\"line\">            &lt;userDefinedPort start=<span class=\"string\">&quot;false&quot;</span> port=<span class=\"string\">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class=\"line\">            &lt;<span class=\"built_in\">timeout</span> start=<span class=\"string\">&quot;false&quot;</span> time=<span class=\"string\">&quot;100&quot;</span>/&gt;&lt;!-- <span class=\"built_in\">timeout</span>=100 --&gt;</span><br><span class=\"line\">            &lt;ssh start=<span class=\"string\">&quot;true&quot;</span>/&gt;                                                                       <span class=\"comment\">#开启ssh同步协议</span></span><br><span class=\"line\">        &lt;/rsync&gt;</span><br><span class=\"line\">        &lt;failLog path=<span class=\"string\">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class=\"string\">&quot;60&quot;</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class=\"line\">        &lt;crontab start=<span class=\"string\">&quot;false&quot;</span> schedule=<span class=\"string\">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt;</span><br><span class=\"line\">            &lt;crontabfilter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">            &lt;/crontabfilter&gt;</span><br><span class=\"line\">        &lt;/crontab&gt;</span><br><span class=\"line\">        &lt;plugin start=<span class=\"string\">&quot;false&quot;</span> name=<span class=\"string\">&quot;command&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/sersync&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;command&quot;</span>&gt;</span><br><span class=\"line\">        &lt;param prefix=<span class=\"string\">&quot;/bin/sh&quot;</span> suffix=<span class=\"string\">&quot;&quot;</span> ignoreError=<span class=\"string\">&quot;true&quot;</span>/&gt;  &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class=\"line\">        &lt;filter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.php&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.sh&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/filter&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;plugin name=<span class=\"string\">&quot;socket&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/opt/tongbu&quot;</span>&gt;</span><br><span class=\"line\">            &lt;deshost ip=<span class=\"string\">&quot;192.168.138.20&quot;</span> port=<span class=\"string\">&quot;8009&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;refreshCDN&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br><span class=\"line\">            &lt;cdninfo domainname=<span class=\"string\">&quot;ccms.chinacache.com&quot;</span> port=<span class=\"string\">&quot;80&quot;</span> username=<span class=\"string\">&quot;xxxx&quot;</span> passwd=<span class=\"string\">&quot;xxxx&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;sendurl base=<span class=\"string\">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;regexurl regex=<span class=\"string\">&quot;false&quot;</span> match=<span class=\"string\">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> sersync2 -dro /usr/local/sersync/confxml.xml &amp;&gt;/dev/null &amp;</span><br><span class=\"line\"><span class=\"comment\">#后台运行sersync程序</span></span><br></pre></td></tr></table></figure>\n\n<p>backup 备份nfs ip：172.18.0.132</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/backup </span><br><span class=\"line\"><span class=\"comment\">#创建备份目录</span></span><br></pre></td></tr></table></figure>\n<p>在这里测试的话，我们可以开2个终端一个打开nfs，一个打开backup查看创建删除nfs下的&#x2F;data&#x2F;wordpress文件，然后查看backup下的&#x2F;data&#x2F;backup&#x2F;下是否进行同步</p>\n<p>到这里已经搭建完成了，我们大概就实现了分布式的LAMP架构，总结一下，我们在dns服务也可配置主从，并且还可配置mysql中间件，实现更安全，更可靠的LAMP分布式架构，有兴趣的可以自行尝试。其次使用dns服务器作为负载均衡不是一个很好的选项，因为基于DNS的负载均衡具有一定的局限性，例如客户端可能会缓存DNS解析结果，导致一段时间内不会重新解析域名，这可能会导致负载不均衡。一般来说，推荐使用 nginx upstream。同时我们在配置的时候需要注意理清思路，一步一个脚印，先配置什么，后配置什么，不能乱了阵脚。同时注意的时在开启各种服务时，应该养成使用 systemctl enable server_name 配置开机自启动的好习惯，这里时实验环境，这个在实际生产环境要切记。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>本次实验机器全部为ubuntu22.04，如果使用redhat，稍有不同架构图如下<br><img src=\"/images/%E5%AE%9E%E6%88%98.png\" alt=\"分布式LAMP架构\"></p>\n<p>DNS配置 ip：172.18.0.122<br>添加2个web的域名解析信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Ls http://pan.alybaba.top:81/script/install_dns.sh) 或者</span><br><span class=\"line\">wget -qO- http://pan.alybaba.top:81/script/install_dns.sh | bash</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;www        A  172.18.0.129&quot;</span> &gt;&gt; /etc/bind/wang.org.zone</span><br><span class=\"line\"><span class=\"comment\">#该脚本只会添加一个解析，执行完毕后，请手动添加另一个解析进去</span></span><br></pre></td></tr></table></figure>\n\n<p>web1  ip:172.18.0.121</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt  update &amp;&amp; apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip</span><br><span class=\"line\"><span class=\"comment\">#安装相关软件</span></span><br><span class=\"line\">wget https://wordpress.org/latest.zip  </span><br><span class=\"line\"><span class=\"comment\">#下载wordpress</span></span><br><span class=\"line\">unzip latest.zip</span><br><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/    /var/www/html/</span><br><span class=\"line\"><span class=\"comment\">#放置网页根目录，注意这里是把目录移动过去，如果您是把wordpress目录下的文件全部移动过去，请把index.html删除，下面也不用配置主站点目录了</span></span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\"><span class=\"comment\">#开启端口</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s,/var/www/html,/var/www/html/wordpress,g&#x27;</span> /etc/apache2/sites-available/000-default.conf</span><br><span class=\"line\"><span class=\"comment\">#配置主站点目录</span></span><br><span class=\"line\">systemctl start apache2</span><br><span class=\"line\"><span class=\"comment\">#重启生效</span></span><br><span class=\"line\"></span><br><span class=\"line\">rsync -av /var/www/html/wordpress/* 172.18.0.131:/data/wordpress</span><br><span class=\"line\"><span class=\"comment\">#把文件拷贝至nfs服务</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf   /var/www/html/wordpress</span><br><span class=\"line\"><span class=\"comment\">#当nfs备份完后，可以删除或者是移动到其他目录</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.131:/data/    /var/www/html/    nfs  _netdev  0  0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\">#挂载nfs服务，这里是删除的wordpress目录，已经备份到nfs服务器中</span></span><br><span class=\"line\">mount -a</span><br><span class=\"line\"><span class=\"comment\">#重新挂载fstab</span></span><br></pre></td></tr></table></figure>\n\n<p>web2   ip:172.18.0.129</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install php libapache2-mod-php php-mysql  apache2  nfs-kernel-server unzip</span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/    /var/www/html/</span><br><span class=\"line\">ufw allow 80/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s,/var/www/html,/var/www/html/wordpress,g&#x27;</span> /etc/apache2/sites-available/000-default.conf</span><br><span class=\"line\">systemctl start apache2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf   /var/www/html/wordpress</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.18.0.131:/data/ /var/www/html/ nfs _netdev 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n\n\n\n<p>mysql master ip：172.18.0.130，创建wordpress账户，并授权。配置为master节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install mysql-server</span><br><span class=\"line\"><span class=\"comment\">#安装mysql服务</span></span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\"><span class=\"comment\">#开启mysql端口</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span>  /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#取消localhost监听，就是本机访问</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;server-id = 130&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#增加唯一server-id</span></span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\"><span class=\"comment\">#启动mysql服务</span></span><br><span class=\"line\">create user backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;1234567890&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#创建主从同步账号</span></span><br><span class=\"line\">grant replication slave on *.* to backuser@<span class=\"string\">&#x27;172.18.0.%&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#给与主从同步权限</span></span><br><span class=\"line\">reset master;</span><br><span class=\"line\"><span class=\"comment\">#重置binlog，然后去配置主从同步</span></span><br><span class=\"line\">create user wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span> identified by <span class=\"string\">&#x27;wordpress123&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#创建wordpress登录用户</span></span><br><span class=\"line\">grant all on wordpress.* to wordpress@<span class=\"string\">&#x27;172.18.0.%&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#给与相关权限，可以去检查用户是否同步</span></span><br></pre></td></tr></table></figure>\n\n<p>mysql  ip：172.18.0.133  配置slave节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install mysql-server</span><br><span class=\"line\">ufw allow 3306/tcp</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 133\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql</span><br><span class=\"line\">复制以下语句</span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;172.18.0.130&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"><span class=\"comment\">#主从同步配置，然后去master创建wordpress用户，这里图省事，也可以用其他的写入语句检测主从同步</span></span><br><span class=\"line\">show slave status\\G</span><br><span class=\"line\"><span class=\"comment\">#查看slave同步状态</span></span><br><span class=\"line\">select user,host from mysql.user;</span><br><span class=\"line\"><span class=\"comment\">#测试账号是否同步</span></span><br></pre></td></tr></table></figure>\n\n\n<p>nfs  ip：172.18.0.131 配置nfs </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/wordpress &amp;&amp; <span class=\"built_in\">mkdir</span> /etc/exports.d</span><br><span class=\"line\"><span class=\"comment\">#创建文件存放目录和扩展配置文件目录</span></span><br><span class=\"line\">vim /etc/exports.d/wordpress.exports</span><br><span class=\"line\">/data/wordpress 172.18.0.0/24(rw)</span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"comment\">#配置存放目录，以及可挂载网段</span></span><br><span class=\"line\">exportsfs -v</span><br><span class=\"line\"><span class=\"comment\">#查看可挂载目录</span></span><br><span class=\"line\">exportsfs -r</span><br><span class=\"line\"><span class=\"comment\">#重载配置文件</span></span><br><span class=\"line\">exportsfs -v</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www-data.www-data /data/wordpress</span><br><span class=\"line\"><span class=\"comment\">#修改相应权限，方便写入</span></span><br><span class=\"line\"><span class=\"comment\">#这里做完之后去web主机进行挂载，原文件可以删除，也可以备份</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#下载sersync，如下载不了，请export http_proxy=http://ipaddress:port或者export ALL_PROXY=socks5://ipaddress:port</span></span><br><span class=\"line\"><span class=\"comment\">#还有很多的代理工具，如squid等等，请自行百度</span></span><br><span class=\"line\">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"comment\">#解压文件至目录，可随意</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\">#添加环境变量</span></span><br><span class=\"line\"><span class=\"comment\">#ln -s GNU-Linux-x86 sersync</span></span><br><span class=\"line\">vim /usr/local/GNU-Linux-x86/confxml</span><br><span class=\"line\">  &lt;!-- <span class=\"comment\">#默认解压出来，只需要修改有注释的几行--&gt;</span></span><br><span class=\"line\">        &lt;exclude expression=<span class=\"string\">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;inotify&gt;</span><br><span class=\"line\">        &lt;delete start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFolder start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;createFile start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;closeWrite start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveFrom start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;moveTo start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;attrib start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;modify start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/inotify&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;sersync&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data/wordpress&quot;</span>&gt;                                 </span><br><span class=\"line\">                                   &lt;!-- <span class=\"comment\">#本地目录--&gt;</span></span><br><span class=\"line\">                &lt;remote ip=<span class=\"string\">&quot;172.18.0.132&quot;</span> name=<span class=\"string\">&quot;/data/backup&quot;</span>/&gt;  </span><br><span class=\"line\">  &lt;!--<span class=\"comment\">#备份服务器ip和备份目录，注意，如果是rsync，name则需要改成相应的模块名称--&gt;</span></span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.39&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.40&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">        &lt;rsync&gt;</span><br><span class=\"line\">            &lt;commonParams params=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;auth start=<span class=\"string\">&quot;false&quot;</span> <span class=\"built_in\">users</span>=<span class=\"string\">&quot;rsyncuser&quot;</span> passwordfile=<span class=\"string\">&quot;/etc/rsync.pas&quot;</span>/&gt; </span><br><span class=\"line\">&lt;!--rsync配置，这边就使用ssh了，所以rsync为<span class=\"literal\">false</span>，如果使用rsync，则为<span class=\"literal\">true</span>。ssh则需要改为<span class=\"literal\">false</span>--&gt;</span><br><span class=\"line\">            &lt;userDefinedPort start=<span class=\"string\">&quot;false&quot;</span> port=<span class=\"string\">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class=\"line\">            &lt;<span class=\"built_in\">timeout</span> start=<span class=\"string\">&quot;false&quot;</span> time=<span class=\"string\">&quot;100&quot;</span>/&gt;&lt;!-- <span class=\"built_in\">timeout</span>=100 --&gt;</span><br><span class=\"line\">            &lt;ssh start=<span class=\"string\">&quot;true&quot;</span>/&gt;                                                                       <span class=\"comment\">#开启ssh同步协议</span></span><br><span class=\"line\">        &lt;/rsync&gt;</span><br><span class=\"line\">        &lt;failLog path=<span class=\"string\">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class=\"string\">&quot;60&quot;</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class=\"line\">        &lt;crontab start=<span class=\"string\">&quot;false&quot;</span> schedule=<span class=\"string\">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt;</span><br><span class=\"line\">            &lt;crontabfilter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">                &lt;exclude expression=<span class=\"string\">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class=\"line\">            &lt;/crontabfilter&gt;</span><br><span class=\"line\">        &lt;/crontab&gt;</span><br><span class=\"line\">        &lt;plugin start=<span class=\"string\">&quot;false&quot;</span> name=<span class=\"string\">&quot;command&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/sersync&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;command&quot;</span>&gt;</span><br><span class=\"line\">        &lt;param prefix=<span class=\"string\">&quot;/bin/sh&quot;</span> suffix=<span class=\"string\">&quot;&quot;</span> ignoreError=<span class=\"string\">&quot;true&quot;</span>/&gt;  &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt;</span><br><span class=\"line\">        &lt;filter start=<span class=\"string\">&quot;false&quot;</span>&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.php&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;include expression=<span class=\"string\">&quot;(.*)\\.sh&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/filter&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;plugin name=<span class=\"string\">&quot;socket&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/opt/tongbu&quot;</span>&gt;</span><br><span class=\"line\">            &lt;deshost ip=<span class=\"string\">&quot;192.168.138.20&quot;</span> port=<span class=\"string\">&quot;8009&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;plugin name=<span class=\"string\">&quot;refreshCDN&quot;</span>&gt;</span><br><span class=\"line\">        &lt;localpath watch=<span class=\"string\">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt;</span><br><span class=\"line\">            &lt;cdninfo domainname=<span class=\"string\">&quot;ccms.chinacache.com&quot;</span> port=<span class=\"string\">&quot;80&quot;</span> username=<span class=\"string\">&quot;xxxx&quot;</span> passwd=<span class=\"string\">&quot;xxxx&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;sendurl base=<span class=\"string\">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;regexurl regex=<span class=\"string\">&quot;false&quot;</span> match=<span class=\"string\">&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> sersync2 -dro /usr/local/sersync/confxml.xml &amp;&gt;/dev/null &amp;</span><br><span class=\"line\"><span class=\"comment\">#后台运行sersync程序</span></span><br></pre></td></tr></table></figure>\n\n<p>backup 备份nfs ip：172.18.0.132</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/backup </span><br><span class=\"line\"><span class=\"comment\">#创建备份目录</span></span><br></pre></td></tr></table></figure>\n<p>在这里测试的话，我们可以开2个终端一个打开nfs，一个打开backup查看创建删除nfs下的&#x2F;data&#x2F;wordpress文件，然后查看backup下的&#x2F;data&#x2F;backup&#x2F;下是否进行同步</p>\n<p>到这里已经搭建完成了，我们大概就实现了分布式的LAMP架构，总结一下，我们在dns服务也可配置主从，并且还可配置mysql中间件，实现更安全，更可靠的LAMP分布式架构，有兴趣的可以自行尝试。其次使用dns服务器作为负载均衡不是一个很好的选项，因为基于DNS的负载均衡具有一定的局限性，例如客户端可能会缓存DNS解析结果，导致一段时间内不会重新解析域名，这可能会导致负载不均衡。一般来说，推荐使用 nginx upstream。同时我们在配置的时候需要注意理清思路，一步一个脚印，先配置什么，后配置什么，不能乱了阵脚。同时注意的时在开启各种服务时，应该养成使用 systemctl enable server_name 配置开机自启动的好习惯，这里时实验环境，这个在实际生产环境要切记。</p>\n"},{"title":"Tomcat和JDK源码简单安装","date":"2023-05-24T14:36:00.000Z","_content":"### 简单介绍下JDK\n### JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\n### Oracle JDK Version\n![Oracle JDK Version](/images/JDK.png)\n# Tomcat\n### Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。\n### Tomcat Version\n![Tomcat Version](/images/tomcat.png)\n### 那么接下来我们就来简单的安装一下\n## JDK源安装\n```bash\nyum list |grep jdk\n#redhat系列查看包信息，注意如果没有安装JDK，将会附加安装\napt list| grep jdk\n#debian系列查看包信息\nyum install jdk-version\n#redhat系列安装\napt install jdk-version\n#debian系列安装\njava -version\n#如果没问题的话，这里可以查看java版本了\n```\n## JDK包安装\n- [https://www.oracle.com/java/technologies/downloads/#java17](https://www.oracle.com/java/technologies/downloads/#java17)\n- [https://www.oracle.com/java/technologies/downloads/#java8](https://www.oracle.com/java/technologies/downloads/#java8)\n### 我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\n```bash\nyum install jdk-version.rpm\nvim   /etc/profile.d/jdk.sh\nexport JAVA_HOME=/usr/java/default\nexport PATH=$JAVA_HOME/bin:$PATH\n#配置变量\n#export JRE_HOME=$JAVA_HOME/jre\n#export CLASSPATH=$JAVA_HOME/lib/:$JRE_HOME/lib/\n#这两项非必需\nsource  /etc/profile.d/jdk.sh或\n.  /etc/profile.d/jdk.sh\n#生效变量\njava -version\nrpm -ql jdk-version.rpm\n#查看安装信息\n```\n## JDK二进制文件安装\n### 链接在上方，tar.gz为编译好的二进制文件，下载即可。\n```bash\ntar xf    jdk-version.tar.gz   -C   /usr/local/\ncd /usr/local\nln -s jdk-name    jdk\nvim   /etc/profile.d/jdk.sh\nexport JAVA_HOME=/usr/local/jdk\nexport PATH=$PATH:$JAVA_HOME/bin\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=.:$JAVA_HOME/lib/:$JRE_HOME/lib/\n\nsource /etc/profile.d/jdk.sh\njava -version\n```\n## Tomcat安装\n```bash\nwget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.89/bin/apache-tomcat-8.5.89.tar.gz\ntar  xf  apache-tomcat-8.5.89.tar.gz -C /usr/local\ncd /usr/local\nln -s  apache-tomcat-8.5.89  tomcat \necho 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh\n.  /etc/profile.d/tomcat.sh\nuseradd -r -s /sbin/nologin tomcat\n#创建运行用户\nchown -R tomcat.tomcat /usr/local/tomcat/\necho   'JAVA_HOME=/usr/local/jdk'   /usr/local/tomcat/conf/tomcat.conf\n#写配置文件\nvim /lib/systemd/system/tomcat.service\n[Service]\nType=forking\n\nEnvironmentFile=/usr/local/tomcat/conf/tomcat.conf\n#Environment=JAVA_HOME=/usr/local/jdk\n#如果没有写配置文件可启用此选项\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nPrivateTmp=true\nUser=tomcat\nGroup=tomcat\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\n#只要修改了systemctl service文件，都需要运行该命令\nsysemctl start tomcat\nsystemctl status tomcat\nss -ntl\n#默认是8080tcp端口\n```\n### 到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\n\n### 部分参考文献\n- [https://cwiki.apache.org/confluence/display/tomcat/](https://cwiki.apache.org/confluence/display/tomcat/)\n- [https://tomcat.apache.org/whichversion.html](https://tomcat.apache.org/whichversion.html)\n\n\n\n","source":"_posts/JDK_or_Tomcat.md","raw":"---\ntitle: Tomcat和JDK源码简单安装\ndate: 2023-05-24 22:36:00\ntags:\n---\n### 简单介绍下JDK\n### JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\n### Oracle JDK Version\n![Oracle JDK Version](/images/JDK.png)\n# Tomcat\n### Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。\n### Tomcat Version\n![Tomcat Version](/images/tomcat.png)\n### 那么接下来我们就来简单的安装一下\n## JDK源安装\n```bash\nyum list |grep jdk\n#redhat系列查看包信息，注意如果没有安装JDK，将会附加安装\napt list| grep jdk\n#debian系列查看包信息\nyum install jdk-version\n#redhat系列安装\napt install jdk-version\n#debian系列安装\njava -version\n#如果没问题的话，这里可以查看java版本了\n```\n## JDK包安装\n- [https://www.oracle.com/java/technologies/downloads/#java17](https://www.oracle.com/java/technologies/downloads/#java17)\n- [https://www.oracle.com/java/technologies/downloads/#java8](https://www.oracle.com/java/technologies/downloads/#java8)\n### 我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\n```bash\nyum install jdk-version.rpm\nvim   /etc/profile.d/jdk.sh\nexport JAVA_HOME=/usr/java/default\nexport PATH=$JAVA_HOME/bin:$PATH\n#配置变量\n#export JRE_HOME=$JAVA_HOME/jre\n#export CLASSPATH=$JAVA_HOME/lib/:$JRE_HOME/lib/\n#这两项非必需\nsource  /etc/profile.d/jdk.sh或\n.  /etc/profile.d/jdk.sh\n#生效变量\njava -version\nrpm -ql jdk-version.rpm\n#查看安装信息\n```\n## JDK二进制文件安装\n### 链接在上方，tar.gz为编译好的二进制文件，下载即可。\n```bash\ntar xf    jdk-version.tar.gz   -C   /usr/local/\ncd /usr/local\nln -s jdk-name    jdk\nvim   /etc/profile.d/jdk.sh\nexport JAVA_HOME=/usr/local/jdk\nexport PATH=$PATH:$JAVA_HOME/bin\nexport JRE_HOME=$JAVA_HOME/jre\nexport CLASSPATH=.:$JAVA_HOME/lib/:$JRE_HOME/lib/\n\nsource /etc/profile.d/jdk.sh\njava -version\n```\n## Tomcat安装\n```bash\nwget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.89/bin/apache-tomcat-8.5.89.tar.gz\ntar  xf  apache-tomcat-8.5.89.tar.gz -C /usr/local\ncd /usr/local\nln -s  apache-tomcat-8.5.89  tomcat \necho 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh\n.  /etc/profile.d/tomcat.sh\nuseradd -r -s /sbin/nologin tomcat\n#创建运行用户\nchown -R tomcat.tomcat /usr/local/tomcat/\necho   'JAVA_HOME=/usr/local/jdk'   /usr/local/tomcat/conf/tomcat.conf\n#写配置文件\nvim /lib/systemd/system/tomcat.service\n[Service]\nType=forking\n\nEnvironmentFile=/usr/local/tomcat/conf/tomcat.conf\n#Environment=JAVA_HOME=/usr/local/jdk\n#如果没有写配置文件可启用此选项\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nPrivateTmp=true\nUser=tomcat\nGroup=tomcat\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\n#只要修改了systemctl service文件，都需要运行该命令\nsysemctl start tomcat\nsystemctl status tomcat\nss -ntl\n#默认是8080tcp端口\n```\n### 到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\n\n### 部分参考文献\n- [https://cwiki.apache.org/confluence/display/tomcat/](https://cwiki.apache.org/confluence/display/tomcat/)\n- [https://tomcat.apache.org/whichversion.html](https://tomcat.apache.org/whichversion.html)\n\n\n\n","slug":"JDK_or_Tomcat","published":1,"updated":"2023-05-25T00:49:13.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5doc00008x8f3pgi30u4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"简单介绍下JDK\"><a href=\"#简单介绍下JDK\" class=\"headerlink\" title=\"简单介绍下JDK\"></a>简单介绍下JDK</h3><h3 id=\"JDK（Java-Development-Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\"><a href=\"#JDK（Java-Development-Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\" class=\"headerlink\" title=\"JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\"></a>JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。</h3><h3 id=\"Oracle-JDK-Version\"><a href=\"#Oracle-JDK-Version\" class=\"headerlink\" title=\"Oracle JDK Version\"></a>Oracle JDK Version</h3><p><img src=\"/images/JDK.png\" alt=\"Oracle JDK Version\"></p>\n<h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><h3 id=\"Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java-Servlet、JavaServer-Pages（JSP）和Java-WebSocket等技术的支持，用于构建和运行Java-Web应用程序。\"><a href=\"#Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java-Servlet、JavaServer-Pages（JSP）和Java-WebSocket等技术的支持，用于构建和运行Java-Web应用程序。\" class=\"headerlink\" title=\"Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。\"></a>Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。</h3><h3 id=\"Tomcat-Version\"><a href=\"#Tomcat-Version\" class=\"headerlink\" title=\"Tomcat Version\"></a>Tomcat Version</h3><p><img src=\"/images/tomcat.png\" alt=\"Tomcat Version\"></p>\n<h3 id=\"那么接下来我们就来简单的安装一下\"><a href=\"#那么接下来我们就来简单的安装一下\" class=\"headerlink\" title=\"那么接下来我们就来简单的安装一下\"></a>那么接下来我们就来简单的安装一下</h3><h2 id=\"JDK源安装\"><a href=\"#JDK源安装\" class=\"headerlink\" title=\"JDK源安装\"></a>JDK源安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list |grep jdk</span><br><span class=\"line\"><span class=\"comment\">#redhat系列查看包信息，注意如果没有安装JDK，将会附加安装</span></span><br><span class=\"line\">apt list| grep jdk</span><br><span class=\"line\"><span class=\"comment\">#debian系列查看包信息</span></span><br><span class=\"line\">yum install jdk-version</span><br><span class=\"line\"><span class=\"comment\">#redhat系列安装</span></span><br><span class=\"line\">apt install jdk-version</span><br><span class=\"line\"><span class=\"comment\">#debian系列安装</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"comment\">#如果没问题的话，这里可以查看java版本了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JDK包安装\"><a href=\"#JDK包安装\" class=\"headerlink\" title=\"JDK包安装\"></a>JDK包安装</h2><ul>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/#java17\">https://www.oracle.com/java/technologies/downloads/#java17</a></li>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/#java8\">https://www.oracle.com/java/technologies/downloads/#java8</a></li>\n</ul>\n<h3 id=\"我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\"><a href=\"#我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\" class=\"headerlink\" title=\"我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\"></a>我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jdk-version.rpm</span><br><span class=\"line\">vim   /etc/profile.d/jdk.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/default</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"comment\">#配置变量</span></span><br><span class=\"line\"><span class=\"comment\">#export JRE_HOME=$JAVA_HOME/jre</span></span><br><span class=\"line\"><span class=\"comment\">#export CLASSPATH=$JAVA_HOME/lib/:$JRE_HOME/lib/</span></span><br><span class=\"line\"><span class=\"comment\">#这两项非必需</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>  /etc/profile.d/jdk.sh或</span><br><span class=\"line\">.  /etc/profile.d/jdk.sh</span><br><span class=\"line\"><span class=\"comment\">#生效变量</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\">rpm -ql jdk-version.rpm</span><br><span class=\"line\"><span class=\"comment\">#查看安装信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JDK二进制文件安装\"><a href=\"#JDK二进制文件安装\" class=\"headerlink\" title=\"JDK二进制文件安装\"></a>JDK二进制文件安装</h2><h3 id=\"链接在上方，tar-gz为编译好的二进制文件，下载即可。\"><a href=\"#链接在上方，tar-gz为编译好的二进制文件，下载即可。\" class=\"headerlink\" title=\"链接在上方，tar.gz为编译好的二进制文件，下载即可。\"></a>链接在上方，tar.gz为编译好的二进制文件，下载即可。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf    jdk-version.tar.gz   -C   /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s jdk-name    jdk</span><br><span class=\"line\">vim   /etc/profile.d/jdk.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$JAVA_HOME</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/:<span class=\"variable\">$JRE_HOME</span>/lib/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/jdk.sh</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat安装\"><a href=\"#Tomcat安装\" class=\"headerlink\" title=\"Tomcat安装\"></a>Tomcat安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.89/bin/apache-tomcat-8.5.89.tar.gz</span><br><span class=\"line\">tar  xf  apache-tomcat-8.5.89.tar.gz -C /usr/local</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s  apache-tomcat-8.5.89  tomcat </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class=\"line\">.  /etc/profile.d/tomcat.sh</span><br><span class=\"line\">useradd -r -s /sbin/nologin tomcat</span><br><span class=\"line\"><span class=\"comment\">#创建运行用户</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class=\"line\"><span class=\"built_in\">echo</span>   <span class=\"string\">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>   /usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#写配置文件</span></span><br><span class=\"line\">vim /lib/systemd/system/tomcat.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\"></span><br><span class=\"line\">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有写配置文件可启用此选项</span></span><br><span class=\"line\">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class=\"line\">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=tomcat</span><br><span class=\"line\">Group=tomcat</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"comment\">#只要修改了systemctl service文件，都需要运行该命令</span></span><br><span class=\"line\">sysemctl start tomcat</span><br><span class=\"line\">systemctl status tomcat</span><br><span class=\"line\">ss -ntl</span><br><span class=\"line\"><span class=\"comment\">#默认是8080tcp端口</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"到这里，我们的JDK和Tomcat就部署完毕了，Tomcat-是一个受欢迎的-Java-Web-应用服务器，适用于中小型项目和简单的-Web-应用。它的轻量级、易用性和良好的-Java-EE-兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root-ps：不合理操作，不建议。反正tomcat也不会部署在公网-生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\"><a href=\"#到这里，我们的JDK和Tomcat就部署完毕了，Tomcat-是一个受欢迎的-Java-Web-应用服务器，适用于中小型项目和简单的-Web-应用。它的轻量级、易用性和良好的-Java-EE-兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root-ps：不合理操作，不建议。反正tomcat也不会部署在公网-生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\" class=\"headerlink\" title=\"到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\"></a>到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。</h3><h3 id=\"部分参考文献\"><a href=\"#部分参考文献\" class=\"headerlink\" title=\"部分参考文献\"></a>部分参考文献</h3><ul>\n<li><a href=\"https://cwiki.apache.org/confluence/display/tomcat/\">https://cwiki.apache.org/confluence/display/tomcat/</a></li>\n<li><a href=\"https://tomcat.apache.org/whichversion.html\">https://tomcat.apache.org/whichversion.html</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"简单介绍下JDK\"><a href=\"#简单介绍下JDK\" class=\"headerlink\" title=\"简单介绍下JDK\"></a>简单介绍下JDK</h3><h3 id=\"JDK（Java-Development-Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\"><a href=\"#JDK（Java-Development-Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\" class=\"headerlink\" title=\"JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。\"></a>JDK（Java Development Kit）是Java开发工具包的缩写，它是用于开发和编译Java应用程序的软件包。JDK是Oracle提供的官方Java开发工具，包含了用于编译、调试和运行Java程序所需的各种工具和库。JDK是Java开发的核心工具，它为开发人员提供了创建、编译和调试Java应用程序所需的环境和工具。使用JDK，开发人员可以编写跨平台的Java代码，并将其编译为可在任何支持Java的平台上运行的字节码。</h3><h3 id=\"Oracle-JDK-Version\"><a href=\"#Oracle-JDK-Version\" class=\"headerlink\" title=\"Oracle JDK Version\"></a>Oracle JDK Version</h3><p><img src=\"/images/JDK.png\" alt=\"Oracle JDK Version\"></p>\n<h1 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h1><h3 id=\"Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java-Servlet、JavaServer-Pages（JSP）和Java-WebSocket等技术的支持，用于构建和运行Java-Web应用程序。\"><a href=\"#Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java-Servlet、JavaServer-Pages（JSP）和Java-WebSocket等技术的支持，用于构建和运行Java-Web应用程序。\" class=\"headerlink\" title=\"Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。\"></a>Tomcat是一个开源的、轻量级的、基于Java的Web应用服务器，它提供了Java Servlet、JavaServer Pages（JSP）和Java WebSocket等技术的支持，用于构建和运行Java Web应用程序。</h3><h3 id=\"Tomcat-Version\"><a href=\"#Tomcat-Version\" class=\"headerlink\" title=\"Tomcat Version\"></a>Tomcat Version</h3><p><img src=\"/images/tomcat.png\" alt=\"Tomcat Version\"></p>\n<h3 id=\"那么接下来我们就来简单的安装一下\"><a href=\"#那么接下来我们就来简单的安装一下\" class=\"headerlink\" title=\"那么接下来我们就来简单的安装一下\"></a>那么接下来我们就来简单的安装一下</h3><h2 id=\"JDK源安装\"><a href=\"#JDK源安装\" class=\"headerlink\" title=\"JDK源安装\"></a>JDK源安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list |grep jdk</span><br><span class=\"line\"><span class=\"comment\">#redhat系列查看包信息，注意如果没有安装JDK，将会附加安装</span></span><br><span class=\"line\">apt list| grep jdk</span><br><span class=\"line\"><span class=\"comment\">#debian系列查看包信息</span></span><br><span class=\"line\">yum install jdk-version</span><br><span class=\"line\"><span class=\"comment\">#redhat系列安装</span></span><br><span class=\"line\">apt install jdk-version</span><br><span class=\"line\"><span class=\"comment\">#debian系列安装</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"comment\">#如果没问题的话，这里可以查看java版本了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JDK包安装\"><a href=\"#JDK包安装\" class=\"headerlink\" title=\"JDK包安装\"></a>JDK包安装</h2><ul>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/#java17\">https://www.oracle.com/java/technologies/downloads/#java17</a></li>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/#java8\">https://www.oracle.com/java/technologies/downloads/#java8</a></li>\n</ul>\n<h3 id=\"我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\"><a href=\"#我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\" class=\"headerlink\" title=\"我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装\"></a>我是在甲骨文下载的，需要注册账号，同时java17有dep包，java8只能二进制安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jdk-version.rpm</span><br><span class=\"line\">vim   /etc/profile.d/jdk.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/default</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"comment\">#配置变量</span></span><br><span class=\"line\"><span class=\"comment\">#export JRE_HOME=$JAVA_HOME/jre</span></span><br><span class=\"line\"><span class=\"comment\">#export CLASSPATH=$JAVA_HOME/lib/:$JRE_HOME/lib/</span></span><br><span class=\"line\"><span class=\"comment\">#这两项非必需</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>  /etc/profile.d/jdk.sh或</span><br><span class=\"line\">.  /etc/profile.d/jdk.sh</span><br><span class=\"line\"><span class=\"comment\">#生效变量</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\">rpm -ql jdk-version.rpm</span><br><span class=\"line\"><span class=\"comment\">#查看安装信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JDK二进制文件安装\"><a href=\"#JDK二进制文件安装\" class=\"headerlink\" title=\"JDK二进制文件安装\"></a>JDK二进制文件安装</h2><h3 id=\"链接在上方，tar-gz为编译好的二进制文件，下载即可。\"><a href=\"#链接在上方，tar-gz为编译好的二进制文件，下载即可。\" class=\"headerlink\" title=\"链接在上方，tar.gz为编译好的二进制文件，下载即可。\"></a>链接在上方，tar.gz为编译好的二进制文件，下载即可。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf    jdk-version.tar.gz   -C   /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s jdk-name    jdk</span><br><span class=\"line\">vim   /etc/profile.d/jdk.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$JAVA_HOME</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/:<span class=\"variable\">$JRE_HOME</span>/lib/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/jdk.sh</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat安装\"><a href=\"#Tomcat安装\" class=\"headerlink\" title=\"Tomcat安装\"></a>Tomcat安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.89/bin/apache-tomcat-8.5.89.tar.gz</span><br><span class=\"line\">tar  xf  apache-tomcat-8.5.89.tar.gz -C /usr/local</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s  apache-tomcat-8.5.89  tomcat </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class=\"line\">.  /etc/profile.d/tomcat.sh</span><br><span class=\"line\">useradd -r -s /sbin/nologin tomcat</span><br><span class=\"line\"><span class=\"comment\">#创建运行用户</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class=\"line\"><span class=\"built_in\">echo</span>   <span class=\"string\">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>   /usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#写配置文件</span></span><br><span class=\"line\">vim /lib/systemd/system/tomcat.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\"></span><br><span class=\"line\">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有写配置文件可启用此选项</span></span><br><span class=\"line\">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class=\"line\">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=tomcat</span><br><span class=\"line\">Group=tomcat</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"comment\">#只要修改了systemctl service文件，都需要运行该命令</span></span><br><span class=\"line\">sysemctl start tomcat</span><br><span class=\"line\">systemctl status tomcat</span><br><span class=\"line\">ss -ntl</span><br><span class=\"line\"><span class=\"comment\">#默认是8080tcp端口</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"到这里，我们的JDK和Tomcat就部署完毕了，Tomcat-是一个受欢迎的-Java-Web-应用服务器，适用于中小型项目和简单的-Web-应用。它的轻量级、易用性和良好的-Java-EE-兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root-ps：不合理操作，不建议。反正tomcat也不会部署在公网-生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\"><a href=\"#到这里，我们的JDK和Tomcat就部署完毕了，Tomcat-是一个受欢迎的-Java-Web-应用服务器，适用于中小型项目和简单的-Web-应用。它的轻量级、易用性和良好的-Java-EE-兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root-ps：不合理操作，不建议。反正tomcat也不会部署在公网-生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\" class=\"headerlink\" title=\"到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。\"></a>到这里，我们的JDK和Tomcat就部署完毕了，Tomcat 是一个受欢迎的 Java Web 应用服务器，适用于中小型项目和简单的 Web 应用。它的轻量级、易用性和良好的 Java EE 兼容性是其主要优点。值得注意的是，如果你要让Tomcat运行在80端口，需要在service文件里修改用户为root(ps：不合理操作，不建议。反正tomcat也不会部署在公网)生产环境一般是使用nginx这类高并发web服务器反向代理tomcat。同时部署tomcat前需要先部署JDK环境。还有我们在选择版本时应根据项目的实际情况进行抉择。</h3><h3 id=\"部分参考文献\"><a href=\"#部分参考文献\" class=\"headerlink\" title=\"部分参考文献\"></a>部分参考文献</h3><ul>\n<li><a href=\"https://cwiki.apache.org/confluence/display/tomcat/\">https://cwiki.apache.org/confluence/display/tomcat/</a></li>\n<li><a href=\"https://tomcat.apache.org/whichversion.html\">https://tomcat.apache.org/whichversion.html</a></li>\n</ul>\n"},{"title":"LVS-NAT四层+nginx七层","date":"2023-05-30T08:30:00.000Z","_content":"\n### 1. 环境准备\n#### 多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\n![高可用](/images/high_use.png)\n#### IP分配无\n\n#### 注意事项\n1. 关闭selinux和防火墙还有把默认表清空一下，实际生产案例可能会配置专有端口，这个自己注意\n2. NAT和仅主机仅仅是模拟内外网不同网段，一定要理解含义\n3. 这里只使用了LVS-NAT负载均衡转发，DR多网段和tunnel模式可参考我前面写的修改，删除和增加部分网络参数即可\n4. 默认使用ROOT用户\n5. 一步一步来，喝杯咖啡\n#### 普及下LVS和Nginx\n1. 四层转发不握手\n2. 七层转发需要握手\n3. LVS只支持四层转发\n4. nginx支持七层和虚拟四层转发\n5. LVS基于内核转发，LVS适合高并发，大规模的网络负载均衡场景\n6. nginx更适合HTTP转发\n### 2. LVS配置\n```bash\nsystemctl stop firewalld\niptables -F\nsystemctl disable firewalld\nhostnamectl set-hostname LVS\n#添加第二块网卡，这里偷懒使用自动获取的IP，格式如下\n#centos网卡配置\nNAME=ens160\n#我这是ens160，这个名是别名，但也是命令行操作网卡的名称\nDEVICE=ens160\nBOOTPROTO=static\n#这里写none也ok，意思是静态配置，如果为dhcp则是自动获取\nIPADDR=10.0.0.100\nGATEWAY=10.0.0.2\nNETMASK=255.255.255.0\n#PREFIX=CIDR MASK，掩码两种格式，3个255为24\nDNS=you dns\nDNS1=you dns1\nONBOOT=yes\n#开启启动\n\n#ubuntu网卡配置 这里注意，ubuntu是用的netplan管理网卡，格式是yaml，需要注意层级格式\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: false\n      #这里改为no也行\n      addresses:\n        - 10.0.0.100/24\n      gateway4: 10.0.0.2\n      nameservers:\n        addresses: [10.0.0.2,223.5.5.5]\n  version: 2\n\n#网卡2同理，网卡名不同而已，注意层级格式就ok，这里就不在过多赘述\nmount /dev/cdrom /mnt\nyum install ipvsadm keepalived -y\n#这里采用源安装，如果是其他方式安装请注意路径\necho \"1\" > /proc/sys/net/ipv4/ip_forward\n#这里是临时生效，永久生效请写sysctl配置文件\nvim /etc/keepalived/keepalived.conf\n#这里要注意，默认配置文件名不可自定义,为keepalived.conf,如需自定义请使用keepalived -f /you/config/path\nglobal_defs {\n    #全局配置\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   #邮箱配置\n   router_id LVS_1\n   #唯一性\n}\nvrrp_instance VI_1 {\n    #节点配置\n    state MASTER\n    #主为MASTER，备为BACKUP\n    interface ens224\n    #绑定的网卡\n    virtual_router_id 51\n    #组ID，同一组的主备需一样\n    priority 100\n    #启动时的优先级谁高则谁成为MASTER\n    advert_int 1\n    #主备同步检查，默认1秒\n    authentication {\n    #主备之间认证，防止其他节点窜入\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n    #对外公网IP\n        192.168.59.135\n    #LVS主IP\n        192.168.59.136\n    #LVS备IP\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    #内网定义\n    state MASTER\n    interface ens160\n    virtual_router_id 62\n    priority 100\n    #NVIP漂移地址，一定要和启动优先级一样，不然我估计会出错\n    advert_int 1\nauthentication {\n    auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        10.0.0.10\n    #NVIP，漂移VIP\n    }\n}\nvirtual_server 192.168.59.135 80{\n    #主机配置\n    delay_loop 6\n    #健康检查间隔6秒\n    lb_algo rr\n    #LVS调度算法为rr也就是轮询。rr|wrr|lc|wlc|lblc|sh|dh\n    lb_kind NAT\n    #负载均衡转发规则为NAT。DR|TUN|FULLTUN\n    !nat_mask 255.255.255.0\n    #我在ubuntu上可指定掩码，rokey上检查时会报错，所以我注释了，无伤大雅\n    persistence_timeout 50\n    #50秒内访问同一台后端服务器，可注释\n    protocol TCP\n    #协议为TCP\n\n    real_server 10.0.0.202 80 {\n        #后端真实服务器配置\n        weight 1\n        #权重\n           TCP_CHECK {\n                connect_timeout 10\n                #连接超时时间\n                !nb_get_retry 3\n                #重连次数，这里检查配置时也出错，干脆注释了\n                delay_before_retry 3\n                #重连间隔时间\n                connect_port 80\n                #健康检查时的端口\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n        }\n    }\n}\nvirtual_server 192.168.59.136 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    !nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 10.0.0.202 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n}\n#然后配置文件是叹号注释，写#纯属习惯\n\nkeepalived -t\n#检查配置文件，没有输出则正确。默认为/etc/keepalived/keepalived.conf,可自定义路径\nsystemctl start keepalived \nsystemctl status keepalived \n#这里应看到以下信息，备用机则会显示remove VIPs。这里是根据启动优先级来决定谁是主备，而不是MSTER，BACKUP名称来决定，NVIP也是根据优先级\nLVS Keepalived_vrrp[949]: (LAN_GATEWAY) Entering MASTER STATE\nLVS Keepalived_vrrp[949]: (LAN_GATEWAY) setting VIPs.\nLVS Keepalived_vrrp[949]: (LAN_GATEWAY) Sending/queueing gratuitous ARPs on ens160 for 10.0.0.10\nLVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 for 10.0.0.10\nLVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 for 10.0.0.10\nipvsadm -Ln\n#keepalived配置里会自动配置ipvsadm，所以输入命令可直接查看\nsystemctl stop keepalived \n#如果你停止服务，那么备用机会立马抢占NVIP，成为新的MASTR进行转发服务\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n\n### 3. LVS-BAK配置\n```bash\nhostnamectl set-hostname LVS-BAK\nsystemctl stop firewalld\nsystemctl disable firewalld\niptables -F\n#ip配置同LVS\nmount /dev/sr0 /mnt/\n#sr0和cdrom都是指光盘的意思，因为我挂了光盘的原因，安装软件会报错，所以必须挂载，没有装AUTO挂载\nyum -y install ipvsadm keepalived\necho \"1\" > /proc/sys/net/ipv4/ip_forward\nvim /etc/keepalived/keepalived.conf\nglobal_defs {\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   router_id LVS_2\n   #唯一标识\n}\nvrrp_instance VI_1 {\n    state BACKUP\n    #备份\n    interface ens224\n    virtual_router_id 51\n    priority 99\n    #优先级不能超过MASTER，不然VIP会漂移过来\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.59.135\n        192.168.59.136\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    state BACKUP\n    interface ens160\n    virtual_router_id 62\n    priority 99\n    advert_int 1\nauthentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        10.0.0.10\n    }\n}\nvirtual_server 192.168.59.135 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    !nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 10.0.0.202 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n               connect_port 80\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\ndelay_before_retry 3\n                connect_port 80\n        }\n    }\n}\nvirtual_server 192.168.59.136 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    !nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 10.0.0.202 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n          }\n    }\n}\n\nkeepalived -t\nsystemctl start keepalived \nsystemctl status keepalived\nipvsadm -Ln\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n### 4. Nginx-1配置\n```bash\nhostnamectl set-hostname Nginx-1\nsystemctl stop firewalld\nsystemctl disable firewalld\niptables -F\n#一定要关闭selinux\nmount /dev/cdrom /mnt\n#因为我写了本地yum仓配置，又没装auto挂载，所以需要手动挂载，可以安装软件包的话，就忽略这步\nyum install nginx -y\n#这里就源安装了，如果是编译安装，请注意自己自己的配置\nroute del default\n#删除默认路由，临时删除，重启会重新生成，主要是改文件比较烦\nroute add default gw 10.0.0.10\n#添加到LVS的默认路由\nroute -n\n#查看路由\nvim /etc/nginx/conf.d/10.0.0.130.conf\n#名字随意，需.conf结尾\nupstream wordpress {\n        server 10.0.0.130;\n        #这里是后端的wordpress，默认算法是轮询，权重都为1\n        server 10.0.0.134;\n}\n\nserver{\n        listen 80 default_server;\n        #这里配置为默认主页，检查配置时如果报错请删除其他文件的default_server即可\n        server_name www.lee.com;      \n        #配置域名解析，感兴趣的可自行配置，2种方法，一是搭建DNS server，二是直接在hosts文件添加解析\n        location / {\n                proxy_pass http://wordpress;\n        #反代后端wordpress服务器\n        }\nnginx -t\nnginx -s reload\n#这里没有编译安装nginx，如果是编译安装，配置文件目录可能不同，请注意\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n### 5. Nginx-2配置\n```bash\nhostnamectl set-hostname Nginx-2\nsystemctl stop firewalld\nsystemctl disable firewalld\niptables -F\nmount /dev/cdrom /mnt\nyum install nginx -y\nvim /etc/nginx/conf.d/10.0.0.204.conf\nupstream jpress{\n        server 10.0.0.204:8080;\n        #这里是后端的jpress\n        server 10.0.0.205:8080;\n}\nserver{\n        listen 80 default_server;\n        server_name www.lee.org;\n        location / {\n                proxy_pass http://jpress;\n        }\n}\nnginx -t \nnginx -s reload\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n### 6. LNP-1配置\n```bash\nhostnamectl set-hostname LNP-1\nsystemctl stop ufw\n#ubuntu默认防火墙是ufw\nsystemctl disable ufw\niptables -F\n#-F是清空filter表所有规则，流量信息等，如果你其他表有规则，请注意是否冲突\napt install nginx php-fpm php-mysql php-json unzip -y \n#安装若干软件\nrm -rf /etc/nginx/sites-enabled/default\n#改default_server还是提示冲突，我直接删\nvim /etc/nginx/conf.d/sever130.conf\nserver{\n        listen 80;\n        root /data/wordpress/www;\n        index index.php;\n        client_max_body_size 20m;\n        #限制客户端上传文件大小，不配置为不限制\n        location ~ \\.php$|/ping|/php_status{\n            #正则匹配以.php,.ping,.php_status结尾\n                fastcgi_pass 127.0.0.1:9000;\n                #php监控端口，可统一更改为socket路径\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                #指定了FastCGI处理程序需要执行的脚本路径\n                include fastcgi_params;\n                #这个是相对路径，也可绝对路径。fastcgi_params文件会包含一些常用的FastCGI参数配置\n        }\n}\n\n#php配置\nvim /etc/php/8.1/fpm/pool.d/www.conf\n;listen = /run/php/php8.1-fpm.sock\n#这个是socket路径，这里就演示端口了\nlisten = 127.0.0.1:9000\n#可修改0.0.0.0，或者在nginx改为进程文件\npm.status_path = /php_status\n#php部分数据监控\nping.path = /ping\n#检查php存活\n\nvim /etc/php/8.1/fpm/php.ini\npost_max_size = 100M\nupload_max_filesize = 100M\n#这里是修改上传文件限制\n\nmkdir -p /data/wordpress/www\nvim /data/wordpress/www/phpinfo.php\n<?php\nphpinfo();\n?>\n#测试php是否被解析\nsystemctl start nginx\nsystemctl start php8.1-fpm\n\n### wordpress配置\nwget https://wordpress.org/latest.zip\nchown www-data.www-data  wordpress -R\nmv wordpress/* /data/wordpress/www\n#配置完mysql，然后输入本机IP，可以配置wordpress站点了，实测上传大于20mb的文件会出现json错误，需要在NGINX配置文件将client_max_body_size改成你想要的大小，我改成了100就行了\n\n#NFS做完开始在这里挂载\nrsync -a  /data/wordpress/www/*  root@10.0.0.135:/data/wordpress/www/\n#rsync默认递归复制，可 --no-recursion 取消递归，这里把文件复制到NFS\nrm -rf /data/wordpress/www/*\necho \"10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0\"  >> /etc/fstab\n#这里注意别清空了，两个大于号要看清\nmount -a\n#挂载fstab文件\n```\n\n### 7. LNP-2配置\n```bash\nhostnamectl set-hostname LNP-2\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install nginx php-fpm php-mysql php-json -y\nrm -rf /etc/nginx/sites-enabled/default\nvim /etc/nginx/conf.d/sever130.conf\nserver{\n        listen 80;\n        root /data/wordpress/www;\n        index index.php;\n        client_max_body_size 20m;\n        #限制客户端上传文件大小，不配置为不限制\n        location ~ \\.php$|/ping|/php_status{\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                include fastcgi_params;\n        }\n}\n\nphp\nvim /etc/php/8.1/fpm/pool.d/www.conf\n;listen = /run/php/php8.1-fpm.sock\nlisten = 127.0.0.1:9000\npm.status_path = /php_status\nping.path = /ping\n\nvim /etc/php/8.1/fpm/php.ini\npost_max_size = 100M\nupload_max_filesize = 100M\n\nmkdir -p /data/wordpress/www\nvim /data/wordpress/www/phpinfo.php\n<?php\nphpinfo();\n?>\n#测试php是否被解析\nsystemctl start nginx\nsystemctl start php8.1-fpm\n\n#挂载NFS\necho \"10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0\"  >> /etc/fstab\nmount -a\n```\n\n### 8. mysql-Mast配置\n```bash\nhostnamectl set-hostname Mysql-Mast\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install mysql-server -y\n#如果是编译安装，请注意自定义路径，可能会有不同\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\n#开启监听，默认是localhost\necho -e \"server-id = 131 >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#做集群的话每台mysql都需要一个ID识别\nsystemctl start mysql.service\n\nmysql\nmysql> create user backuser@'10.0.0.%' identified by '1234567890';\nmysql> grant replication slave on *.* to backuser@'10.0.0.%';\nmysql> INSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';\n#安装master半同步插件\nmysql> \\! echo  \"rpl_semi_sync_master_enable\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#开启master半同步策略\nmysql> \\! systemctl restart mysql\nmysql> select @@rpl_semi_sync_master_enabled;\n#查看半同步策略是否开启\nmysql> reset master;\n#重置binlog日志，也可以不重置\nmysql> show master status;\n#接下来创建wordpress数据库和用户，顺便也可验证主从同步\nmysql> create database wordpress;\nmysql> create user wordpress@'10.0.0.%' identified by '0987654321';\nmysql> grant all  on wordpress.* to wordpress@'10.0.0.%';\nmysql> select host,user from mysql.user;\n#在slave执行该命令，如果有，mysql就完事了，可去lnp配置wordpress\n\n```\n\n### 9. mysql-Slave-1配置\n```bash\nhostnamectl set-hostname Slave-1\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install mysql-server -y\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 132\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#实际生产案例中slave应只读\nsystemctl start mysql.service\n\nmysql\nmysql> INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n#安装slave半同步插件\nmysql> \\! echo  \"rpl_semi_sync_slave_enabled\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nmysql> \\! echo  \"require_secure_transport = 1\">> /etc/mysql/mysql.conf.d/mysqld.cnf\n#死活连不上，发现开启安全连接秒连，查看master上安全连接是关闭的，百思不得其解，估计只要是master就会默认要求slave开启安全连接\nmysql> \\! systemctl restart mysql.service\nmysql> select @@rpl_semi_sync_slave_enabled; \n#查看半同步插件是否启用\nmysql> CHANGE MASTER TO MASTER_HOST='10.0.0.131',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n#这里是连接master的配置\nmysql> start slave;\n#启动slave\nmysql> show slave status\\G\n#如果没有error，就ok了\n```\n\n### 10. mysql-Slave-2配置\n```bash\nhostnamectl set-hostname Slave-2\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install mysql-server -y\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 133\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql.service\n\n\nmysql> INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\nmysql> \\! echo  \"rpl_semi_sync_slave_enabled\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nmysql> \\! echo  \"require_secure_transport = 1\">> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl restart mysql.service\n\nmysql> select @@rpl_semi_sync_slave_enabled; \nmysql> CHANGE MASTER TO MASTER_HOST='10.0.0.131',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\nmysql> start slave;\nmysql> show slave status\\G\n\n```\n\n\n### 11. NFS配置\n```bash\n#nfs配置\nhostnamectl set-hostname NFS\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install nfs-kernel-server\nmkdir -p /data/{wordpress,tomcat}/{www,www}  -p && mkdir /etc/exports.d\nvim /etc/exports.d/wordpress.exports\n/data/wordpress/www 10.0.0.0/24(rw)\n#这里是wordpress的目录\n\nvim /etc/exports.d/tomcat.exports\n/data/tomcat/www 10.0.0.0/24(rw)\n#这里我把配置文件分开了，也可以放一起\n\nexportfs -v\n#查看\nexportfs -r\n#重读配置文件\nchown -R www-data.www-data /data/wordpress\nchown -R tomcat.tomcat /data/tomcat\nwget http://pan.alybaba.top/soft/sersync2.5.4_64bit_binary_stable_final.tar.gz\n#下载监控软件\ntar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/\n#解压\nln -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin\n#软连接\n或者\ncp -a GNU-Linux-x86   /usr/local/sersync\n#改名复制过来，推荐软连接，容错率高点感觉\necho 'PATH=/usr/local/sersync:$PATH' > /etc/profile.d/sersync.sh\n#写默认路径\nsource /etc/profile.d/sersync.sh\n#生效\nvim /usr/local/sersync/confxml.xml\n#文件太长，我只记几个要改的点\n<attrib start=\"true\"/>\n#这里是监控权限变化，最好开启，默认关闭\n<sersync>\n            <localpath watch=\"/data\">\n            <!--需要监控的目录-->\n            <remote ip=\"10.0.0.136\" name=\"backup\"/>\n            <!--rsync服务器IP，也就是备份服务器地址，name是rsync模块名需一致-->\n            <!--<remote ip=\"192.168.8.39\" name=\"tongbu\"/>-->\n            <!--<remote ip=\"192.168.8.40\" name=\"tongbu\"/>-->\n        </localpath>\n        <rsync>\n            <commonParams params=\"-artuz\"/>\n            <auth start=\"true\" users=\"rsyncuser\" passwordfile=\"/etc/rsync.pas\"/>\n            <!--这里start需改为true，users和密码存放位置可自定义-->\n            <userDefinedPort start=\"false\" port=\"874\"/><!-- port=874 -->\n            <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n            <ssh start=\"false\"/>\n        </rsync>\n#其实还可以使用ssh协议，我前面应该用过\n\necho 123456 > /etc/rsync.pas\nchmod 600   /etc/rsync.pas\nrsync --password-file=/etc/rsync.pas rsync://rsymcser@10.0.0.136/backup\n#测试\nnohup sersync2 -dro /usr/local/sersync/confxml.xml &>/dev/null &\n#后台运行，记得测试文件同步\n```\n\n\n\n### 11. NFS-BAK配置\n```bash\nhostnamectl set-hostname NFS-BAK\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\nvim /etc/rsyncd.conf\n    uid = root\n    gid = root\n    max connections = 0\n    ignore errors\n    exclude = lost+found/\n    log file = /var/log/rsyncd.log\n    pid file = /var/run/rsyncd.pid\n    lock file = /var/run/rsyncd.lock\n    reverse lookup = no\n    [backup]\n    path = /data\n    comment = backup dir\n    read only = no\n    auth users = rsyncuser\n    secrets file = /etc/rsync.pas\n\nmkdir -p /data/wordpress/www\necho \"rsyncuser:123456\" > /etc/rsync.pas\nchmod 600  /etc/rsync.pas\nsystemctl restart rsync\n#这里做完反手去LNP操作，当然如果同步出问题，请systemctl status rsync,查看连接日志排查\n```\n\n### 13. Tomcat-1配置\n```bash\nhostnamectl set-hostname Tomcat-1\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\niptables -F\nmount /dev/cdrom /mnt\nyum install wget rsync -y\n#这里我已经提前下载好了tomcat和jdk\ntar xf apache-tomcat-8.5.89.tar.gz -C /usr/local/\ntar xf jdk-8u371-linux-x64.tar.gz -C /usr/local/\ncd /usr/local/\nln -s jdk1.8.0_371 jdk\nvim /etc/profile.d/jdk.sh\n    export JAVA_HOME=/usr/local/jdk\n    #指定JDK的安装路径\n    export PATH=$PATH:$JAVA_HOME/bin\n    #将JDK的bin目录添加到默认PATH \n    export JRE_HOME=$JAVA_HOME/jre\n    #指定JRE的安装路径\n    export CLASSPATH=.:$JAVA_HOME/lib/:$JRE_HOME/lib/\n    #指定Java类的搜索路径\n\nsource /etc/profile.d/jdk.sh\njava -v\n#测试是否生效\nln -s apache-tomcat-8.5.89 tomcat\necho 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh\n#添加tomcat到默认PATH\n.  /etc/profile.d/tomcat.sh\nuseradd -r -s /sbin/nologin tomcat\n#生产环境最好指定特定统一用户，-r是系统用户，也就是id为1000以下\nchown -R tomcat.tomcat /usr/local/tomcat/\necho   'JAVA_HOME=/usr/local/jdk'  >  /usr/local/tomcat/conf/tomcat.conf\nvim /lib/systemd/system/tomcat.service\n[Service]\nType=forking\n\nEnvironmentFile=/usr/local/tomcat/conf/tomcat.conf\n#Environment=JAVA_HOME=/usr/local/jdk\n#如果没有写配置文件可启用此选项\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nPrivateTmp=true\nUser=tomcat\nGroup=tomcat\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\nsystemctl start tomcat.service\nsystemctl status tomcat.service\nrsync -a ./jdk1.8.0_371  root@10.0.0.205:/usr/local/\nrsync -a ./apache-tomcat-8.5.89  root@10.0.0.205:/usr/local/\nwget wget -O jpress-v5.1.0.tar.gz  'https://gitee.com/JPressProjects/jpress/repository/archive/v5.1.0?format=tar.gz'\ntar xf jpress-v5.1.0.tar.gz\ncd jpress-v5.1.0/\nyum install maven\n#jave编译器，奇怪的是我装这个的时候，附带给我来了一个openjdk8版本的全家桶\nvim /etc/maven/settings.xml\n <mirror>\n                <id>nexus-aliyun</id>\n                <mirrorOf>*</mirrorOf>\n                <name>Nexus aliyun</name>\n                <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror>\n#在mirrors里添加这个镜像，主要是编译的时候加速用\n\nmvn clean install package -Dmaven.test.skip=true\n#编译语句\nmv /usr/local/tomcat/webapps/ROOT  /usr/local/tomcat/webapps/ROOT1\n#把root移走，默认读取的是root下的内容\ncp starter-tomcat/target/starter-tomcat-5.0.war /usr/local/tomcat/webapps/ROOT.war\n#把jpress移进来，改名ROOT\nchown tomcat.tomcat -R  /usr/local/tomcat/webapps/\nvim /usr/local/tomcat/conf/server.xml\n<Host name=\"localhost\"  appBase=\"/data/tomcat/www/webapps\"\n#这里我修改到其他的目录，方便统一挂载NFS\n\nmkdir -p /data/tomcat/www/webapps/\n#如果没有目录重启会报错\nchown tomcat.tomcat /data -R\ncp -a /usr/local/tomcat/webapps/*  ./\nsystemctl restart tomcat\nrsync ./*  -a root@10.0.0.135:/data/tomcat/www/webapps/\n#跟LNP一样，把文件传至nfs\nrm -rf ./*\necho \"10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0\"  >> /etc/fstab\n#写nfs挂载配置\nyum install nfs-utils -y\n#这里报错了，因为这里用的rocky，没有安装nfs，需要安装一下\nsystemctl daemon-reload\nmount -a\n\n#同时jpress只支持5.6和5.7的mysql，那么其实只要把master换为5.7就行了，下面是方法\n#ubuntu\napt install software-properties-common\nadd-apt-repository -y ppa:ondrej/mysql-5.7\napt update\napt install mysql-server-5.7\n#redhat\nvim /etc/yum.repos.d/mysql5.7.repo\n[mysql5.7]\n#名随意\nname=MySQL 5.7\n#随意也要见名知意\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\n#仓库链接\nenabled=1\n#是否启用,1为启用\ngpgcheck=0\n#是否检查gpg密钥，这里我就不检查了\n\nyum repolist -v\n#刷新仓库包，顺便看下仓库配置是否出从\nyum  install mysql-community-server\n\n#然后也是一样配置账号密码权限\nmysql\nmysql> create user jpress@'10.0.0.%' identified by '123456';\nmysql> grant all on jpress.* to jpress@'10.0.0.%';\n\n```\n\n### 14. Tomcat-2配置\n```bash\nhostnamectl set-hostname Tomcat-2\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\niptables -F\nmount /dev/cdrom /mnt\nyum install wget rsync -y\ncd /usr/local/\nln -s jdk1.8.0_371 jdk\nvim /etc/profile.d/jdk.sh\n    export JAVA_HOME=/usr/local/jdk  \n    export PATH=$PATH:$JAVA_HOME/bin\n    export JRE_HOME=$JAVA_HOME/jre    \n    export CLASSPATH=.:$JAVA_HOME/lib/:$JRE_HOME/lib/\n   \n\nsource /etc/profile.d/jdk.sh\njava -v\nln -s apache-tomcat-8.5.89 tomcat\necho 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh\n.  /etc/profile.d/tomcat.sh\nuseradd -r -s /sbin/nologin tomcat\nchown -R tomcat.tomcat /usr/local/tomcat/\necho   'JAVA_HOME=/usr/local/jdk'  >  /usr/local/tomcat/conf/tomcat.conf\nvim /lib/systemd/system/tomcat.service\n[Service]\nType=forking\n\nEnvironmentFile=/usr/local/tomcat/conf/tomcat.conf\n#Environment=JAVA_HOME=/usr/local/jdk\n#如果没有写配置文件可启用此选项\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nPrivateTmp=true\nUser=tomcat\nGroup=tomcat\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\nsystemctl start tomcat.service\nsystemctl status tomcat.service\nmkdir -p /data/tomcat/www/webapps/\nchown tomcat.tomcat /data -R\nvim /usr/local/tomcat/conf/server.xml\n<Host name=\"localhost\"  appBase=\"/data/tomcat/www/webapps\"\n\necho \"10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0\"  >> /etc/fstab\nyum install nfs-utils -y\nsystemctl daemon-reload\nmount -a\n```\n### 15. 配置小坑总结\n#### 到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效....然后也出现了很多小问题，比如redhat系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。~然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置......~这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。\n### 16. 架构总结优缺点\n#### 优点：\n#### 1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\n#### 2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\n#### 3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\n#### 4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\n#### 缺点：\n#### 1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\n#### 2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\n#### 3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\n#### 4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\n#### 建议：\n#### 1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\n#### 2. NFS方案可替换\n#### 3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\n#### 4. ~少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus~\n","source":"_posts/LVS高可用的一步步推进.md","raw":"---\ntitle: LVS-NAT四层+nginx七层\ndate: 2023-05-30 16:30:00\ntags:\n---\n\n### 1. 环境准备\n#### 多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\n![高可用](/images/high_use.png)\n#### IP分配无\n\n#### 注意事项\n1. 关闭selinux和防火墙还有把默认表清空一下，实际生产案例可能会配置专有端口，这个自己注意\n2. NAT和仅主机仅仅是模拟内外网不同网段，一定要理解含义\n3. 这里只使用了LVS-NAT负载均衡转发，DR多网段和tunnel模式可参考我前面写的修改，删除和增加部分网络参数即可\n4. 默认使用ROOT用户\n5. 一步一步来，喝杯咖啡\n#### 普及下LVS和Nginx\n1. 四层转发不握手\n2. 七层转发需要握手\n3. LVS只支持四层转发\n4. nginx支持七层和虚拟四层转发\n5. LVS基于内核转发，LVS适合高并发，大规模的网络负载均衡场景\n6. nginx更适合HTTP转发\n### 2. LVS配置\n```bash\nsystemctl stop firewalld\niptables -F\nsystemctl disable firewalld\nhostnamectl set-hostname LVS\n#添加第二块网卡，这里偷懒使用自动获取的IP，格式如下\n#centos网卡配置\nNAME=ens160\n#我这是ens160，这个名是别名，但也是命令行操作网卡的名称\nDEVICE=ens160\nBOOTPROTO=static\n#这里写none也ok，意思是静态配置，如果为dhcp则是自动获取\nIPADDR=10.0.0.100\nGATEWAY=10.0.0.2\nNETMASK=255.255.255.0\n#PREFIX=CIDR MASK，掩码两种格式，3个255为24\nDNS=you dns\nDNS1=you dns1\nONBOOT=yes\n#开启启动\n\n#ubuntu网卡配置 这里注意，ubuntu是用的netplan管理网卡，格式是yaml，需要注意层级格式\nnetwork:\n  ethernets:\n    ens33:\n      dhcp4: false\n      #这里改为no也行\n      addresses:\n        - 10.0.0.100/24\n      gateway4: 10.0.0.2\n      nameservers:\n        addresses: [10.0.0.2,223.5.5.5]\n  version: 2\n\n#网卡2同理，网卡名不同而已，注意层级格式就ok，这里就不在过多赘述\nmount /dev/cdrom /mnt\nyum install ipvsadm keepalived -y\n#这里采用源安装，如果是其他方式安装请注意路径\necho \"1\" > /proc/sys/net/ipv4/ip_forward\n#这里是临时生效，永久生效请写sysctl配置文件\nvim /etc/keepalived/keepalived.conf\n#这里要注意，默认配置文件名不可自定义,为keepalived.conf,如需自定义请使用keepalived -f /you/config/path\nglobal_defs {\n    #全局配置\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   #邮箱配置\n   router_id LVS_1\n   #唯一性\n}\nvrrp_instance VI_1 {\n    #节点配置\n    state MASTER\n    #主为MASTER，备为BACKUP\n    interface ens224\n    #绑定的网卡\n    virtual_router_id 51\n    #组ID，同一组的主备需一样\n    priority 100\n    #启动时的优先级谁高则谁成为MASTER\n    advert_int 1\n    #主备同步检查，默认1秒\n    authentication {\n    #主备之间认证，防止其他节点窜入\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n    #对外公网IP\n        192.168.59.135\n    #LVS主IP\n        192.168.59.136\n    #LVS备IP\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    #内网定义\n    state MASTER\n    interface ens160\n    virtual_router_id 62\n    priority 100\n    #NVIP漂移地址，一定要和启动优先级一样，不然我估计会出错\n    advert_int 1\nauthentication {\n    auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        10.0.0.10\n    #NVIP，漂移VIP\n    }\n}\nvirtual_server 192.168.59.135 80{\n    #主机配置\n    delay_loop 6\n    #健康检查间隔6秒\n    lb_algo rr\n    #LVS调度算法为rr也就是轮询。rr|wrr|lc|wlc|lblc|sh|dh\n    lb_kind NAT\n    #负载均衡转发规则为NAT。DR|TUN|FULLTUN\n    !nat_mask 255.255.255.0\n    #我在ubuntu上可指定掩码，rokey上检查时会报错，所以我注释了，无伤大雅\n    persistence_timeout 50\n    #50秒内访问同一台后端服务器，可注释\n    protocol TCP\n    #协议为TCP\n\n    real_server 10.0.0.202 80 {\n        #后端真实服务器配置\n        weight 1\n        #权重\n           TCP_CHECK {\n                connect_timeout 10\n                #连接超时时间\n                !nb_get_retry 3\n                #重连次数，这里检查配置时也出错，干脆注释了\n                delay_before_retry 3\n                #重连间隔时间\n                connect_port 80\n                #健康检查时的端口\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n        }\n    }\n}\nvirtual_server 192.168.59.136 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    !nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 10.0.0.202 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n}\n#然后配置文件是叹号注释，写#纯属习惯\n\nkeepalived -t\n#检查配置文件，没有输出则正确。默认为/etc/keepalived/keepalived.conf,可自定义路径\nsystemctl start keepalived \nsystemctl status keepalived \n#这里应看到以下信息，备用机则会显示remove VIPs。这里是根据启动优先级来决定谁是主备，而不是MSTER，BACKUP名称来决定，NVIP也是根据优先级\nLVS Keepalived_vrrp[949]: (LAN_GATEWAY) Entering MASTER STATE\nLVS Keepalived_vrrp[949]: (LAN_GATEWAY) setting VIPs.\nLVS Keepalived_vrrp[949]: (LAN_GATEWAY) Sending/queueing gratuitous ARPs on ens160 for 10.0.0.10\nLVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 for 10.0.0.10\nLVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 for 10.0.0.10\nipvsadm -Ln\n#keepalived配置里会自动配置ipvsadm，所以输入命令可直接查看\nsystemctl stop keepalived \n#如果你停止服务，那么备用机会立马抢占NVIP，成为新的MASTR进行转发服务\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n\n### 3. LVS-BAK配置\n```bash\nhostnamectl set-hostname LVS-BAK\nsystemctl stop firewalld\nsystemctl disable firewalld\niptables -F\n#ip配置同LVS\nmount /dev/sr0 /mnt/\n#sr0和cdrom都是指光盘的意思，因为我挂了光盘的原因，安装软件会报错，所以必须挂载，没有装AUTO挂载\nyum -y install ipvsadm keepalived\necho \"1\" > /proc/sys/net/ipv4/ip_forward\nvim /etc/keepalived/keepalived.conf\nglobal_defs {\n   notification_email {\n    you.example@mail.com\n   }\n   notification_email_from  you.example@mail.com\n   smtp_server mail.domob.cn\n   smtp_connect_timeout 30\n   router_id LVS_2\n   #唯一标识\n}\nvrrp_instance VI_1 {\n    state BACKUP\n    #备份\n    interface ens224\n    virtual_router_id 51\n    priority 99\n    #优先级不能超过MASTER，不然VIP会漂移过来\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        192.168.59.135\n        192.168.59.136\n    }\n}\nvrrp_instance LAN_GATEWAY {\n    state BACKUP\n    interface ens160\n    virtual_router_id 62\n    priority 99\n    advert_int 1\nauthentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    virtual_ipaddress {\n        10.0.0.10\n    }\n}\nvirtual_server 192.168.59.135 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    !nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 10.0.0.202 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n               connect_port 80\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\ndelay_before_retry 3\n                connect_port 80\n        }\n    }\n}\nvirtual_server 192.168.59.136 80{\n    delay_loop 6\n    lb_algo rr\n    lb_kind NAT\n    !nat_mask 255.255.255.0\n    persistence_timeout 50\n    protocol TCP\n\n    real_server 10.0.0.202 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n           }\n    }\n    real_server 10.0.0.203 80 {\n        weight 1\n           TCP_CHECK {\n                connect_timeout 10\n                !nb_get_retry 3\n                delay_before_retry 3\n                connect_port 80\n          }\n    }\n}\n\nkeepalived -t\nsystemctl start keepalived \nsystemctl status keepalived\nipvsadm -Ln\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n### 4. Nginx-1配置\n```bash\nhostnamectl set-hostname Nginx-1\nsystemctl stop firewalld\nsystemctl disable firewalld\niptables -F\n#一定要关闭selinux\nmount /dev/cdrom /mnt\n#因为我写了本地yum仓配置，又没装auto挂载，所以需要手动挂载，可以安装软件包的话，就忽略这步\nyum install nginx -y\n#这里就源安装了，如果是编译安装，请注意自己自己的配置\nroute del default\n#删除默认路由，临时删除，重启会重新生成，主要是改文件比较烦\nroute add default gw 10.0.0.10\n#添加到LVS的默认路由\nroute -n\n#查看路由\nvim /etc/nginx/conf.d/10.0.0.130.conf\n#名字随意，需.conf结尾\nupstream wordpress {\n        server 10.0.0.130;\n        #这里是后端的wordpress，默认算法是轮询，权重都为1\n        server 10.0.0.134;\n}\n\nserver{\n        listen 80 default_server;\n        #这里配置为默认主页，检查配置时如果报错请删除其他文件的default_server即可\n        server_name www.lee.com;      \n        #配置域名解析，感兴趣的可自行配置，2种方法，一是搭建DNS server，二是直接在hosts文件添加解析\n        location / {\n                proxy_pass http://wordpress;\n        #反代后端wordpress服务器\n        }\nnginx -t\nnginx -s reload\n#这里没有编译安装nginx，如果是编译安装，配置文件目录可能不同，请注意\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n### 5. Nginx-2配置\n```bash\nhostnamectl set-hostname Nginx-2\nsystemctl stop firewalld\nsystemctl disable firewalld\niptables -F\nmount /dev/cdrom /mnt\nyum install nginx -y\nvim /etc/nginx/conf.d/10.0.0.204.conf\nupstream jpress{\n        server 10.0.0.204:8080;\n        #这里是后端的jpress\n        server 10.0.0.205:8080;\n}\nserver{\n        listen 80 default_server;\n        server_name www.lee.org;\n        location / {\n                proxy_pass http://jpress;\n        }\n}\nnginx -t \nnginx -s reload\necho -e \"10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org\" >> /etc/hosts\n```\n\n### 6. LNP-1配置\n```bash\nhostnamectl set-hostname LNP-1\nsystemctl stop ufw\n#ubuntu默认防火墙是ufw\nsystemctl disable ufw\niptables -F\n#-F是清空filter表所有规则，流量信息等，如果你其他表有规则，请注意是否冲突\napt install nginx php-fpm php-mysql php-json unzip -y \n#安装若干软件\nrm -rf /etc/nginx/sites-enabled/default\n#改default_server还是提示冲突，我直接删\nvim /etc/nginx/conf.d/sever130.conf\nserver{\n        listen 80;\n        root /data/wordpress/www;\n        index index.php;\n        client_max_body_size 20m;\n        #限制客户端上传文件大小，不配置为不限制\n        location ~ \\.php$|/ping|/php_status{\n            #正则匹配以.php,.ping,.php_status结尾\n                fastcgi_pass 127.0.0.1:9000;\n                #php监控端口，可统一更改为socket路径\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                #指定了FastCGI处理程序需要执行的脚本路径\n                include fastcgi_params;\n                #这个是相对路径，也可绝对路径。fastcgi_params文件会包含一些常用的FastCGI参数配置\n        }\n}\n\n#php配置\nvim /etc/php/8.1/fpm/pool.d/www.conf\n;listen = /run/php/php8.1-fpm.sock\n#这个是socket路径，这里就演示端口了\nlisten = 127.0.0.1:9000\n#可修改0.0.0.0，或者在nginx改为进程文件\npm.status_path = /php_status\n#php部分数据监控\nping.path = /ping\n#检查php存活\n\nvim /etc/php/8.1/fpm/php.ini\npost_max_size = 100M\nupload_max_filesize = 100M\n#这里是修改上传文件限制\n\nmkdir -p /data/wordpress/www\nvim /data/wordpress/www/phpinfo.php\n<?php\nphpinfo();\n?>\n#测试php是否被解析\nsystemctl start nginx\nsystemctl start php8.1-fpm\n\n### wordpress配置\nwget https://wordpress.org/latest.zip\nchown www-data.www-data  wordpress -R\nmv wordpress/* /data/wordpress/www\n#配置完mysql，然后输入本机IP，可以配置wordpress站点了，实测上传大于20mb的文件会出现json错误，需要在NGINX配置文件将client_max_body_size改成你想要的大小，我改成了100就行了\n\n#NFS做完开始在这里挂载\nrsync -a  /data/wordpress/www/*  root@10.0.0.135:/data/wordpress/www/\n#rsync默认递归复制，可 --no-recursion 取消递归，这里把文件复制到NFS\nrm -rf /data/wordpress/www/*\necho \"10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0\"  >> /etc/fstab\n#这里注意别清空了，两个大于号要看清\nmount -a\n#挂载fstab文件\n```\n\n### 7. LNP-2配置\n```bash\nhostnamectl set-hostname LNP-2\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install nginx php-fpm php-mysql php-json -y\nrm -rf /etc/nginx/sites-enabled/default\nvim /etc/nginx/conf.d/sever130.conf\nserver{\n        listen 80;\n        root /data/wordpress/www;\n        index index.php;\n        client_max_body_size 20m;\n        #限制客户端上传文件大小，不配置为不限制\n        location ~ \\.php$|/ping|/php_status{\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                include fastcgi_params;\n        }\n}\n\nphp\nvim /etc/php/8.1/fpm/pool.d/www.conf\n;listen = /run/php/php8.1-fpm.sock\nlisten = 127.0.0.1:9000\npm.status_path = /php_status\nping.path = /ping\n\nvim /etc/php/8.1/fpm/php.ini\npost_max_size = 100M\nupload_max_filesize = 100M\n\nmkdir -p /data/wordpress/www\nvim /data/wordpress/www/phpinfo.php\n<?php\nphpinfo();\n?>\n#测试php是否被解析\nsystemctl start nginx\nsystemctl start php8.1-fpm\n\n#挂载NFS\necho \"10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0\"  >> /etc/fstab\nmount -a\n```\n\n### 8. mysql-Mast配置\n```bash\nhostnamectl set-hostname Mysql-Mast\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install mysql-server -y\n#如果是编译安装，请注意自定义路径，可能会有不同\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\n#开启监听，默认是localhost\necho -e \"server-id = 131 >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#做集群的话每台mysql都需要一个ID识别\nsystemctl start mysql.service\n\nmysql\nmysql> create user backuser@'10.0.0.%' identified by '1234567890';\nmysql> grant replication slave on *.* to backuser@'10.0.0.%';\nmysql> INSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';\n#安装master半同步插件\nmysql> \\! echo  \"rpl_semi_sync_master_enable\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#开启master半同步策略\nmysql> \\! systemctl restart mysql\nmysql> select @@rpl_semi_sync_master_enabled;\n#查看半同步策略是否开启\nmysql> reset master;\n#重置binlog日志，也可以不重置\nmysql> show master status;\n#接下来创建wordpress数据库和用户，顺便也可验证主从同步\nmysql> create database wordpress;\nmysql> create user wordpress@'10.0.0.%' identified by '0987654321';\nmysql> grant all  on wordpress.* to wordpress@'10.0.0.%';\nmysql> select host,user from mysql.user;\n#在slave执行该命令，如果有，mysql就完事了，可去lnp配置wordpress\n\n```\n\n### 9. mysql-Slave-1配置\n```bash\nhostnamectl set-hostname Slave-1\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install mysql-server -y\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 132\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\n#实际生产案例中slave应只读\nsystemctl start mysql.service\n\nmysql\nmysql> INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\n#安装slave半同步插件\nmysql> \\! echo  \"rpl_semi_sync_slave_enabled\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nmysql> \\! echo  \"require_secure_transport = 1\">> /etc/mysql/mysql.conf.d/mysqld.cnf\n#死活连不上，发现开启安全连接秒连，查看master上安全连接是关闭的，百思不得其解，估计只要是master就会默认要求slave开启安全连接\nmysql> \\! systemctl restart mysql.service\nmysql> select @@rpl_semi_sync_slave_enabled; \n#查看半同步插件是否启用\nmysql> CHANGE MASTER TO MASTER_HOST='10.0.0.131',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\n#这里是连接master的配置\nmysql> start slave;\n#启动slave\nmysql> show slave status\\G\n#如果没有error，就ok了\n```\n\n### 10. mysql-Slave-2配置\n```bash\nhostnamectl set-hostname Slave-2\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install mysql-server -y\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\necho -e \"server-id = 133\\nread-only = 1\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql.service\n\n\nmysql> INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';\nmysql> \\! echo  \"rpl_semi_sync_slave_enabled\" >> /etc/mysql/mysql.conf.d/mysqld.cnf\nmysql> \\! echo  \"require_secure_transport = 1\">> /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl restart mysql.service\n\nmysql> select @@rpl_semi_sync_slave_enabled; \nmysql> CHANGE MASTER TO MASTER_HOST='10.0.0.131',\nMASTER_USER='backuser',\nMASTER_PASSWORD='1234567890',\nMASTER_LOG_FILE='binlog.000001',\nMASTER_LOG_POS=157;\nmysql> start slave;\nmysql> show slave status\\G\n\n```\n\n\n### 11. NFS配置\n```bash\n#nfs配置\nhostnamectl set-hostname NFS\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\napt install nfs-kernel-server\nmkdir -p /data/{wordpress,tomcat}/{www,www}  -p && mkdir /etc/exports.d\nvim /etc/exports.d/wordpress.exports\n/data/wordpress/www 10.0.0.0/24(rw)\n#这里是wordpress的目录\n\nvim /etc/exports.d/tomcat.exports\n/data/tomcat/www 10.0.0.0/24(rw)\n#这里我把配置文件分开了，也可以放一起\n\nexportfs -v\n#查看\nexportfs -r\n#重读配置文件\nchown -R www-data.www-data /data/wordpress\nchown -R tomcat.tomcat /data/tomcat\nwget http://pan.alybaba.top/soft/sersync2.5.4_64bit_binary_stable_final.tar.gz\n#下载监控软件\ntar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/\n#解压\nln -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin\n#软连接\n或者\ncp -a GNU-Linux-x86   /usr/local/sersync\n#改名复制过来，推荐软连接，容错率高点感觉\necho 'PATH=/usr/local/sersync:$PATH' > /etc/profile.d/sersync.sh\n#写默认路径\nsource /etc/profile.d/sersync.sh\n#生效\nvim /usr/local/sersync/confxml.xml\n#文件太长，我只记几个要改的点\n<attrib start=\"true\"/>\n#这里是监控权限变化，最好开启，默认关闭\n<sersync>\n            <localpath watch=\"/data\">\n            <!--需要监控的目录-->\n            <remote ip=\"10.0.0.136\" name=\"backup\"/>\n            <!--rsync服务器IP，也就是备份服务器地址，name是rsync模块名需一致-->\n            <!--<remote ip=\"192.168.8.39\" name=\"tongbu\"/>-->\n            <!--<remote ip=\"192.168.8.40\" name=\"tongbu\"/>-->\n        </localpath>\n        <rsync>\n            <commonParams params=\"-artuz\"/>\n            <auth start=\"true\" users=\"rsyncuser\" passwordfile=\"/etc/rsync.pas\"/>\n            <!--这里start需改为true，users和密码存放位置可自定义-->\n            <userDefinedPort start=\"false\" port=\"874\"/><!-- port=874 -->\n            <timeout start=\"false\" time=\"100\"/><!-- timeout=100 -->\n            <ssh start=\"false\"/>\n        </rsync>\n#其实还可以使用ssh协议，我前面应该用过\n\necho 123456 > /etc/rsync.pas\nchmod 600   /etc/rsync.pas\nrsync --password-file=/etc/rsync.pas rsync://rsymcser@10.0.0.136/backup\n#测试\nnohup sersync2 -dro /usr/local/sersync/confxml.xml &>/dev/null &\n#后台运行，记得测试文件同步\n```\n\n\n\n### 11. NFS-BAK配置\n```bash\nhostnamectl set-hostname NFS-BAK\nsystemctl stop ufw\nsystemctl disable ufw\niptables -F\nvim /etc/rsyncd.conf\n    uid = root\n    gid = root\n    max connections = 0\n    ignore errors\n    exclude = lost+found/\n    log file = /var/log/rsyncd.log\n    pid file = /var/run/rsyncd.pid\n    lock file = /var/run/rsyncd.lock\n    reverse lookup = no\n    [backup]\n    path = /data\n    comment = backup dir\n    read only = no\n    auth users = rsyncuser\n    secrets file = /etc/rsync.pas\n\nmkdir -p /data/wordpress/www\necho \"rsyncuser:123456\" > /etc/rsync.pas\nchmod 600  /etc/rsync.pas\nsystemctl restart rsync\n#这里做完反手去LNP操作，当然如果同步出问题，请systemctl status rsync,查看连接日志排查\n```\n\n### 13. Tomcat-1配置\n```bash\nhostnamectl set-hostname Tomcat-1\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\niptables -F\nmount /dev/cdrom /mnt\nyum install wget rsync -y\n#这里我已经提前下载好了tomcat和jdk\ntar xf apache-tomcat-8.5.89.tar.gz -C /usr/local/\ntar xf jdk-8u371-linux-x64.tar.gz -C /usr/local/\ncd /usr/local/\nln -s jdk1.8.0_371 jdk\nvim /etc/profile.d/jdk.sh\n    export JAVA_HOME=/usr/local/jdk\n    #指定JDK的安装路径\n    export PATH=$PATH:$JAVA_HOME/bin\n    #将JDK的bin目录添加到默认PATH \n    export JRE_HOME=$JAVA_HOME/jre\n    #指定JRE的安装路径\n    export CLASSPATH=.:$JAVA_HOME/lib/:$JRE_HOME/lib/\n    #指定Java类的搜索路径\n\nsource /etc/profile.d/jdk.sh\njava -v\n#测试是否生效\nln -s apache-tomcat-8.5.89 tomcat\necho 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh\n#添加tomcat到默认PATH\n.  /etc/profile.d/tomcat.sh\nuseradd -r -s /sbin/nologin tomcat\n#生产环境最好指定特定统一用户，-r是系统用户，也就是id为1000以下\nchown -R tomcat.tomcat /usr/local/tomcat/\necho   'JAVA_HOME=/usr/local/jdk'  >  /usr/local/tomcat/conf/tomcat.conf\nvim /lib/systemd/system/tomcat.service\n[Service]\nType=forking\n\nEnvironmentFile=/usr/local/tomcat/conf/tomcat.conf\n#Environment=JAVA_HOME=/usr/local/jdk\n#如果没有写配置文件可启用此选项\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nPrivateTmp=true\nUser=tomcat\nGroup=tomcat\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\nsystemctl start tomcat.service\nsystemctl status tomcat.service\nrsync -a ./jdk1.8.0_371  root@10.0.0.205:/usr/local/\nrsync -a ./apache-tomcat-8.5.89  root@10.0.0.205:/usr/local/\nwget wget -O jpress-v5.1.0.tar.gz  'https://gitee.com/JPressProjects/jpress/repository/archive/v5.1.0?format=tar.gz'\ntar xf jpress-v5.1.0.tar.gz\ncd jpress-v5.1.0/\nyum install maven\n#jave编译器，奇怪的是我装这个的时候，附带给我来了一个openjdk8版本的全家桶\nvim /etc/maven/settings.xml\n <mirror>\n                <id>nexus-aliyun</id>\n                <mirrorOf>*</mirrorOf>\n                <name>Nexus aliyun</name>\n                <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror>\n#在mirrors里添加这个镜像，主要是编译的时候加速用\n\nmvn clean install package -Dmaven.test.skip=true\n#编译语句\nmv /usr/local/tomcat/webapps/ROOT  /usr/local/tomcat/webapps/ROOT1\n#把root移走，默认读取的是root下的内容\ncp starter-tomcat/target/starter-tomcat-5.0.war /usr/local/tomcat/webapps/ROOT.war\n#把jpress移进来，改名ROOT\nchown tomcat.tomcat -R  /usr/local/tomcat/webapps/\nvim /usr/local/tomcat/conf/server.xml\n<Host name=\"localhost\"  appBase=\"/data/tomcat/www/webapps\"\n#这里我修改到其他的目录，方便统一挂载NFS\n\nmkdir -p /data/tomcat/www/webapps/\n#如果没有目录重启会报错\nchown tomcat.tomcat /data -R\ncp -a /usr/local/tomcat/webapps/*  ./\nsystemctl restart tomcat\nrsync ./*  -a root@10.0.0.135:/data/tomcat/www/webapps/\n#跟LNP一样，把文件传至nfs\nrm -rf ./*\necho \"10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0\"  >> /etc/fstab\n#写nfs挂载配置\nyum install nfs-utils -y\n#这里报错了，因为这里用的rocky，没有安装nfs，需要安装一下\nsystemctl daemon-reload\nmount -a\n\n#同时jpress只支持5.6和5.7的mysql，那么其实只要把master换为5.7就行了，下面是方法\n#ubuntu\napt install software-properties-common\nadd-apt-repository -y ppa:ondrej/mysql-5.7\napt update\napt install mysql-server-5.7\n#redhat\nvim /etc/yum.repos.d/mysql5.7.repo\n[mysql5.7]\n#名随意\nname=MySQL 5.7\n#随意也要见名知意\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\n#仓库链接\nenabled=1\n#是否启用,1为启用\ngpgcheck=0\n#是否检查gpg密钥，这里我就不检查了\n\nyum repolist -v\n#刷新仓库包，顺便看下仓库配置是否出从\nyum  install mysql-community-server\n\n#然后也是一样配置账号密码权限\nmysql\nmysql> create user jpress@'10.0.0.%' identified by '123456';\nmysql> grant all on jpress.* to jpress@'10.0.0.%';\n\n```\n\n### 14. Tomcat-2配置\n```bash\nhostnamectl set-hostname Tomcat-2\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\niptables -F\nmount /dev/cdrom /mnt\nyum install wget rsync -y\ncd /usr/local/\nln -s jdk1.8.0_371 jdk\nvim /etc/profile.d/jdk.sh\n    export JAVA_HOME=/usr/local/jdk  \n    export PATH=$PATH:$JAVA_HOME/bin\n    export JRE_HOME=$JAVA_HOME/jre    \n    export CLASSPATH=.:$JAVA_HOME/lib/:$JRE_HOME/lib/\n   \n\nsource /etc/profile.d/jdk.sh\njava -v\nln -s apache-tomcat-8.5.89 tomcat\necho 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh\n.  /etc/profile.d/tomcat.sh\nuseradd -r -s /sbin/nologin tomcat\nchown -R tomcat.tomcat /usr/local/tomcat/\necho   'JAVA_HOME=/usr/local/jdk'  >  /usr/local/tomcat/conf/tomcat.conf\nvim /lib/systemd/system/tomcat.service\n[Service]\nType=forking\n\nEnvironmentFile=/usr/local/tomcat/conf/tomcat.conf\n#Environment=JAVA_HOME=/usr/local/jdk\n#如果没有写配置文件可启用此选项\nExecStart=/usr/local/tomcat/bin/startup.sh\nExecStop=/usr/local/tomcat/bin/shutdown.sh\nPrivateTmp=true\nUser=tomcat\nGroup=tomcat\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\nsystemctl start tomcat.service\nsystemctl status tomcat.service\nmkdir -p /data/tomcat/www/webapps/\nchown tomcat.tomcat /data -R\nvim /usr/local/tomcat/conf/server.xml\n<Host name=\"localhost\"  appBase=\"/data/tomcat/www/webapps\"\n\necho \"10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0\"  >> /etc/fstab\nyum install nfs-utils -y\nsystemctl daemon-reload\nmount -a\n```\n### 15. 配置小坑总结\n#### 到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效....然后也出现了很多小问题，比如redhat系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。~然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置......~这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。\n### 16. 架构总结优缺点\n#### 优点：\n#### 1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\n#### 2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\n#### 3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\n#### 4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\n#### 缺点：\n#### 1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\n#### 2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\n#### 3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\n#### 4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\n#### 建议：\n#### 1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\n#### 2. NFS方案可替换\n#### 3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\n#### 4. ~少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus~\n","slug":"LVS高可用的一步步推进","published":1,"updated":"2023-05-30T13:54:28.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dok00018x8f3q271pba","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h3><h4 id=\"多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\"><a href=\"#多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\" class=\"headerlink\" title=\"多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\"></a>多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下</h4><p><img src=\"/images/high_use.png\" alt=\"高可用\"></p>\n<h4 id=\"IP分配无\"><a href=\"#IP分配无\" class=\"headerlink\" title=\"IP分配无\"></a>IP分配无</h4><h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ol>\n<li>关闭selinux和防火墙还有把默认表清空一下，实际生产案例可能会配置专有端口，这个自己注意</li>\n<li>NAT和仅主机仅仅是模拟内外网不同网段，一定要理解含义</li>\n<li>这里只使用了LVS-NAT负载均衡转发，DR多网段和tunnel模式可参考我前面写的修改，删除和增加部分网络参数即可</li>\n<li>默认使用ROOT用户</li>\n<li>一步一步来，喝杯咖啡</li>\n</ol>\n<h4 id=\"普及下LVS和Nginx\"><a href=\"#普及下LVS和Nginx\" class=\"headerlink\" title=\"普及下LVS和Nginx\"></a>普及下LVS和Nginx</h4><ol>\n<li>四层转发不握手</li>\n<li>七层转发需要握手</li>\n<li>LVS只支持四层转发</li>\n<li>nginx支持七层和虚拟四层转发</li>\n<li>LVS基于内核转发，LVS适合高并发，大规模的网络负载均衡场景</li>\n<li>nginx更适合HTTP转发</li>\n</ol>\n<h3 id=\"2-LVS配置\"><a href=\"#2-LVS配置\" class=\"headerlink\" title=\"2. LVS配置\"></a>2. LVS配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">hostnamectl set-hostname LVS</span><br><span class=\"line\"><span class=\"comment\">#添加第二块网卡，这里偷懒使用自动获取的IP，格式如下</span></span><br><span class=\"line\"><span class=\"comment\">#centos网卡配置</span></span><br><span class=\"line\">NAME=ens160</span><br><span class=\"line\"><span class=\"comment\">#我这是ens160，这个名是别名，但也是命令行操作网卡的名称</span></span><br><span class=\"line\">DEVICE=ens160</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\"><span class=\"comment\">#这里写none也ok，意思是静态配置，如果为dhcp则是自动获取</span></span><br><span class=\"line\">IPADDR=10.0.0.100</span><br><span class=\"line\">GATEWAY=10.0.0.2</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\"><span class=\"comment\">#PREFIX=CIDR MASK，掩码两种格式，3个255为24</span></span><br><span class=\"line\">DNS=you dns</span><br><span class=\"line\">DNS1=you dns1</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">#开启启动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ubuntu网卡配置 这里注意，ubuntu是用的netplan管理网卡，格式是yaml，需要注意层级格式</span></span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"comment\">#这里改为no也行</span></span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 10.0.0.100/24</span><br><span class=\"line\">      gateway4: 10.0.0.2</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">        addresses: [10.0.0.2,223.5.5.5]</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#网卡2同理，网卡名不同而已，注意层级格式就ok，这里就不在过多赘述</span></span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install ipvsadm keepalived -y</span><br><span class=\"line\"><span class=\"comment\">#这里采用源安装，如果是其他方式安装请注意路径</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"><span class=\"comment\">#这里是临时生效，永久生效请写sysctl配置文件</span></span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\"><span class=\"comment\">#这里要注意，默认配置文件名不可自定义,为keepalived.conf,如需自定义请使用keepalived -f /you/config/path</span></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">    <span class=\"comment\">#全局配置</span></span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   <span class=\"comment\">#邮箱配置</span></span><br><span class=\"line\">   router_id LVS_1</span><br><span class=\"line\">   <span class=\"comment\">#唯一性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    <span class=\"comment\">#节点配置</span></span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    <span class=\"comment\">#主为MASTER，备为BACKUP</span></span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    <span class=\"comment\">#绑定的网卡</span></span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    <span class=\"comment\">#组ID，同一组的主备需一样</span></span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    <span class=\"comment\">#启动时的优先级谁高则谁成为MASTER</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    <span class=\"comment\">#主备同步检查，默认1秒</span></span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">    <span class=\"comment\">#主备之间认证，防止其他节点窜入</span></span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">    <span class=\"comment\">#对外公网IP</span></span><br><span class=\"line\">        192.168.59.135</span><br><span class=\"line\">    <span class=\"comment\">#LVS主IP</span></span><br><span class=\"line\">        192.168.59.136</span><br><span class=\"line\">    <span class=\"comment\">#LVS备IP</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    <span class=\"comment\">#内网定义</span></span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    <span class=\"comment\">#NVIP漂移地址，一定要和启动优先级一样，不然我估计会出错</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">authentication &#123;</span><br><span class=\"line\">    auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        10.0.0.10</span><br><span class=\"line\">    <span class=\"comment\">#NVIP，漂移VIP</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.135 80&#123;</span><br><span class=\"line\">    <span class=\"comment\">#主机配置</span></span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    <span class=\"comment\">#健康检查间隔6秒</span></span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    <span class=\"comment\">#LVS调度算法为rr也就是轮询。rr|wrr|lc|wlc|lblc|sh|dh</span></span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    <span class=\"comment\">#负载均衡转发规则为NAT。DR|TUN|FULLTUN</span></span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    <span class=\"comment\">#我在ubuntu上可指定掩码，rokey上检查时会报错，所以我注释了，无伤大雅</span></span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    <span class=\"comment\">#50秒内访问同一台后端服务器，可注释</span></span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\">    <span class=\"comment\">#协议为TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        <span class=\"comment\">#后端真实服务器配置</span></span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        <span class=\"comment\">#权重</span></span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                <span class=\"comment\">#连接超时时间</span></span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                <span class=\"comment\">#重连次数，这里检查配置时也出错，干脆注释了</span></span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                <span class=\"comment\">#重连间隔时间</span></span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">                <span class=\"comment\">#健康检查时的端口</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.136 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#然后配置文件是叹号注释，写#纯属习惯</span></span><br><span class=\"line\"></span><br><span class=\"line\">keepalived -t</span><br><span class=\"line\"><span class=\"comment\">#检查配置文件，没有输出则正确。默认为/etc/keepalived/keepalived.conf,可自定义路径</span></span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived </span><br><span class=\"line\"><span class=\"comment\">#这里应看到以下信息，备用机则会显示remove VIPs。这里是根据启动优先级来决定谁是主备，而不是MSTER，BACKUP名称来决定，NVIP也是根据优先级</span></span><br><span class=\"line\">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) Entering MASTER STATE</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) setting VIPs.</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) Sending/queueing gratuitous ARPs on ens160 <span class=\"keyword\">for</span> 10.0.0.10</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 <span class=\"keyword\">for</span> 10.0.0.10</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 <span class=\"keyword\">for</span> 10.0.0.10</span><br><span class=\"line\">ipvsadm -Ln</span><br><span class=\"line\"><span class=\"comment\">#keepalived配置里会自动配置ipvsadm，所以输入命令可直接查看</span></span><br><span class=\"line\">systemctl stop keepalived </span><br><span class=\"line\"><span class=\"comment\">#如果你停止服务，那么备用机会立马抢占NVIP，成为新的MASTR进行转发服务</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-LVS-BAK配置\"><a href=\"#3-LVS-BAK配置\" class=\"headerlink\" title=\"3. LVS-BAK配置\"></a>3. LVS-BAK配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LVS-BAK</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#ip配置同LVS</span></span><br><span class=\"line\">mount /dev/sr0 /mnt/</span><br><span class=\"line\"><span class=\"comment\">#sr0和cdrom都是指光盘的意思，因为我挂了光盘的原因，安装软件会报错，所以必须挂载，没有装AUTO挂载</span></span><br><span class=\"line\">yum -y install ipvsadm keepalived</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_2</span><br><span class=\"line\">   <span class=\"comment\">#唯一标识</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    <span class=\"comment\">#备份</span></span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    <span class=\"comment\">#优先级不能超过MASTER，不然VIP会漂移过来</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.59.135</span><br><span class=\"line\">        192.168.59.136</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        10.0.0.10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.135 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">               connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.136 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">keepalived -t</span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived</span><br><span class=\"line\">ipvsadm -Ln</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Nginx-1配置\"><a href=\"#4-Nginx-1配置\" class=\"headerlink\" title=\"4. Nginx-1配置\"></a>4. Nginx-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Nginx-1</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#一定要关闭selinux</span></span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\"><span class=\"comment\">#因为我写了本地yum仓配置，又没装auto挂载，所以需要手动挂载，可以安装软件包的话，就忽略这步</span></span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\"><span class=\"comment\">#这里就源安装了，如果是编译安装，请注意自己自己的配置</span></span><br><span class=\"line\">route del default</span><br><span class=\"line\"><span class=\"comment\">#删除默认路由，临时删除，重启会重新生成，主要是改文件比较烦</span></span><br><span class=\"line\">route add default gw 10.0.0.10</span><br><span class=\"line\"><span class=\"comment\">#添加到LVS的默认路由</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"comment\">#查看路由</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/10.0.0.130.conf</span><br><span class=\"line\"><span class=\"comment\">#名字随意，需.conf结尾</span></span><br><span class=\"line\">upstream wordpress &#123;</span><br><span class=\"line\">        server 10.0.0.130;</span><br><span class=\"line\">        <span class=\"comment\">#这里是后端的wordpress，默认算法是轮询，权重都为1</span></span><br><span class=\"line\">        server 10.0.0.134;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        <span class=\"comment\">#这里配置为默认主页，检查配置时如果报错请删除其他文件的default_server即可</span></span><br><span class=\"line\">        server_name www.lee.com;      </span><br><span class=\"line\">        <span class=\"comment\">#配置域名解析，感兴趣的可自行配置，2种方法，一是搭建DNS server，二是直接在hosts文件添加解析</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                proxy_pass http://wordpress;</span><br><span class=\"line\">        <span class=\"comment\">#反代后端wordpress服务器</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"><span class=\"comment\">#这里没有编译安装nginx，如果是编译安装，配置文件目录可能不同，请注意</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Nginx-2配置\"><a href=\"#5-Nginx-2配置\" class=\"headerlink\" title=\"5. Nginx-2配置\"></a>5. Nginx-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Nginx-2</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\">vim /etc/nginx/conf.d/10.0.0.204.conf</span><br><span class=\"line\">upstream jpress&#123;</span><br><span class=\"line\">        server 10.0.0.204:8080;</span><br><span class=\"line\">        <span class=\"comment\">#这里是后端的jpress</span></span><br><span class=\"line\">        server 10.0.0.205:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        server_name www.lee.org;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                proxy_pass http://jpress;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nginx -t </span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-LNP-1配置\"><a href=\"#6-LNP-1配置\" class=\"headerlink\" title=\"6. LNP-1配置\"></a>6. LNP-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LNP-1</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\"><span class=\"comment\">#ubuntu默认防火墙是ufw</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#-F是清空filter表所有规则，流量信息等，如果你其他表有规则，请注意是否冲突</span></span><br><span class=\"line\">apt install nginx php-fpm php-mysql php-json unzip -y </span><br><span class=\"line\"><span class=\"comment\">#安装若干软件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/nginx/sites-enabled/default</span><br><span class=\"line\"><span class=\"comment\">#改default_server还是提示冲突，我直接删</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/sever130.conf</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        root /data/wordpress/www;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">        client_max_body_size 20m;</span><br><span class=\"line\">        <span class=\"comment\">#限制客户端上传文件大小，不配置为不限制</span></span><br><span class=\"line\">        location ~ \\.php$|/ping|/php_status&#123;</span><br><span class=\"line\">            <span class=\"comment\">#正则匹配以.php,.ping,.php_status结尾</span></span><br><span class=\"line\">                fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">                <span class=\"comment\">#php监控端口，可统一更改为socket路径</span></span><br><span class=\"line\">                fastcgi_param SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"comment\">#指定了FastCGI处理程序需要执行的脚本路径</span></span><br><span class=\"line\">                include fastcgi_params;</span><br><span class=\"line\">                <span class=\"comment\">#这个是相对路径，也可绝对路径。fastcgi_params文件会包含一些常用的FastCGI参数配置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#php配置</span></span><br><span class=\"line\">vim /etc/php/8.1/fpm/pool.d/www.conf</span><br><span class=\"line\">;listen = /run/php/php8.1-fpm.sock</span><br><span class=\"line\"><span class=\"comment\">#这个是socket路径，这里就演示端口了</span></span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br><span class=\"line\"><span class=\"comment\">#可修改0.0.0.0，或者在nginx改为进程文件</span></span><br><span class=\"line\">pm.status_path = /php_status</span><br><span class=\"line\"><span class=\"comment\">#php部分数据监控</span></span><br><span class=\"line\">ping.path = /ping</span><br><span class=\"line\"><span class=\"comment\">#检查php存活</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/php/8.1/fpm/php.ini</span><br><span class=\"line\">post_max_size = 100M</span><br><span class=\"line\">upload_max_filesize = 100M</span><br><span class=\"line\"><span class=\"comment\">#这里是修改上传文件限制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/www</span><br><span class=\"line\">vim /data/wordpress/www/phpinfo.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"><span class=\"comment\">#测试php是否被解析</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl start php8.1-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### wordpress配置</span></span><br><span class=\"line\">wget https://wordpress.org/latest.zip</span><br><span class=\"line\"><span class=\"built_in\">chown</span> www-data.www-data  wordpress -R</span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/* /data/wordpress/www</span><br><span class=\"line\"><span class=\"comment\">#配置完mysql，然后输入本机IP，可以配置wordpress站点了，实测上传大于20mb的文件会出现json错误，需要在NGINX配置文件将client_max_body_size改成你想要的大小，我改成了100就行了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#NFS做完开始在这里挂载</span></span><br><span class=\"line\">rsync -a  /data/wordpress/www/*  root@10.0.0.135:/data/wordpress/www/</span><br><span class=\"line\"><span class=\"comment\">#rsync默认递归复制，可 --no-recursion 取消递归，这里把文件复制到NFS</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /data/wordpress/www/*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\">#这里注意别清空了，两个大于号要看清</span></span><br><span class=\"line\">mount -a</span><br><span class=\"line\"><span class=\"comment\">#挂载fstab文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-LNP-2配置\"><a href=\"#7-LNP-2配置\" class=\"headerlink\" title=\"7. LNP-2配置\"></a>7. LNP-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LNP-2</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install nginx php-fpm php-mysql php-json -y</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/nginx/sites-enabled/default</span><br><span class=\"line\">vim /etc/nginx/conf.d/sever130.conf</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        root /data/wordpress/www;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">        client_max_body_size 20m;</span><br><span class=\"line\">        <span class=\"comment\">#限制客户端上传文件大小，不配置为不限制</span></span><br><span class=\"line\">        location ~ \\.php$|/ping|/php_status&#123;</span><br><span class=\"line\">                fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">                fastcgi_param SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                include fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">php</span><br><span class=\"line\">vim /etc/php/8.1/fpm/pool.d/www.conf</span><br><span class=\"line\">;listen = /run/php/php8.1-fpm.sock</span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br><span class=\"line\">pm.status_path = /php_status</span><br><span class=\"line\">ping.path = /ping</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/php/8.1/fpm/php.ini</span><br><span class=\"line\">post_max_size = 100M</span><br><span class=\"line\">upload_max_filesize = 100M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/www</span><br><span class=\"line\">vim /data/wordpress/www/phpinfo.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"><span class=\"comment\">#测试php是否被解析</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl start php8.1-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#挂载NFS</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-mysql-Mast配置\"><a href=\"#8-mysql-Mast配置\" class=\"headerlink\" title=\"8. mysql-Mast配置\"></a>8. mysql-Mast配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Mysql-Mast</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install mysql-server -y</span><br><span class=\"line\"><span class=\"comment\">#如果是编译安装，请注意自定义路径，可能会有不同</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#开启监听，默认是localhost</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 131 &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class=\"line\"><span class=\"string\">#做集群的话每台mysql都需要一个ID识别</span></span><br><span class=\"line\"><span class=\"string\">systemctl start mysql.service</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; create user backuser@&#x27;10.0.0.%&#x27; identified by &#x27;1234567890&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; grant replication slave on *.* to backuser@&#x27;10.0.0.%&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">#安装master半同步插件</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; \\! echo  &quot;</span>rpl_semi_sync_master_enable<span class=\"string\">&quot; &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class=\"line\"><span class=\"string\">#开启master半同步策略</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; \\! systemctl restart mysql</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; select @@rpl_semi_sync_master_enabled;</span></span><br><span class=\"line\"><span class=\"string\">#查看半同步策略是否开启</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; reset master;</span></span><br><span class=\"line\"><span class=\"string\">#重置binlog日志，也可以不重置</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; show master status;</span></span><br><span class=\"line\"><span class=\"string\">#接下来创建wordpress数据库和用户，顺便也可验证主从同步</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; create database wordpress;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; create user wordpress@&#x27;10.0.0.%&#x27; identified by &#x27;0987654321&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; grant all  on wordpress.* to wordpress@&#x27;10.0.0.%&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; select host,user from mysql.user;</span></span><br><span class=\"line\"><span class=\"string\">#在slave执行该命令，如果有，mysql就完事了，可去lnp配置wordpress</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-mysql-Slave-1配置\"><a href=\"#9-mysql-Slave-1配置\" class=\"headerlink\" title=\"9. mysql-Slave-1配置\"></a>9. mysql-Slave-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Slave-1</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install mysql-server -y</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 132\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#实际生产案例中slave应只读</span></span><br><span class=\"line\">systemctl start mysql.service</span><br><span class=\"line\"></span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#安装slave半同步插件</span></span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;rpl_semi_sync_slave_enabled&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;require_secure_transport = 1&quot;</span>&gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#死活连不上，发现开启安全连接秒连，查看master上安全连接是关闭的，百思不得其解，估计只要是master就会默认要求slave开启安全连接</span></span><br><span class=\"line\">mysql&gt; \\! systemctl restart mysql.service</span><br><span class=\"line\">mysql&gt; select @@rpl_semi_sync_slave_enabled; </span><br><span class=\"line\"><span class=\"comment\">#查看半同步插件是否启用</span></span><br><span class=\"line\">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;10.0.0.131&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"><span class=\"comment\">#这里是连接master的配置</span></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\"><span class=\"comment\">#启动slave</span></span><br><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\"><span class=\"comment\">#如果没有error，就ok了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-mysql-Slave-2配置\"><a href=\"#10-mysql-Slave-2配置\" class=\"headerlink\" title=\"10. mysql-Slave-2配置\"></a>10. mysql-Slave-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Slave-2</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install mysql-server -y</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 133\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql.service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;rpl_semi_sync_slave_enabled&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;require_secure_transport = 1&quot;</span>&gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl restart mysql.service</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@rpl_semi_sync_slave_enabled; </span><br><span class=\"line\">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;10.0.0.131&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11-NFS配置\"><a href=\"#11-NFS配置\" class=\"headerlink\" title=\"11. NFS配置\"></a>11. NFS配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#nfs配置</span></span><br><span class=\"line\">hostnamectl set-hostname NFS</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install nfs-kernel-server</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/&#123;wordpress,tomcat&#125;/&#123;www,www&#125;  -p &amp;&amp; <span class=\"built_in\">mkdir</span> /etc/exports.d</span><br><span class=\"line\">vim /etc/exports.d/wordpress.exports</span><br><span class=\"line\">/data/wordpress/www 10.0.0.0/24(rw)</span><br><span class=\"line\"><span class=\"comment\">#这里是wordpress的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/exports.d/tomcat.exports</span><br><span class=\"line\">/data/tomcat/www 10.0.0.0/24(rw)</span><br><span class=\"line\"><span class=\"comment\">#这里我把配置文件分开了，也可以放一起</span></span><br><span class=\"line\"></span><br><span class=\"line\">exportfs -v</span><br><span class=\"line\"><span class=\"comment\">#查看</span></span><br><span class=\"line\">exportfs -r</span><br><span class=\"line\"><span class=\"comment\">#重读配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www-data.www-data /data/wordpress</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /data/tomcat</span><br><span class=\"line\">wget http://pan.alybaba.top/soft/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#下载监控软件</span></span><br><span class=\"line\">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\">#软连接</span></span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a GNU-Linux-x86   /usr/local/sersync</span><br><span class=\"line\"><span class=\"comment\">#改名复制过来，推荐软连接，容错率高点感觉</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/sersync:$PATH&#x27;</span> &gt; /etc/profile.d/sersync.sh</span><br><span class=\"line\"><span class=\"comment\">#写默认路径</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/sersync.sh</span><br><span class=\"line\"><span class=\"comment\">#生效</span></span><br><span class=\"line\">vim /usr/local/sersync/confxml.xml</span><br><span class=\"line\"><span class=\"comment\">#文件太长，我只记几个要改的点</span></span><br><span class=\"line\">&lt;attrib start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">#这里是监控权限变化，最好开启，默认关闭</span></span><br><span class=\"line\">&lt;sersync&gt;</span><br><span class=\"line\">            &lt;localpath watch=<span class=\"string\">&quot;/data&quot;</span>&gt;</span><br><span class=\"line\">            &lt;!--需要监控的目录--&gt;</span><br><span class=\"line\">            &lt;remote ip=<span class=\"string\">&quot;10.0.0.136&quot;</span> name=<span class=\"string\">&quot;backup&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--rsync服务器IP，也就是备份服务器地址，name是rsync模块名需一致--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.39&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.40&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">        &lt;rsync&gt;</span><br><span class=\"line\">            &lt;commonParams params=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;auth start=<span class=\"string\">&quot;true&quot;</span> <span class=\"built_in\">users</span>=<span class=\"string\">&quot;rsyncuser&quot;</span> passwordfile=<span class=\"string\">&quot;/etc/rsync.pas&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--这里start需改为<span class=\"literal\">true</span>，<span class=\"built_in\">users</span>和密码存放位置可自定义--&gt;</span><br><span class=\"line\">            &lt;userDefinedPort start=<span class=\"string\">&quot;false&quot;</span> port=<span class=\"string\">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class=\"line\">            &lt;<span class=\"built_in\">timeout</span> start=<span class=\"string\">&quot;false&quot;</span> time=<span class=\"string\">&quot;100&quot;</span>/&gt;&lt;!-- <span class=\"built_in\">timeout</span>=100 --&gt;</span><br><span class=\"line\">            &lt;ssh start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/rsync&gt;</span><br><span class=\"line\"><span class=\"comment\">#其实还可以使用ssh协议，我前面应该用过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123456 &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600   /etc/rsync.pas</span><br><span class=\"line\">rsync --password-file=/etc/rsync.pas rsync://rsymcser@10.0.0.136/backup</span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> sersync2 -dro /usr/local/sersync/confxml.xml &amp;&gt;/dev/null &amp;</span><br><span class=\"line\"><span class=\"comment\">#后台运行，记得测试文件同步</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"11-NFS-BAK配置\"><a href=\"#11-NFS-BAK配置\" class=\"headerlink\" title=\"11. NFS-BAK配置\"></a>11. NFS-BAK配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname NFS-BAK</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">vim /etc/rsyncd.conf</span><br><span class=\"line\">    uid = root</span><br><span class=\"line\">    gid = root</span><br><span class=\"line\">    max connections = 0</span><br><span class=\"line\">    ignore errors</span><br><span class=\"line\">    exclude = lost+found/</span><br><span class=\"line\">    <span class=\"built_in\">log</span> file = /var/log/rsyncd.log</span><br><span class=\"line\">    pid file = /var/run/rsyncd.pid</span><br><span class=\"line\">    lock file = /var/run/rsyncd.lock</span><br><span class=\"line\">    reverse lookup = no</span><br><span class=\"line\">    [backup]</span><br><span class=\"line\">    path = /data</span><br><span class=\"line\">    comment = backup <span class=\"built_in\">dir</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> only = no</span><br><span class=\"line\">    auth <span class=\"built_in\">users</span> = rsyncuser</span><br><span class=\"line\">    secrets file = /etc/rsync.pas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/www</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;rsyncuser:123456&quot;</span> &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600  /etc/rsync.pas</span><br><span class=\"line\">systemctl restart rsync</span><br><span class=\"line\"><span class=\"comment\">#这里做完反手去LNP操作，当然如果同步出问题，请systemctl status rsync,查看连接日志排查</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-Tomcat-1配置\"><a href=\"#13-Tomcat-1配置\" class=\"headerlink\" title=\"13. Tomcat-1配置\"></a>13. Tomcat-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Tomcat-1</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install wget rsync -y</span><br><span class=\"line\"><span class=\"comment\">#这里我已经提前下载好了tomcat和jdk</span></span><br><span class=\"line\">tar xf apache-tomcat-8.5.89.tar.gz -C /usr/local/</span><br><span class=\"line\">tar xf jdk-8u371-linux-x64.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s jdk1.8.0_371 jdk</span><br><span class=\"line\">vim /etc/profile.d/jdk.sh</span><br><span class=\"line\">    <span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class=\"line\">    <span class=\"comment\">#指定JDK的安装路径</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\">    <span class=\"comment\">#将JDK的bin目录添加到默认PATH </span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$JAVA_HOME</span>/jre</span><br><span class=\"line\">    <span class=\"comment\">#指定JRE的安装路径</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/:<span class=\"variable\">$JRE_HOME</span>/lib/</span><br><span class=\"line\">    <span class=\"comment\">#指定Java类的搜索路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/jdk.sh</span><br><span class=\"line\">java -v</span><br><span class=\"line\"><span class=\"comment\">#测试是否生效</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s apache-tomcat-8.5.89 tomcat</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class=\"line\"><span class=\"comment\">#添加tomcat到默认PATH</span></span><br><span class=\"line\">.  /etc/profile.d/tomcat.sh</span><br><span class=\"line\">useradd -r -s /sbin/nologin tomcat</span><br><span class=\"line\"><span class=\"comment\">#生产环境最好指定特定统一用户，-r是系统用户，也就是id为1000以下</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class=\"line\"><span class=\"built_in\">echo</span>   <span class=\"string\">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>  &gt;  /usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\">vim /lib/systemd/system/tomcat.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\"></span><br><span class=\"line\">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有写配置文件可启用此选项</span></span><br><span class=\"line\">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class=\"line\">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=tomcat</span><br><span class=\"line\">Group=tomcat</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start tomcat.service</span><br><span class=\"line\">systemctl status tomcat.service</span><br><span class=\"line\">rsync -a ./jdk1.8.0_371  root@10.0.0.205:/usr/local/</span><br><span class=\"line\">rsync -a ./apache-tomcat-8.5.89  root@10.0.0.205:/usr/local/</span><br><span class=\"line\">wget wget -O jpress-v5.1.0.tar.gz  <span class=\"string\">&#x27;https://gitee.com/JPressProjects/jpress/repository/archive/v5.1.0?format=tar.gz&#x27;</span></span><br><span class=\"line\">tar xf jpress-v5.1.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> jpress-v5.1.0/</span><br><span class=\"line\">yum install maven</span><br><span class=\"line\"><span class=\"comment\">#jave编译器，奇怪的是我装这个的时候，附带给我来了一个openjdk8版本的全家桶</span></span><br><span class=\"line\">vim /etc/maven/settings.xml</span><br><span class=\"line\"> &lt;mirror&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">id</span>&gt;nexus-aliyun&lt;/id&gt;</span><br><span class=\"line\">                &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">                &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class=\"line\">                &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class=\"line\">&lt;/mirror&gt;</span><br><span class=\"line\"><span class=\"comment\">#在mirrors里添加这个镜像，主要是编译的时候加速用</span></span><br><span class=\"line\"></span><br><span class=\"line\">mvn clean install package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#编译语句</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> /usr/local/tomcat/webapps/ROOT  /usr/local/tomcat/webapps/ROOT1</span><br><span class=\"line\"><span class=\"comment\">#把root移走，默认读取的是root下的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> starter-tomcat/target/starter-tomcat-5.0.war /usr/local/tomcat/webapps/ROOT.war</span><br><span class=\"line\"><span class=\"comment\">#把jpress移进来，改名ROOT</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> tomcat.tomcat -R  /usr/local/tomcat/webapps/</span><br><span class=\"line\">vim /usr/local/tomcat/conf/server.xml</span><br><span class=\"line\">&lt;Host name=<span class=\"string\">&quot;localhost&quot;</span>  appBase=<span class=\"string\">&quot;/data/tomcat/www/webapps&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#这里我修改到其他的目录，方便统一挂载NFS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/tomcat/www/webapps/</span><br><span class=\"line\"><span class=\"comment\">#如果没有目录重启会报错</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> tomcat.tomcat /data -R</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a /usr/local/tomcat/webapps/*  ./</span><br><span class=\"line\">systemctl restart tomcat</span><br><span class=\"line\">rsync ./*  -a root@10.0.0.135:/data/tomcat/www/webapps/</span><br><span class=\"line\"><span class=\"comment\">#跟LNP一样，把文件传至nfs</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ./*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\">#写nfs挂载配置</span></span><br><span class=\"line\">yum install nfs-utils -y</span><br><span class=\"line\"><span class=\"comment\">#这里报错了，因为这里用的rocky，没有安装nfs，需要安装一下</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">mount -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#同时jpress只支持5.6和5.7的mysql，那么其实只要把master换为5.7就行了，下面是方法</span></span><br><span class=\"line\"><span class=\"comment\">#ubuntu</span></span><br><span class=\"line\">apt install software-properties-common</span><br><span class=\"line\">add-apt-repository -y ppa:ondrej/mysql-5.7</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install mysql-server-5.7</span><br><span class=\"line\"><span class=\"comment\">#redhat</span></span><br><span class=\"line\">vim /etc/yum.repos.d/mysql5.7.repo</span><br><span class=\"line\">[mysql5.7]</span><br><span class=\"line\"><span class=\"comment\">#名随意</span></span><br><span class=\"line\">name=MySQL 5.7</span><br><span class=\"line\"><span class=\"comment\">#随意也要见名知意</span></span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\"><span class=\"comment\">#仓库链接</span></span><br><span class=\"line\">enabled=1</span><br><span class=\"line\"><span class=\"comment\">#是否启用,1为启用</span></span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\"><span class=\"comment\">#是否检查gpg密钥，这里我就不检查了</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum repolist -v</span><br><span class=\"line\"><span class=\"comment\">#刷新仓库包，顺便看下仓库配置是否出从</span></span><br><span class=\"line\">yum  install mysql-community-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后也是一样配置账号密码权限</span></span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; create user jpress@<span class=\"string\">&#x27;10.0.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">mysql&gt; grant all on jpress.* to jpress@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-Tomcat-2配置\"><a href=\"#14-Tomcat-2配置\" class=\"headerlink\" title=\"14. Tomcat-2配置\"></a>14. Tomcat-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Tomcat-2</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install wget rsync -y</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s jdk1.8.0_371 jdk</span><br><span class=\"line\">vim /etc/profile.d/jdk.sh</span><br><span class=\"line\">    <span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk  </span><br><span class=\"line\">    <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\">    <span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$JAVA_HOME</span>/jre    </span><br><span class=\"line\">    <span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/:<span class=\"variable\">$JRE_HOME</span>/lib/</span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/jdk.sh</span><br><span class=\"line\">java -v</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s apache-tomcat-8.5.89 tomcat</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class=\"line\">.  /etc/profile.d/tomcat.sh</span><br><span class=\"line\">useradd -r -s /sbin/nologin tomcat</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class=\"line\"><span class=\"built_in\">echo</span>   <span class=\"string\">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>  &gt;  /usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\">vim /lib/systemd/system/tomcat.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\"></span><br><span class=\"line\">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有写配置文件可启用此选项</span></span><br><span class=\"line\">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class=\"line\">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=tomcat</span><br><span class=\"line\">Group=tomcat</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start tomcat.service</span><br><span class=\"line\">systemctl status tomcat.service</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/tomcat/www/webapps/</span><br><span class=\"line\"><span class=\"built_in\">chown</span> tomcat.tomcat /data -R</span><br><span class=\"line\">vim /usr/local/tomcat/conf/server.xml</span><br><span class=\"line\">&lt;Host name=<span class=\"string\">&quot;localhost&quot;</span>  appBase=<span class=\"string\">&quot;/data/tomcat/www/webapps&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\">yum install nfs-utils -y</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-配置小坑总结\"><a href=\"#15-配置小坑总结\" class=\"headerlink\" title=\"15. 配置小坑总结\"></a>15. 配置小坑总结</h3><h4 id=\"到这里我们的高服务大致就完成了，但是还是有点小问题，因为-keepalived-配置是轮询，而jpress又有验证码，导致登录不进去，我只好把-keepalived-的-persistence-timeout-开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用-sieesion-会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是-rr-算法-跟nginx搞混了-，要配置成wrr，权重才会生效…-然后也出现了很多小问题，比如redhat系列必须关闭-selinux，否则-nginx-无法配置转发，机器重启后还是得-iptables-F-刷一下，我忘记-disable-防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx-proxy我临时配的下一跳地址，老是会自动删除，导致-user-访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把-keepalived-删除了，直接使用-ipvsadm-配置……这个-IP-配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个-VPN-和-jumpserver-因为时间问题就先不看了，jumpserver-环境其实很简单，官方文档讲的很清晰-ps-主要是有脚本，真舒服-最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如-Ceph，HDFS，GlusterFS-等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲-wq保存文件。\"><a href=\"#到这里我们的高服务大致就完成了，但是还是有点小问题，因为-keepalived-配置是轮询，而jpress又有验证码，导致登录不进去，我只好把-keepalived-的-persistence-timeout-开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用-sieesion-会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是-rr-算法-跟nginx搞混了-，要配置成wrr，权重才会生效…-然后也出现了很多小问题，比如redhat系列必须关闭-selinux，否则-nginx-无法配置转发，机器重启后还是得-iptables-F-刷一下，我忘记-disable-防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx-proxy我临时配的下一跳地址，老是会自动删除，导致-user-访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把-keepalived-删除了，直接使用-ipvsadm-配置……这个-IP-配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个-VPN-和-jumpserver-因为时间问题就先不看了，jumpserver-环境其实很简单，官方文档讲的很清晰-ps-主要是有脚本，真舒服-最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如-Ceph，HDFS，GlusterFS-等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲-wq保存文件。\" class=\"headerlink\" title=\"到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效….然后也出现了很多小问题，比如redhat系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置……这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。\"></a>到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效….然后也出现了很多小问题，比如redhat系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。<del>然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置……</del>这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。</h4><h3 id=\"16-架构总结优缺点\"><a href=\"#16-架构总结优缺点\" class=\"headerlink\" title=\"16. 架构总结优缺点\"></a>16. 架构总结优缺点</h3><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><h4 id=\"1-高可用性：通过-Keepalived-实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\"><a href=\"#1-高可用性：通过-Keepalived-实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\" class=\"headerlink\" title=\"1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\"></a>1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。</h4><h4 id=\"2-负载均衡：通过-LVS-NAT-和-Nginx-实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\"><a href=\"#2-负载均衡：通过-LVS-NAT-和-Nginx-实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\" class=\"headerlink\" title=\"2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\"></a>2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。</h4><h4 id=\"3-扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\"><a href=\"#3-扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\" class=\"headerlink\" title=\"3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\"></a>3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。</h4><h4 id=\"4-弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\"><a href=\"#4-弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\" class=\"headerlink\" title=\"4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\"></a>4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。</h4><h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><h4 id=\"1-复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\"><a href=\"#1-复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\" class=\"headerlink\" title=\"1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\"></a>1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。</h4><h4 id=\"2-单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\"><a href=\"#2-单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\" class=\"headerlink\" title=\"2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\"></a>2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。</h4><h4 id=\"3-数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\"><a href=\"#3-数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\" class=\"headerlink\" title=\"3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\"></a>3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。</h4><h4 id=\"4-配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\"><a href=\"#4-配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\" class=\"headerlink\" title=\"4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\"></a>4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。</h4><h4 id=\"建议：\"><a href=\"#建议：\" class=\"headerlink\" title=\"建议：\"></a>建议：</h4><h4 id=\"1-建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\"><a href=\"#1-建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\" class=\"headerlink\" title=\"1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\"></a>1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用</h4><h4 id=\"2-NFS方案可替换\"><a href=\"#2-NFS方案可替换\" class=\"headerlink\" title=\"2. NFS方案可替换\"></a>2. NFS方案可替换</h4><h4 id=\"3-因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\"><a href=\"#3-因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\" class=\"headerlink\" title=\"3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\"></a>3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构</h4><h4 id=\"4-少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus\"><a href=\"#4-少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus\" class=\"headerlink\" title=\"4. 少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus\"></a>4. <del>少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus</del></h4>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h3><h4 id=\"多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\"><a href=\"#多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\" class=\"headerlink\" title=\"多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下\"></a>多线程CPU和Vmware，虚拟机操作系统限ubuntu和centos，具体看命令配置即可知道，架构图如下</h4><p><img src=\"/images/high_use.png\" alt=\"高可用\"></p>\n<h4 id=\"IP分配无\"><a href=\"#IP分配无\" class=\"headerlink\" title=\"IP分配无\"></a>IP分配无</h4><h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ol>\n<li>关闭selinux和防火墙还有把默认表清空一下，实际生产案例可能会配置专有端口，这个自己注意</li>\n<li>NAT和仅主机仅仅是模拟内外网不同网段，一定要理解含义</li>\n<li>这里只使用了LVS-NAT负载均衡转发，DR多网段和tunnel模式可参考我前面写的修改，删除和增加部分网络参数即可</li>\n<li>默认使用ROOT用户</li>\n<li>一步一步来，喝杯咖啡</li>\n</ol>\n<h4 id=\"普及下LVS和Nginx\"><a href=\"#普及下LVS和Nginx\" class=\"headerlink\" title=\"普及下LVS和Nginx\"></a>普及下LVS和Nginx</h4><ol>\n<li>四层转发不握手</li>\n<li>七层转发需要握手</li>\n<li>LVS只支持四层转发</li>\n<li>nginx支持七层和虚拟四层转发</li>\n<li>LVS基于内核转发，LVS适合高并发，大规模的网络负载均衡场景</li>\n<li>nginx更适合HTTP转发</li>\n</ol>\n<h3 id=\"2-LVS配置\"><a href=\"#2-LVS配置\" class=\"headerlink\" title=\"2. LVS配置\"></a>2. LVS配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">hostnamectl set-hostname LVS</span><br><span class=\"line\"><span class=\"comment\">#添加第二块网卡，这里偷懒使用自动获取的IP，格式如下</span></span><br><span class=\"line\"><span class=\"comment\">#centos网卡配置</span></span><br><span class=\"line\">NAME=ens160</span><br><span class=\"line\"><span class=\"comment\">#我这是ens160，这个名是别名，但也是命令行操作网卡的名称</span></span><br><span class=\"line\">DEVICE=ens160</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\"><span class=\"comment\">#这里写none也ok，意思是静态配置，如果为dhcp则是自动获取</span></span><br><span class=\"line\">IPADDR=10.0.0.100</span><br><span class=\"line\">GATEWAY=10.0.0.2</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\"><span class=\"comment\">#PREFIX=CIDR MASK，掩码两种格式，3个255为24</span></span><br><span class=\"line\">DNS=you dns</span><br><span class=\"line\">DNS1=you dns1</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\"><span class=\"comment\">#开启启动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ubuntu网卡配置 这里注意，ubuntu是用的netplan管理网卡，格式是yaml，需要注意层级格式</span></span><br><span class=\"line\">network:</span><br><span class=\"line\">  ethernets:</span><br><span class=\"line\">    ens33:</span><br><span class=\"line\">      dhcp4: <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"comment\">#这里改为no也行</span></span><br><span class=\"line\">      addresses:</span><br><span class=\"line\">        - 10.0.0.100/24</span><br><span class=\"line\">      gateway4: 10.0.0.2</span><br><span class=\"line\">      nameservers:</span><br><span class=\"line\">        addresses: [10.0.0.2,223.5.5.5]</span><br><span class=\"line\">  version: 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#网卡2同理，网卡名不同而已，注意层级格式就ok，这里就不在过多赘述</span></span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install ipvsadm keepalived -y</span><br><span class=\"line\"><span class=\"comment\">#这里采用源安装，如果是其他方式安装请注意路径</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"><span class=\"comment\">#这里是临时生效，永久生效请写sysctl配置文件</span></span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\"><span class=\"comment\">#这里要注意，默认配置文件名不可自定义,为keepalived.conf,如需自定义请使用keepalived -f /you/config/path</span></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">    <span class=\"comment\">#全局配置</span></span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   <span class=\"comment\">#邮箱配置</span></span><br><span class=\"line\">   router_id LVS_1</span><br><span class=\"line\">   <span class=\"comment\">#唯一性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    <span class=\"comment\">#节点配置</span></span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    <span class=\"comment\">#主为MASTER，备为BACKUP</span></span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    <span class=\"comment\">#绑定的网卡</span></span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    <span class=\"comment\">#组ID，同一组的主备需一样</span></span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    <span class=\"comment\">#启动时的优先级谁高则谁成为MASTER</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    <span class=\"comment\">#主备同步检查，默认1秒</span></span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">    <span class=\"comment\">#主备之间认证，防止其他节点窜入</span></span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">    <span class=\"comment\">#对外公网IP</span></span><br><span class=\"line\">        192.168.59.135</span><br><span class=\"line\">    <span class=\"comment\">#LVS主IP</span></span><br><span class=\"line\">        192.168.59.136</span><br><span class=\"line\">    <span class=\"comment\">#LVS备IP</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    <span class=\"comment\">#内网定义</span></span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    <span class=\"comment\">#NVIP漂移地址，一定要和启动优先级一样，不然我估计会出错</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">authentication &#123;</span><br><span class=\"line\">    auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        10.0.0.10</span><br><span class=\"line\">    <span class=\"comment\">#NVIP，漂移VIP</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.135 80&#123;</span><br><span class=\"line\">    <span class=\"comment\">#主机配置</span></span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    <span class=\"comment\">#健康检查间隔6秒</span></span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    <span class=\"comment\">#LVS调度算法为rr也就是轮询。rr|wrr|lc|wlc|lblc|sh|dh</span></span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    <span class=\"comment\">#负载均衡转发规则为NAT。DR|TUN|FULLTUN</span></span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    <span class=\"comment\">#我在ubuntu上可指定掩码，rokey上检查时会报错，所以我注释了，无伤大雅</span></span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    <span class=\"comment\">#50秒内访问同一台后端服务器，可注释</span></span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\">    <span class=\"comment\">#协议为TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        <span class=\"comment\">#后端真实服务器配置</span></span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        <span class=\"comment\">#权重</span></span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                <span class=\"comment\">#连接超时时间</span></span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                <span class=\"comment\">#重连次数，这里检查配置时也出错，干脆注释了</span></span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                <span class=\"comment\">#重连间隔时间</span></span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">                <span class=\"comment\">#健康检查时的端口</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.136 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#然后配置文件是叹号注释，写#纯属习惯</span></span><br><span class=\"line\"></span><br><span class=\"line\">keepalived -t</span><br><span class=\"line\"><span class=\"comment\">#检查配置文件，没有输出则正确。默认为/etc/keepalived/keepalived.conf,可自定义路径</span></span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived </span><br><span class=\"line\"><span class=\"comment\">#这里应看到以下信息，备用机则会显示remove VIPs。这里是根据启动优先级来决定谁是主备，而不是MSTER，BACKUP名称来决定，NVIP也是根据优先级</span></span><br><span class=\"line\">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) Entering MASTER STATE</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) setting VIPs.</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: (LAN_GATEWAY) Sending/queueing gratuitous ARPs on ens160 <span class=\"keyword\">for</span> 10.0.0.10</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 <span class=\"keyword\">for</span> 10.0.0.10</span><br><span class=\"line\">LVS Keepalived_vrrp[949]: Sending gratuitous ARP on ens160 <span class=\"keyword\">for</span> 10.0.0.10</span><br><span class=\"line\">ipvsadm -Ln</span><br><span class=\"line\"><span class=\"comment\">#keepalived配置里会自动配置ipvsadm，所以输入命令可直接查看</span></span><br><span class=\"line\">systemctl stop keepalived </span><br><span class=\"line\"><span class=\"comment\">#如果你停止服务，那么备用机会立马抢占NVIP，成为新的MASTR进行转发服务</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-LVS-BAK配置\"><a href=\"#3-LVS-BAK配置\" class=\"headerlink\" title=\"3. LVS-BAK配置\"></a>3. LVS-BAK配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LVS-BAK</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#ip配置同LVS</span></span><br><span class=\"line\">mount /dev/sr0 /mnt/</span><br><span class=\"line\"><span class=\"comment\">#sr0和cdrom都是指光盘的意思，因为我挂了光盘的原因，安装软件会报错，所以必须挂载，没有装AUTO挂载</span></span><br><span class=\"line\">yum -y install ipvsadm keepalived</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\">vim /etc/keepalived/keepalived.conf</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">    you.example@mail.com</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from  you.example@mail.com</span><br><span class=\"line\">   smtp_server mail.domob.cn</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_2</span><br><span class=\"line\">   <span class=\"comment\">#唯一标识</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    <span class=\"comment\">#备份</span></span><br><span class=\"line\">    interface ens224</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    <span class=\"comment\">#优先级不能超过MASTER，不然VIP会漂移过来</span></span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.59.135</span><br><span class=\"line\">        192.168.59.136</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance LAN_GATEWAY &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    virtual_router_id 62</span><br><span class=\"line\">    priority 99</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        10.0.0.10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.135 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">               connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">virtual_server 192.168.59.136 80&#123;</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    lb_kind NAT</span><br><span class=\"line\">    !nat_mask 255.255.255.0</span><br><span class=\"line\">    persistence_timeout 50</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    real_server 10.0.0.202 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    real_server 10.0.0.203 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">           TCP_CHECK &#123;</span><br><span class=\"line\">                connect_timeout 10</span><br><span class=\"line\">                !nb_get_retry 3</span><br><span class=\"line\">                delay_before_retry 3</span><br><span class=\"line\">                connect_port 80</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">keepalived -t</span><br><span class=\"line\">systemctl start keepalived </span><br><span class=\"line\">systemctl status keepalived</span><br><span class=\"line\">ipvsadm -Ln</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Nginx-1配置\"><a href=\"#4-Nginx-1配置\" class=\"headerlink\" title=\"4. Nginx-1配置\"></a>4. Nginx-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Nginx-1</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#一定要关闭selinux</span></span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\"><span class=\"comment\">#因为我写了本地yum仓配置，又没装auto挂载，所以需要手动挂载，可以安装软件包的话，就忽略这步</span></span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\"><span class=\"comment\">#这里就源安装了，如果是编译安装，请注意自己自己的配置</span></span><br><span class=\"line\">route del default</span><br><span class=\"line\"><span class=\"comment\">#删除默认路由，临时删除，重启会重新生成，主要是改文件比较烦</span></span><br><span class=\"line\">route add default gw 10.0.0.10</span><br><span class=\"line\"><span class=\"comment\">#添加到LVS的默认路由</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"comment\">#查看路由</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/10.0.0.130.conf</span><br><span class=\"line\"><span class=\"comment\">#名字随意，需.conf结尾</span></span><br><span class=\"line\">upstream wordpress &#123;</span><br><span class=\"line\">        server 10.0.0.130;</span><br><span class=\"line\">        <span class=\"comment\">#这里是后端的wordpress，默认算法是轮询，权重都为1</span></span><br><span class=\"line\">        server 10.0.0.134;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        <span class=\"comment\">#这里配置为默认主页，检查配置时如果报错请删除其他文件的default_server即可</span></span><br><span class=\"line\">        server_name www.lee.com;      </span><br><span class=\"line\">        <span class=\"comment\">#配置域名解析，感兴趣的可自行配置，2种方法，一是搭建DNS server，二是直接在hosts文件添加解析</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                proxy_pass http://wordpress;</span><br><span class=\"line\">        <span class=\"comment\">#反代后端wordpress服务器</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"><span class=\"comment\">#这里没有编译安装nginx，如果是编译安装，配置文件目录可能不同，请注意</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Nginx-2配置\"><a href=\"#5-Nginx-2配置\" class=\"headerlink\" title=\"5. Nginx-2配置\"></a>5. Nginx-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Nginx-2</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install nginx -y</span><br><span class=\"line\">vim /etc/nginx/conf.d/10.0.0.204.conf</span><br><span class=\"line\">upstream jpress&#123;</span><br><span class=\"line\">        server 10.0.0.204:8080;</span><br><span class=\"line\">        <span class=\"comment\">#这里是后端的jpress</span></span><br><span class=\"line\">        server 10.0.0.205:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        server_name www.lee.org;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                proxy_pass http://jpress;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nginx -t </span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;10.0.0.202 www.lee.com\\n10.0.0.203 www.lee.org&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-LNP-1配置\"><a href=\"#6-LNP-1配置\" class=\"headerlink\" title=\"6. LNP-1配置\"></a>6. LNP-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LNP-1</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\"><span class=\"comment\">#ubuntu默认防火墙是ufw</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\"><span class=\"comment\">#-F是清空filter表所有规则，流量信息等，如果你其他表有规则，请注意是否冲突</span></span><br><span class=\"line\">apt install nginx php-fpm php-mysql php-json unzip -y </span><br><span class=\"line\"><span class=\"comment\">#安装若干软件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/nginx/sites-enabled/default</span><br><span class=\"line\"><span class=\"comment\">#改default_server还是提示冲突，我直接删</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/sever130.conf</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        root /data/wordpress/www;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">        client_max_body_size 20m;</span><br><span class=\"line\">        <span class=\"comment\">#限制客户端上传文件大小，不配置为不限制</span></span><br><span class=\"line\">        location ~ \\.php$|/ping|/php_status&#123;</span><br><span class=\"line\">            <span class=\"comment\">#正则匹配以.php,.ping,.php_status结尾</span></span><br><span class=\"line\">                fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">                <span class=\"comment\">#php监控端口，可统一更改为socket路径</span></span><br><span class=\"line\">                fastcgi_param SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                <span class=\"comment\">#指定了FastCGI处理程序需要执行的脚本路径</span></span><br><span class=\"line\">                include fastcgi_params;</span><br><span class=\"line\">                <span class=\"comment\">#这个是相对路径，也可绝对路径。fastcgi_params文件会包含一些常用的FastCGI参数配置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#php配置</span></span><br><span class=\"line\">vim /etc/php/8.1/fpm/pool.d/www.conf</span><br><span class=\"line\">;listen = /run/php/php8.1-fpm.sock</span><br><span class=\"line\"><span class=\"comment\">#这个是socket路径，这里就演示端口了</span></span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br><span class=\"line\"><span class=\"comment\">#可修改0.0.0.0，或者在nginx改为进程文件</span></span><br><span class=\"line\">pm.status_path = /php_status</span><br><span class=\"line\"><span class=\"comment\">#php部分数据监控</span></span><br><span class=\"line\">ping.path = /ping</span><br><span class=\"line\"><span class=\"comment\">#检查php存活</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/php/8.1/fpm/php.ini</span><br><span class=\"line\">post_max_size = 100M</span><br><span class=\"line\">upload_max_filesize = 100M</span><br><span class=\"line\"><span class=\"comment\">#这里是修改上传文件限制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/www</span><br><span class=\"line\">vim /data/wordpress/www/phpinfo.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"><span class=\"comment\">#测试php是否被解析</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl start php8.1-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### wordpress配置</span></span><br><span class=\"line\">wget https://wordpress.org/latest.zip</span><br><span class=\"line\"><span class=\"built_in\">chown</span> www-data.www-data  wordpress -R</span><br><span class=\"line\"><span class=\"built_in\">mv</span> wordpress/* /data/wordpress/www</span><br><span class=\"line\"><span class=\"comment\">#配置完mysql，然后输入本机IP，可以配置wordpress站点了，实测上传大于20mb的文件会出现json错误，需要在NGINX配置文件将client_max_body_size改成你想要的大小，我改成了100就行了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#NFS做完开始在这里挂载</span></span><br><span class=\"line\">rsync -a  /data/wordpress/www/*  root@10.0.0.135:/data/wordpress/www/</span><br><span class=\"line\"><span class=\"comment\">#rsync默认递归复制，可 --no-recursion 取消递归，这里把文件复制到NFS</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /data/wordpress/www/*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\">#这里注意别清空了，两个大于号要看清</span></span><br><span class=\"line\">mount -a</span><br><span class=\"line\"><span class=\"comment\">#挂载fstab文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-LNP-2配置\"><a href=\"#7-LNP-2配置\" class=\"headerlink\" title=\"7. LNP-2配置\"></a>7. LNP-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname LNP-2</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install nginx php-fpm php-mysql php-json -y</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/nginx/sites-enabled/default</span><br><span class=\"line\">vim /etc/nginx/conf.d/sever130.conf</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        root /data/wordpress/www;</span><br><span class=\"line\">        index index.php;</span><br><span class=\"line\">        client_max_body_size 20m;</span><br><span class=\"line\">        <span class=\"comment\">#限制客户端上传文件大小，不配置为不限制</span></span><br><span class=\"line\">        location ~ \\.php$|/ping|/php_status&#123;</span><br><span class=\"line\">                fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">                fastcgi_param SCRIPT_FILENAME $document_root<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">                include fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">php</span><br><span class=\"line\">vim /etc/php/8.1/fpm/pool.d/www.conf</span><br><span class=\"line\">;listen = /run/php/php8.1-fpm.sock</span><br><span class=\"line\">listen = 127.0.0.1:9000</span><br><span class=\"line\">pm.status_path = /php_status</span><br><span class=\"line\">ping.path = /ping</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/php/8.1/fpm/php.ini</span><br><span class=\"line\">post_max_size = 100M</span><br><span class=\"line\">upload_max_filesize = 100M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/www</span><br><span class=\"line\">vim /data/wordpress/www/phpinfo.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"><span class=\"comment\">#测试php是否被解析</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl start php8.1-fpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#挂载NFS</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/wordpress/www /data/wordpress/www/  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-mysql-Mast配置\"><a href=\"#8-mysql-Mast配置\" class=\"headerlink\" title=\"8. mysql-Mast配置\"></a>8. mysql-Mast配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Mysql-Mast</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install mysql-server -y</span><br><span class=\"line\"><span class=\"comment\">#如果是编译安装，请注意自定义路径，可能会有不同</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#开启监听，默认是localhost</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 131 &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class=\"line\"><span class=\"string\">#做集群的话每台mysql都需要一个ID识别</span></span><br><span class=\"line\"><span class=\"string\">systemctl start mysql.service</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; create user backuser@&#x27;10.0.0.%&#x27; identified by &#x27;1234567890&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; grant replication slave on *.* to backuser@&#x27;10.0.0.%&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">#安装master半同步插件</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; \\! echo  &quot;</span>rpl_semi_sync_master_enable<span class=\"string\">&quot; &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br><span class=\"line\"><span class=\"string\">#开启master半同步策略</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; \\! systemctl restart mysql</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; select @@rpl_semi_sync_master_enabled;</span></span><br><span class=\"line\"><span class=\"string\">#查看半同步策略是否开启</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; reset master;</span></span><br><span class=\"line\"><span class=\"string\">#重置binlog日志，也可以不重置</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; show master status;</span></span><br><span class=\"line\"><span class=\"string\">#接下来创建wordpress数据库和用户，顺便也可验证主从同步</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; create database wordpress;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; create user wordpress@&#x27;10.0.0.%&#x27; identified by &#x27;0987654321&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; grant all  on wordpress.* to wordpress@&#x27;10.0.0.%&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">mysql&gt; select host,user from mysql.user;</span></span><br><span class=\"line\"><span class=\"string\">#在slave执行该命令，如果有，mysql就完事了，可去lnp配置wordpress</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-mysql-Slave-1配置\"><a href=\"#9-mysql-Slave-1配置\" class=\"headerlink\" title=\"9. mysql-Slave-1配置\"></a>9. mysql-Slave-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Slave-1</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install mysql-server -y</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 132\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#实际生产案例中slave应只读</span></span><br><span class=\"line\">systemctl start mysql.service</span><br><span class=\"line\"></span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">#安装slave半同步插件</span></span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;rpl_semi_sync_slave_enabled&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;require_secure_transport = 1&quot;</span>&gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#死活连不上，发现开启安全连接秒连，查看master上安全连接是关闭的，百思不得其解，估计只要是master就会默认要求slave开启安全连接</span></span><br><span class=\"line\">mysql&gt; \\! systemctl restart mysql.service</span><br><span class=\"line\">mysql&gt; select @@rpl_semi_sync_slave_enabled; </span><br><span class=\"line\"><span class=\"comment\">#查看半同步插件是否启用</span></span><br><span class=\"line\">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;10.0.0.131&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\"><span class=\"comment\">#这里是连接master的配置</span></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\"><span class=\"comment\">#启动slave</span></span><br><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\"><span class=\"comment\">#如果没有error，就ok了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-mysql-Slave-2配置\"><a href=\"#10-mysql-Slave-2配置\" class=\"headerlink\" title=\"10. mysql-Slave-2配置\"></a>10. mysql-Slave-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Slave-2</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install mysql-server -y</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;server-id = 133\\nread-only = 1&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql.service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class=\"string\">&#x27;semisync_slave.so&#x27;</span>;</span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;rpl_semi_sync_slave_enabled&quot;</span> &gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">mysql&gt; \\! <span class=\"built_in\">echo</span>  <span class=\"string\">&quot;require_secure_transport = 1&quot;</span>&gt;&gt; /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl restart mysql.service</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@rpl_semi_sync_slave_enabled; </span><br><span class=\"line\">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class=\"string\">&#x27;10.0.0.131&#x27;</span>,</span><br><span class=\"line\">MASTER_USER=<span class=\"string\">&#x27;backuser&#x27;</span>,</span><br><span class=\"line\">MASTER_PASSWORD=<span class=\"string\">&#x27;1234567890&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_FILE=<span class=\"string\">&#x27;binlog.000001&#x27;</span>,</span><br><span class=\"line\">MASTER_LOG_POS=157;</span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"11-NFS配置\"><a href=\"#11-NFS配置\" class=\"headerlink\" title=\"11. NFS配置\"></a>11. NFS配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#nfs配置</span></span><br><span class=\"line\">hostnamectl set-hostname NFS</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">apt install nfs-kernel-server</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/&#123;wordpress,tomcat&#125;/&#123;www,www&#125;  -p &amp;&amp; <span class=\"built_in\">mkdir</span> /etc/exports.d</span><br><span class=\"line\">vim /etc/exports.d/wordpress.exports</span><br><span class=\"line\">/data/wordpress/www 10.0.0.0/24(rw)</span><br><span class=\"line\"><span class=\"comment\">#这里是wordpress的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/exports.d/tomcat.exports</span><br><span class=\"line\">/data/tomcat/www 10.0.0.0/24(rw)</span><br><span class=\"line\"><span class=\"comment\">#这里我把配置文件分开了，也可以放一起</span></span><br><span class=\"line\"></span><br><span class=\"line\">exportfs -v</span><br><span class=\"line\"><span class=\"comment\">#查看</span></span><br><span class=\"line\">exportfs -r</span><br><span class=\"line\"><span class=\"comment\">#重读配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R www-data.www-data /data/wordpress</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /data/tomcat</span><br><span class=\"line\">wget http://pan.alybaba.top/soft/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#下载监控软件</span></span><br><span class=\"line\">tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/GNU-Linux-x86/sersync2    /usr/local/bin</span><br><span class=\"line\"><span class=\"comment\">#软连接</span></span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a GNU-Linux-x86   /usr/local/sersync</span><br><span class=\"line\"><span class=\"comment\">#改名复制过来，推荐软连接，容错率高点感觉</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/sersync:$PATH&#x27;</span> &gt; /etc/profile.d/sersync.sh</span><br><span class=\"line\"><span class=\"comment\">#写默认路径</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/sersync.sh</span><br><span class=\"line\"><span class=\"comment\">#生效</span></span><br><span class=\"line\">vim /usr/local/sersync/confxml.xml</span><br><span class=\"line\"><span class=\"comment\">#文件太长，我只记几个要改的点</span></span><br><span class=\"line\">&lt;attrib start=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">#这里是监控权限变化，最好开启，默认关闭</span></span><br><span class=\"line\">&lt;sersync&gt;</span><br><span class=\"line\">            &lt;localpath watch=<span class=\"string\">&quot;/data&quot;</span>&gt;</span><br><span class=\"line\">            &lt;!--需要监控的目录--&gt;</span><br><span class=\"line\">            &lt;remote ip=<span class=\"string\">&quot;10.0.0.136&quot;</span> name=<span class=\"string\">&quot;backup&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--rsync服务器IP，也就是备份服务器地址，name是rsync模块名需一致--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.39&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">            &lt;!--&lt;remote ip=<span class=\"string\">&quot;192.168.8.40&quot;</span> name=<span class=\"string\">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class=\"line\">        &lt;/localpath&gt;</span><br><span class=\"line\">        &lt;rsync&gt;</span><br><span class=\"line\">            &lt;commonParams params=<span class=\"string\">&quot;-artuz&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;auth start=<span class=\"string\">&quot;true&quot;</span> <span class=\"built_in\">users</span>=<span class=\"string\">&quot;rsyncuser&quot;</span> passwordfile=<span class=\"string\">&quot;/etc/rsync.pas&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--这里start需改为<span class=\"literal\">true</span>，<span class=\"built_in\">users</span>和密码存放位置可自定义--&gt;</span><br><span class=\"line\">            &lt;userDefinedPort start=<span class=\"string\">&quot;false&quot;</span> port=<span class=\"string\">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class=\"line\">            &lt;<span class=\"built_in\">timeout</span> start=<span class=\"string\">&quot;false&quot;</span> time=<span class=\"string\">&quot;100&quot;</span>/&gt;&lt;!-- <span class=\"built_in\">timeout</span>=100 --&gt;</span><br><span class=\"line\">            &lt;ssh start=<span class=\"string\">&quot;false&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/rsync&gt;</span><br><span class=\"line\"><span class=\"comment\">#其实还可以使用ssh协议，我前面应该用过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123456 &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600   /etc/rsync.pas</span><br><span class=\"line\">rsync --password-file=/etc/rsync.pas rsync://rsymcser@10.0.0.136/backup</span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> sersync2 -dro /usr/local/sersync/confxml.xml &amp;&gt;/dev/null &amp;</span><br><span class=\"line\"><span class=\"comment\">#后台运行，记得测试文件同步</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"11-NFS-BAK配置\"><a href=\"#11-NFS-BAK配置\" class=\"headerlink\" title=\"11. NFS-BAK配置\"></a>11. NFS-BAK配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname NFS-BAK</span><br><span class=\"line\">systemctl stop ufw</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> ufw</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">vim /etc/rsyncd.conf</span><br><span class=\"line\">    uid = root</span><br><span class=\"line\">    gid = root</span><br><span class=\"line\">    max connections = 0</span><br><span class=\"line\">    ignore errors</span><br><span class=\"line\">    exclude = lost+found/</span><br><span class=\"line\">    <span class=\"built_in\">log</span> file = /var/log/rsyncd.log</span><br><span class=\"line\">    pid file = /var/run/rsyncd.pid</span><br><span class=\"line\">    lock file = /var/run/rsyncd.lock</span><br><span class=\"line\">    reverse lookup = no</span><br><span class=\"line\">    [backup]</span><br><span class=\"line\">    path = /data</span><br><span class=\"line\">    comment = backup <span class=\"built_in\">dir</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> only = no</span><br><span class=\"line\">    auth <span class=\"built_in\">users</span> = rsyncuser</span><br><span class=\"line\">    secrets file = /etc/rsync.pas</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/wordpress/www</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;rsyncuser:123456&quot;</span> &gt; /etc/rsync.pas</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600  /etc/rsync.pas</span><br><span class=\"line\">systemctl restart rsync</span><br><span class=\"line\"><span class=\"comment\">#这里做完反手去LNP操作，当然如果同步出问题，请systemctl status rsync,查看连接日志排查</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-Tomcat-1配置\"><a href=\"#13-Tomcat-1配置\" class=\"headerlink\" title=\"13. Tomcat-1配置\"></a>13. Tomcat-1配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Tomcat-1</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install wget rsync -y</span><br><span class=\"line\"><span class=\"comment\">#这里我已经提前下载好了tomcat和jdk</span></span><br><span class=\"line\">tar xf apache-tomcat-8.5.89.tar.gz -C /usr/local/</span><br><span class=\"line\">tar xf jdk-8u371-linux-x64.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s jdk1.8.0_371 jdk</span><br><span class=\"line\">vim /etc/profile.d/jdk.sh</span><br><span class=\"line\">    <span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class=\"line\">    <span class=\"comment\">#指定JDK的安装路径</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\">    <span class=\"comment\">#将JDK的bin目录添加到默认PATH </span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$JAVA_HOME</span>/jre</span><br><span class=\"line\">    <span class=\"comment\">#指定JRE的安装路径</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/:<span class=\"variable\">$JRE_HOME</span>/lib/</span><br><span class=\"line\">    <span class=\"comment\">#指定Java类的搜索路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/jdk.sh</span><br><span class=\"line\">java -v</span><br><span class=\"line\"><span class=\"comment\">#测试是否生效</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s apache-tomcat-8.5.89 tomcat</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class=\"line\"><span class=\"comment\">#添加tomcat到默认PATH</span></span><br><span class=\"line\">.  /etc/profile.d/tomcat.sh</span><br><span class=\"line\">useradd -r -s /sbin/nologin tomcat</span><br><span class=\"line\"><span class=\"comment\">#生产环境最好指定特定统一用户，-r是系统用户，也就是id为1000以下</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class=\"line\"><span class=\"built_in\">echo</span>   <span class=\"string\">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>  &gt;  /usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\">vim /lib/systemd/system/tomcat.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\"></span><br><span class=\"line\">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有写配置文件可启用此选项</span></span><br><span class=\"line\">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class=\"line\">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=tomcat</span><br><span class=\"line\">Group=tomcat</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start tomcat.service</span><br><span class=\"line\">systemctl status tomcat.service</span><br><span class=\"line\">rsync -a ./jdk1.8.0_371  root@10.0.0.205:/usr/local/</span><br><span class=\"line\">rsync -a ./apache-tomcat-8.5.89  root@10.0.0.205:/usr/local/</span><br><span class=\"line\">wget wget -O jpress-v5.1.0.tar.gz  <span class=\"string\">&#x27;https://gitee.com/JPressProjects/jpress/repository/archive/v5.1.0?format=tar.gz&#x27;</span></span><br><span class=\"line\">tar xf jpress-v5.1.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> jpress-v5.1.0/</span><br><span class=\"line\">yum install maven</span><br><span class=\"line\"><span class=\"comment\">#jave编译器，奇怪的是我装这个的时候，附带给我来了一个openjdk8版本的全家桶</span></span><br><span class=\"line\">vim /etc/maven/settings.xml</span><br><span class=\"line\"> &lt;mirror&gt;</span><br><span class=\"line\">                &lt;<span class=\"built_in\">id</span>&gt;nexus-aliyun&lt;/id&gt;</span><br><span class=\"line\">                &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">                &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class=\"line\">                &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class=\"line\">&lt;/mirror&gt;</span><br><span class=\"line\"><span class=\"comment\">#在mirrors里添加这个镜像，主要是编译的时候加速用</span></span><br><span class=\"line\"></span><br><span class=\"line\">mvn clean install package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#编译语句</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> /usr/local/tomcat/webapps/ROOT  /usr/local/tomcat/webapps/ROOT1</span><br><span class=\"line\"><span class=\"comment\">#把root移走，默认读取的是root下的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> starter-tomcat/target/starter-tomcat-5.0.war /usr/local/tomcat/webapps/ROOT.war</span><br><span class=\"line\"><span class=\"comment\">#把jpress移进来，改名ROOT</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> tomcat.tomcat -R  /usr/local/tomcat/webapps/</span><br><span class=\"line\">vim /usr/local/tomcat/conf/server.xml</span><br><span class=\"line\">&lt;Host name=<span class=\"string\">&quot;localhost&quot;</span>  appBase=<span class=\"string\">&quot;/data/tomcat/www/webapps&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#这里我修改到其他的目录，方便统一挂载NFS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/tomcat/www/webapps/</span><br><span class=\"line\"><span class=\"comment\">#如果没有目录重启会报错</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> tomcat.tomcat /data -R</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a /usr/local/tomcat/webapps/*  ./</span><br><span class=\"line\">systemctl restart tomcat</span><br><span class=\"line\">rsync ./*  -a root@10.0.0.135:/data/tomcat/www/webapps/</span><br><span class=\"line\"><span class=\"comment\">#跟LNP一样，把文件传至nfs</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ./*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\">#写nfs挂载配置</span></span><br><span class=\"line\">yum install nfs-utils -y</span><br><span class=\"line\"><span class=\"comment\">#这里报错了，因为这里用的rocky，没有安装nfs，需要安装一下</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">mount -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#同时jpress只支持5.6和5.7的mysql，那么其实只要把master换为5.7就行了，下面是方法</span></span><br><span class=\"line\"><span class=\"comment\">#ubuntu</span></span><br><span class=\"line\">apt install software-properties-common</span><br><span class=\"line\">add-apt-repository -y ppa:ondrej/mysql-5.7</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install mysql-server-5.7</span><br><span class=\"line\"><span class=\"comment\">#redhat</span></span><br><span class=\"line\">vim /etc/yum.repos.d/mysql5.7.repo</span><br><span class=\"line\">[mysql5.7]</span><br><span class=\"line\"><span class=\"comment\">#名随意</span></span><br><span class=\"line\">name=MySQL 5.7</span><br><span class=\"line\"><span class=\"comment\">#随意也要见名知意</span></span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\"><span class=\"comment\">#仓库链接</span></span><br><span class=\"line\">enabled=1</span><br><span class=\"line\"><span class=\"comment\">#是否启用,1为启用</span></span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\"><span class=\"comment\">#是否检查gpg密钥，这里我就不检查了</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum repolist -v</span><br><span class=\"line\"><span class=\"comment\">#刷新仓库包，顺便看下仓库配置是否出从</span></span><br><span class=\"line\">yum  install mysql-community-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后也是一样配置账号密码权限</span></span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; create user jpress@<span class=\"string\">&#x27;10.0.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">mysql&gt; grant all on jpress.* to jpress@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-Tomcat-2配置\"><a href=\"#14-Tomcat-2配置\" class=\"headerlink\" title=\"14. Tomcat-2配置\"></a>14. Tomcat-2配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname Tomcat-2</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">mount /dev/cdrom /mnt</span><br><span class=\"line\">yum install wget rsync -y</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s jdk1.8.0_371 jdk</span><br><span class=\"line\">vim /etc/profile.d/jdk.sh</span><br><span class=\"line\">    <span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk  </span><br><span class=\"line\">    <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\">    <span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$JAVA_HOME</span>/jre    </span><br><span class=\"line\">    <span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/:<span class=\"variable\">$JRE_HOME</span>/lib/</span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/jdk.sh</span><br><span class=\"line\">java -v</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s apache-tomcat-8.5.89 tomcat</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/tomcat.sh</span><br><span class=\"line\">.  /etc/profile.d/tomcat.sh</span><br><span class=\"line\">useradd -r -s /sbin/nologin tomcat</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R tomcat.tomcat /usr/local/tomcat/</span><br><span class=\"line\"><span class=\"built_in\">echo</span>   <span class=\"string\">&#x27;JAVA_HOME=/usr/local/jdk&#x27;</span>  &gt;  /usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\">vim /lib/systemd/system/tomcat.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\"></span><br><span class=\"line\">EnvironmentFile=/usr/local/tomcat/conf/tomcat.conf</span><br><span class=\"line\"><span class=\"comment\">#Environment=JAVA_HOME=/usr/local/jdk</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有写配置文件可启用此选项</span></span><br><span class=\"line\">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class=\"line\">ExecStop=/usr/local/tomcat/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\">User=tomcat</span><br><span class=\"line\">Group=tomcat</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start tomcat.service</span><br><span class=\"line\">systemctl status tomcat.service</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/tomcat/www/webapps/</span><br><span class=\"line\"><span class=\"built_in\">chown</span> tomcat.tomcat /data -R</span><br><span class=\"line\">vim /usr/local/tomcat/conf/server.xml</span><br><span class=\"line\">&lt;Host name=<span class=\"string\">&quot;localhost&quot;</span>  appBase=<span class=\"string\">&quot;/data/tomcat/www/webapps&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;10.0.0.135:/data/tomcat/www/webapps /data/tomcat/www/webapps  nfs _netdev 0 0&quot;</span>  &gt;&gt; /etc/fstab</span><br><span class=\"line\">yum install nfs-utils -y</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">mount -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-配置小坑总结\"><a href=\"#15-配置小坑总结\" class=\"headerlink\" title=\"15. 配置小坑总结\"></a>15. 配置小坑总结</h3><h4 id=\"到这里我们的高服务大致就完成了，但是还是有点小问题，因为-keepalived-配置是轮询，而jpress又有验证码，导致登录不进去，我只好把-keepalived-的-persistence-timeout-开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用-sieesion-会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是-rr-算法-跟nginx搞混了-，要配置成wrr，权重才会生效…-然后也出现了很多小问题，比如redhat系列必须关闭-selinux，否则-nginx-无法配置转发，机器重启后还是得-iptables-F-刷一下，我忘记-disable-防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx-proxy我临时配的下一跳地址，老是会自动删除，导致-user-访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把-keepalived-删除了，直接使用-ipvsadm-配置……这个-IP-配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个-VPN-和-jumpserver-因为时间问题就先不看了，jumpserver-环境其实很简单，官方文档讲的很清晰-ps-主要是有脚本，真舒服-最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如-Ceph，HDFS，GlusterFS-等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲-wq保存文件。\"><a href=\"#到这里我们的高服务大致就完成了，但是还是有点小问题，因为-keepalived-配置是轮询，而jpress又有验证码，导致登录不进去，我只好把-keepalived-的-persistence-timeout-开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用-sieesion-会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是-rr-算法-跟nginx搞混了-，要配置成wrr，权重才会生效…-然后也出现了很多小问题，比如redhat系列必须关闭-selinux，否则-nginx-无法配置转发，机器重启后还是得-iptables-F-刷一下，我忘记-disable-防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx-proxy我临时配的下一跳地址，老是会自动删除，导致-user-访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把-keepalived-删除了，直接使用-ipvsadm-配置……这个-IP-配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个-VPN-和-jumpserver-因为时间问题就先不看了，jumpserver-环境其实很简单，官方文档讲的很清晰-ps-主要是有脚本，真舒服-最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如-Ceph，HDFS，GlusterFS-等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲-wq保存文件。\" class=\"headerlink\" title=\"到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效….然后也出现了很多小问题，比如redhat系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置……这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。\"></a>到这里我们的高服务大致就完成了，但是还是有点小问题，因为 keepalived 配置是轮询，而jpress又有验证码，导致登录不进去，我只好把 keepalived 的 persistence_timeout 开启（自定义多长时间访问同一台机器配置项），但是这个也不能完全解决问题，得使用 sieesion 会话保存解决，感兴趣的可自行尝试。同时浏览器会有缓存，导致轮询不正常，我还以为是权重问题，发现自己是 rr 算法(跟nginx搞混了)，要配置成wrr，权重才会生效….然后也出现了很多小问题，比如redhat系列必须关闭 selinux，否则 nginx 无法配置转发，机器重启后还是得 iptables -F 刷一下，我忘记 disable 防火墙，机器重启后导致防火墙自启等等。<del>然后那个后端nginx proxy我临时配的下一跳地址，老是会自动删除，导致 user 访问时无法接收到回包，我一度认为是LVS配置出问题，甚至把 keepalived 删除了，直接使用 ipvsadm 配置……</del>这个 IP 配置建议还是写配置文件。所以很多细节一定要注意，敲多了，可根据实际生产环境写流水线脚本。这个 VPN 和 jumpserver 因为时间问题就先不看了，jumpserver 环境其实很简单，官方文档讲的很清晰(ps:主要是有脚本，真舒服),最后说的就是这个NFS其实是存在较大隐患的，建议采用其他分布式文件系统解决，如 Ceph，HDFS，GlusterFS 等等。然后就是域名访问wordpress访问的时候会出现IP地址，是因为我在初始主机配置的时候填写的IP，这个要注意，如果想是用域名访问，请填写域名。文中的vim请敲 :wq保存文件。</h4><h3 id=\"16-架构总结优缺点\"><a href=\"#16-架构总结优缺点\" class=\"headerlink\" title=\"16. 架构总结优缺点\"></a>16. 架构总结优缺点</h3><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><h4 id=\"1-高可用性：通过-Keepalived-实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\"><a href=\"#1-高可用性：通过-Keepalived-实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\" class=\"headerlink\" title=\"1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。\"></a>1. 高可用性：通过 Keepalived 实现主备切换，提供持续的服务可用性，减少因服务器故障而导致的服务中断时间。</h4><h4 id=\"2-负载均衡：通过-LVS-NAT-和-Nginx-实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\"><a href=\"#2-负载均衡：通过-LVS-NAT-和-Nginx-实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\" class=\"headerlink\" title=\"2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。\"></a>2. 负载均衡：通过 LVS-NAT 和 Nginx 实现负载均衡，合理分配请求负载，提高系统的整体性能和响应能力。</h4><h4 id=\"3-扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\"><a href=\"#3-扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\" class=\"headerlink\" title=\"3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。\"></a>3. 扩展性：通过主从复制和负载均衡的方式，可以方便地扩展服务器数量，增加系统的处理能力和容量。</h4><h4 id=\"4-弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\"><a href=\"#4-弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\" class=\"headerlink\" title=\"4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。\"></a>4. 弹性和容错性：当某个服务器故障时，系统可以自动切换到备份服务器，保证服务的持续可用性。</h4><h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><h4 id=\"1-复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\"><a href=\"#1-复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\" class=\"headerlink\" title=\"1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。\"></a>1. 复杂性：这个架构涉及到多个组件和配置，需要一定的技术知识和经验来正确配置和管理。复杂性可能增加系统的部署和维护的难度。</h4><h4 id=\"2-单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\"><a href=\"#2-单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\" class=\"headerlink\" title=\"2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。\"></a>2. 单点故障：虽然采用了主备切换和负载均衡的方式提高了系统的可用性，但是NFS和mysql始终是一个单点故障，需要值得深思。</h4><h4 id=\"3-数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\"><a href=\"#3-数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\" class=\"headerlink\" title=\"3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。\"></a>3. 数据同步延迟：在主从复制的环境下，从服务器可能存在一定的数据同步延迟，这意味着在主服务器发生故障时，从服务器可能会丢失一部分数据。</h4><h4 id=\"4-配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\"><a href=\"#4-配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\" class=\"headerlink\" title=\"4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。\"></a>4. 配置和管理复杂性：由于涉及多个组件和配置，需要更多的时间和精力来配置、监控和管理整个系统。</h4><h4 id=\"建议：\"><a href=\"#建议：\" class=\"headerlink\" title=\"建议：\"></a>建议：</h4><h4 id=\"1-建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\"><a href=\"#1-建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\" class=\"headerlink\" title=\"1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用\"></a>1. 建议mysql集群采用MHA解决单点故障，再加上mycat或者proxymysql等数据库中间件，更进一步提高高可用</h4><h4 id=\"2-NFS方案可替换\"><a href=\"#2-NFS方案可替换\" class=\"headerlink\" title=\"2. NFS方案可替换\"></a>2. NFS方案可替换</h4><h4 id=\"3-因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\"><a href=\"#3-因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\" class=\"headerlink\" title=\"3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构\"></a>3. 因地制宜，提前规划，根据生产环境实际情况进行符合未来发展的架构</h4><h4 id=\"4-少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus\"><a href=\"#4-少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus\" class=\"headerlink\" title=\"4. 少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus\"></a>4. <del>少个普罗米修斯，缺个深信服，差个存储session的数据库，如果还需要内部仓可使用Nexus</del></h4>"},{"title":"开源仓库管理器Nexus","date":"2023-05-30T13:30:02.000Z","_content":"\n### Nexus介绍\n#### Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\n#### 以下是Nexus的一些主要特点和功能：\n#### 1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\n#### 2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\n#### 3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\n#### 4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\n#### 5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\n#### 6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\n#### 总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\n\n### 注意事项\n#### 1. 内存需要4G以上(其实可修改配置)\n\n### 环境准备\n#### 一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\n\n### 安装jdk\n```bash\nyum install java-1.8.0-openjdk\n```\n### 安装Nexus\n```bash\nwget https://download.sonatype.com/nexus/3/nexus-3.54.1-01-unix.tar.gz\n```\n### 解压Nexus\n```bash\ntar xf nexus-3.54.1-01-unix.tar.gz -C /usr/local/\ncd /usr/local\n```\n### 添加Nexus默认路径\n```bash\nln -s nexus-3.54.1-01 nexus\nln -s nexus/bin/nexus /usr/bin/\n或\necho 'PATH=/usr/local/nexus/bin:$PATH' > /etc/profile.d/nexus.sh\nsource /etc/profile.d/nexus.sh\n```\n### 配置Nexus启动用户\n```bash\nvim /usr/local/nexus/bin/nexus.rc\nrun_as_user=\"root\"\n```\n### 配置Nexus启动端口\n```bash\nvim nexus/etc/nexus-default.properties\n## DO NOT EDIT - CUSTOMIZATIONS BELONG IN $data-dir/etc/nexus.properties\n##\n# Jetty section\napplication-port=8081\napplication-host=0.0.0.0\nnexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-requestlog.xml\nnexus-context-path=/\n\n# Nexus section\nnexus-edition=nexus-pro-edition\nnexus-features=\\\n nexus-pro-feature\n\nnexus.hazelcast.discovery.isEnabled=true\n```\n### 启动Nexus\n```bash\nnexus run\n#前台启动\nnexus start\n#后台启动\nnexus stop\n#停止\nnexus status\n#查看状态\n```\n### 查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页\n```bash\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:          3.5Gi       2.1Gi       856Mi        16Mi       625Mi       1.2Gi\nSwap:            0B          0B          0B\n```\n### 查看端口监听\n```bash\nss -ntpl\n```\n### 创建service文件\n```bash\nvim /lib/systemd/system/nexus.service\n[Unit]\nDescription=nexus service\nAfter=network.target\n[Service]\nType=forking\nLimitNOFILE=65536\nExecStart=/usr/local/nexus/bin/nexus start\nExecStop=/usr/local/nexus/bin/nexus stop\nUser=root\n#User=nexus\nRestart=on-abort\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\nsystemctl status nexus\n#注意，即使前面启动了，这里也会显示没有启动\nnexus stop\nsystemctl enable --now nexus.service\n#配置自启\n```\n### 查看Nexus面板初始密码\n```bash\ncat /usr/local/sonatype-work/nexus3/admin.password\n#第一次登录需要修改密码，同时提示是否开启匿名下载，一般选择还是开启，如果你的仓库不对外又没有特殊要求的话\n```\n### Nexus优化\n#### 默认maven仓是国外，修改至国内\n![修改maven-central默认仓](/images/Nexus优化.png)\n![修改为maven-central为国内源](/images/Nexus优化2.png)\n```\n修改为https://maven.aliyun.com/mvn/guide\n```\n### 修改Maven配置文件指向nexus\n```bash\nvim /etc/maven/settings.xml\n#添加以下内容\n<mirror>\n<id>my-nexus</id>\n<mirrorOf>*</mirrorOf>\n<name>My-Nexus</name>\n<url>http://10.0.0.201:8081/repository/maven-central/</url>\n</mirror>\n```\n### 添加自定义存储目录\n#### names可自定义，路径会自动创建\n![添加自定义存储路径](/images/数据存放目录.png)\n\n\n### 配置apt仓\n#### 这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意\n![配置apt仓](/images/创建apt仓库源.png)\n![复制apt仓库链接](/images/apt-link.png)\n### 在客户机配置\n```bash\ncp  /etc/apt/sources.list ./\nvim /etc/apt/sources.list\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse\n:wq\n```\n### 客户端主机测试\n```bash\napt update\n```\n![可以看到有数据了](/images/测试下载.png)\n### yum源同理，这里就不在过多叙述\n\n#### 小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。\n### 常用Type\n1. Hosted：本地仓库，通常我们会部署自己的构件到这一类型的仓库，比如公司的第三方库\n2. Proxy：代理仓库，它们被用来代理远程的公共仓库，如maven 中央仓库(官方仓库)\n3. Group：仓库组，用来合并多个 hosted/proxy 仓库，当你的项目希望在多个repository 使用资源时就不需要多次引用了，只需要引用一个 group 即可\n### 参考文档\n1. [https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3](https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3)\n2. [https://help.sonatype.com/repomanager3/installation](https://help.sonatype.com/repomanager3/installation)\n3. [https://help.sonatype.com/repomanager3/installation/system-requirements](https://help.sonatype.com/repomanager3/installation/system-requirements)\n","source":"_posts/Nexus.md","raw":"---\ntitle: 开源仓库管理器Nexus\ndate: 2023-05-30 21:30:02\ntags:\n---\n\n### Nexus介绍\n#### Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\n#### 以下是Nexus的一些主要特点和功能：\n#### 1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\n#### 2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\n#### 3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\n#### 4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\n#### 5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\n#### 6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\n#### 总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\n\n### 注意事项\n#### 1. 内存需要4G以上(其实可修改配置)\n\n### 环境准备\n#### 一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\n\n### 安装jdk\n```bash\nyum install java-1.8.0-openjdk\n```\n### 安装Nexus\n```bash\nwget https://download.sonatype.com/nexus/3/nexus-3.54.1-01-unix.tar.gz\n```\n### 解压Nexus\n```bash\ntar xf nexus-3.54.1-01-unix.tar.gz -C /usr/local/\ncd /usr/local\n```\n### 添加Nexus默认路径\n```bash\nln -s nexus-3.54.1-01 nexus\nln -s nexus/bin/nexus /usr/bin/\n或\necho 'PATH=/usr/local/nexus/bin:$PATH' > /etc/profile.d/nexus.sh\nsource /etc/profile.d/nexus.sh\n```\n### 配置Nexus启动用户\n```bash\nvim /usr/local/nexus/bin/nexus.rc\nrun_as_user=\"root\"\n```\n### 配置Nexus启动端口\n```bash\nvim nexus/etc/nexus-default.properties\n## DO NOT EDIT - CUSTOMIZATIONS BELONG IN $data-dir/etc/nexus.properties\n##\n# Jetty section\napplication-port=8081\napplication-host=0.0.0.0\nnexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-requestlog.xml\nnexus-context-path=/\n\n# Nexus section\nnexus-edition=nexus-pro-edition\nnexus-features=\\\n nexus-pro-feature\n\nnexus.hazelcast.discovery.isEnabled=true\n```\n### 启动Nexus\n```bash\nnexus run\n#前台启动\nnexus start\n#后台启动\nnexus stop\n#停止\nnexus status\n#查看状态\n```\n### 查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页\n```bash\nfree -h\n              total        used        free      shared  buff/cache   available\nMem:          3.5Gi       2.1Gi       856Mi        16Mi       625Mi       1.2Gi\nSwap:            0B          0B          0B\n```\n### 查看端口监听\n```bash\nss -ntpl\n```\n### 创建service文件\n```bash\nvim /lib/systemd/system/nexus.service\n[Unit]\nDescription=nexus service\nAfter=network.target\n[Service]\nType=forking\nLimitNOFILE=65536\nExecStart=/usr/local/nexus/bin/nexus start\nExecStop=/usr/local/nexus/bin/nexus stop\nUser=root\n#User=nexus\nRestart=on-abort\n[Install]\nWantedBy=multi-user.target\n\nsystemctl daemon-reload\nsystemctl status nexus\n#注意，即使前面启动了，这里也会显示没有启动\nnexus stop\nsystemctl enable --now nexus.service\n#配置自启\n```\n### 查看Nexus面板初始密码\n```bash\ncat /usr/local/sonatype-work/nexus3/admin.password\n#第一次登录需要修改密码，同时提示是否开启匿名下载，一般选择还是开启，如果你的仓库不对外又没有特殊要求的话\n```\n### Nexus优化\n#### 默认maven仓是国外，修改至国内\n![修改maven-central默认仓](/images/Nexus优化.png)\n![修改为maven-central为国内源](/images/Nexus优化2.png)\n```\n修改为https://maven.aliyun.com/mvn/guide\n```\n### 修改Maven配置文件指向nexus\n```bash\nvim /etc/maven/settings.xml\n#添加以下内容\n<mirror>\n<id>my-nexus</id>\n<mirrorOf>*</mirrorOf>\n<name>My-Nexus</name>\n<url>http://10.0.0.201:8081/repository/maven-central/</url>\n</mirror>\n```\n### 添加自定义存储目录\n#### names可自定义，路径会自动创建\n![添加自定义存储路径](/images/数据存放目录.png)\n\n\n### 配置apt仓\n#### 这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意\n![配置apt仓](/images/创建apt仓库源.png)\n![复制apt仓库链接](/images/apt-link.png)\n### 在客户机配置\n```bash\ncp  /etc/apt/sources.list ./\nvim /etc/apt/sources.list\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse\ndeb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse\ndeb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse\n:wq\n```\n### 客户端主机测试\n```bash\napt update\n```\n![可以看到有数据了](/images/测试下载.png)\n### yum源同理，这里就不在过多叙述\n\n#### 小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。\n### 常用Type\n1. Hosted：本地仓库，通常我们会部署自己的构件到这一类型的仓库，比如公司的第三方库\n2. Proxy：代理仓库，它们被用来代理远程的公共仓库，如maven 中央仓库(官方仓库)\n3. Group：仓库组，用来合并多个 hosted/proxy 仓库，当你的项目希望在多个repository 使用资源时就不需要多次引用了，只需要引用一个 group 即可\n### 参考文档\n1. [https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3](https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3)\n2. [https://help.sonatype.com/repomanager3/installation](https://help.sonatype.com/repomanager3/installation)\n3. [https://help.sonatype.com/repomanager3/installation/system-requirements](https://help.sonatype.com/repomanager3/installation/system-requirements)\n","slug":"Nexus","published":1,"updated":"2023-05-30T13:48:54.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dol00028x8fdbmn81bb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"Nexus介绍\"><a href=\"#Nexus介绍\" class=\"headerlink\" title=\"Nexus介绍\"></a>Nexus介绍</h3><h4 id=\"Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\"><a href=\"#Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\" class=\"headerlink\" title=\"Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\"></a>Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。</h4><h4 id=\"以下是Nexus的一些主要特点和功能：\"><a href=\"#以下是Nexus的一些主要特点和功能：\" class=\"headerlink\" title=\"以下是Nexus的一些主要特点和功能：\"></a>以下是Nexus的一些主要特点和功能：</h4><h4 id=\"1-仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\"><a href=\"#1-仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\" class=\"headerlink\" title=\"1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\"></a>1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。</h4><h4 id=\"2-依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\"><a href=\"#2-依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\" class=\"headerlink\" title=\"2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\"></a>2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。</h4><h4 id=\"3-安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\"><a href=\"#3-安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\" class=\"headerlink\" title=\"3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\"></a>3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。</h4><h4 id=\"4-代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\"><a href=\"#4-代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\" class=\"headerlink\" title=\"4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\"></a>4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。</h4><h4 id=\"5-搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\"><a href=\"#5-搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\" class=\"headerlink\" title=\"5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\"></a>5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。</h4><h4 id=\"6-企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\"><a href=\"#6-企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\" class=\"headerlink\" title=\"6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\"></a>6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。</h4><h4 id=\"总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\"><a href=\"#总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\" class=\"headerlink\" title=\"总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\"></a>总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。</h4><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"1-内存需要4G以上-其实可修改配置\"><a href=\"#1-内存需要4G以上-其实可修改配置\" class=\"headerlink\" title=\"1. 内存需要4G以上(其实可修改配置)\"></a>1. 内存需要4G以上(其实可修改配置)</h4><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\"><a href=\"#一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\" class=\"headerlink\" title=\"一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\"></a>一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库</h4><h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Nexus\"><a href=\"#安装Nexus\" class=\"headerlink\" title=\"安装Nexus\"></a>安装Nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.sonatype.com/nexus/3/nexus-3.54.1-01-unix.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压Nexus\"><a href=\"#解压Nexus\" class=\"headerlink\" title=\"解压Nexus\"></a>解压Nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nexus-3.54.1-01-unix.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加Nexus默认路径\"><a href=\"#添加Nexus默认路径\" class=\"headerlink\" title=\"添加Nexus默认路径\"></a>添加Nexus默认路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s nexus-3.54.1-01 nexus</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s nexus/bin/nexus /usr/bin/</span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/nexus/bin:$PATH&#x27;</span> &gt; /etc/profile.d/nexus.sh</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/nexus.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Nexus启动用户\"><a href=\"#配置Nexus启动用户\" class=\"headerlink\" title=\"配置Nexus启动用户\"></a>配置Nexus启动用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/nexus/bin/nexus.rc</span><br><span class=\"line\">run_as_user=<span class=\"string\">&quot;root&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Nexus启动端口\"><a href=\"#配置Nexus启动端口\" class=\"headerlink\" title=\"配置Nexus启动端口\"></a>配置Nexus启动端口</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nexus/etc/nexus-default.properties</span><br><span class=\"line\"><span class=\"comment\">## DO NOT EDIT - CUSTOMIZATIONS BELONG IN $data-dir/etc/nexus.properties</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># Jetty section</span></span><br><span class=\"line\">application-port=8081</span><br><span class=\"line\">application-host=0.0.0.0</span><br><span class=\"line\">nexus-args=<span class=\"variable\">$&#123;jetty.etc&#125;</span>/jetty.xml,<span class=\"variable\">$&#123;jetty.etc&#125;</span>/jetty-http.xml,<span class=\"variable\">$&#123;jetty.etc&#125;</span>/jetty-requestlog.xml</span><br><span class=\"line\">nexus-context-path=/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nexus section</span></span><br><span class=\"line\">nexus-edition=nexus-pro-edition</span><br><span class=\"line\">nexus-features=\\</span><br><span class=\"line\"> nexus-pro-feature</span><br><span class=\"line\"></span><br><span class=\"line\">nexus.hazelcast.discovery.isEnabled=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动Nexus\"><a href=\"#启动Nexus\" class=\"headerlink\" title=\"启动Nexus\"></a>启动Nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nexus run</span><br><span class=\"line\"><span class=\"comment\">#前台启动</span></span><br><span class=\"line\">nexus start</span><br><span class=\"line\"><span class=\"comment\">#后台启动</span></span><br><span class=\"line\">nexus stop</span><br><span class=\"line\"><span class=\"comment\">#停止</span></span><br><span class=\"line\">nexus status</span><br><span class=\"line\"><span class=\"comment\">#查看状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看内存，这里不贴图了，可以看到使用了2-1G，我还没去打开网页\"><a href=\"#查看内存，这里不贴图了，可以看到使用了2-1G，我还没去打开网页\" class=\"headerlink\" title=\"查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页\"></a>查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -h</span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:          3.5Gi       2.1Gi       856Mi        16Mi       625Mi       1.2Gi</span><br><span class=\"line\">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看端口监听\"><a href=\"#查看端口监听\" class=\"headerlink\" title=\"查看端口监听\"></a>查看端口监听</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -ntpl</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建service文件\"><a href=\"#创建service文件\" class=\"headerlink\" title=\"创建service文件\"></a>创建service文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /lib/systemd/system/nexus.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nexus service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">LimitNOFILE=65536</span><br><span class=\"line\">ExecStart=/usr/local/nexus/bin/nexus start</span><br><span class=\"line\">ExecStop=/usr/local/nexus/bin/nexus stop</span><br><span class=\"line\">User=root</span><br><span class=\"line\"><span class=\"comment\">#User=nexus</span></span><br><span class=\"line\">Restart=on-abort</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl status nexus</span><br><span class=\"line\"><span class=\"comment\">#注意，即使前面启动了，这里也会显示没有启动</span></span><br><span class=\"line\">nexus stop</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now nexus.service</span><br><span class=\"line\"><span class=\"comment\">#配置自启</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看Nexus面板初始密码\"><a href=\"#查看Nexus面板初始密码\" class=\"headerlink\" title=\"查看Nexus面板初始密码\"></a>查看Nexus面板初始密码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /usr/local/sonatype-work/nexus3/admin.password</span><br><span class=\"line\"><span class=\"comment\">#第一次登录需要修改密码，同时提示是否开启匿名下载，一般选择还是开启，如果你的仓库不对外又没有特殊要求的话</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Nexus优化\"><a href=\"#Nexus优化\" class=\"headerlink\" title=\"Nexus优化\"></a>Nexus优化</h3><h4 id=\"默认maven仓是国外，修改至国内\"><a href=\"#默认maven仓是国外，修改至国内\" class=\"headerlink\" title=\"默认maven仓是国外，修改至国内\"></a>默认maven仓是国外，修改至国内</h4><p><img src=\"/images/Nexus%E4%BC%98%E5%8C%96.png\" alt=\"修改maven-central默认仓\"><br><img src=\"/images/Nexus%E4%BC%98%E5%8C%962.png\" alt=\"修改为maven-central为国内源\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改为https://maven.aliyun.com/mvn/guide</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改Maven配置文件指向nexus\"><a href=\"#修改Maven配置文件指向nexus\" class=\"headerlink\" title=\"修改Maven配置文件指向nexus\"></a>修改Maven配置文件指向nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/maven/settings.xml</span><br><span class=\"line\"><span class=\"comment\">#添加以下内容</span></span><br><span class=\"line\">&lt;mirror&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">id</span>&gt;my-nexus&lt;/id&gt;</span><br><span class=\"line\">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">&lt;name&gt;My-Nexus&lt;/name&gt;</span><br><span class=\"line\">&lt;url&gt;http://10.0.0.201:8081/repository/maven-central/&lt;/url&gt;</span><br><span class=\"line\">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加自定义存储目录\"><a href=\"#添加自定义存储目录\" class=\"headerlink\" title=\"添加自定义存储目录\"></a>添加自定义存储目录</h3><h4 id=\"names可自定义，路径会自动创建\"><a href=\"#names可自定义，路径会自动创建\" class=\"headerlink\" title=\"names可自定义，路径会自动创建\"></a>names可自定义，路径会自动创建</h4><p><img src=\"/images/%E6%95%B0%E6%8D%AE%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95.png\" alt=\"添加自定义存储路径\"></p>\n<h3 id=\"配置apt仓\"><a href=\"#配置apt仓\" class=\"headerlink\" title=\"配置apt仓\"></a>配置apt仓</h3><h4 id=\"这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22-04是jammy，请注意\"><a href=\"#这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22-04是jammy，请注意\" class=\"headerlink\" title=\"这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意\"></a>这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意</h4><p><img src=\"/images/%E5%88%9B%E5%BB%BAapt%E4%BB%93%E5%BA%93%E6%BA%90.png\" alt=\"配置apt仓\"><br><img src=\"/images/apt-link.png\" alt=\"复制apt仓库链接\"></p>\n<h3 id=\"在客户机配置\"><a href=\"#在客户机配置\" class=\"headerlink\" title=\"在客户机配置\"></a>在客户机配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span>  /etc/apt/sources.list ./</span><br><span class=\"line\">vim /etc/apt/sources.list</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse</span><br><span class=\"line\">:wq</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端主机测试\"><a href=\"#客户端主机测试\" class=\"headerlink\" title=\"客户端主机测试\"></a>客户端主机测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/%E6%B5%8B%E8%AF%95%E4%B8%8B%E8%BD%BD.png\" alt=\"可以看到有数据了\"></p>\n<h3 id=\"yum源同理，这里就不在过多叙述\"><a href=\"#yum源同理，这里就不在过多叙述\" class=\"headerlink\" title=\"yum源同理，这里就不在过多叙述\"></a>yum源同理，这里就不在过多叙述</h3><h4 id=\"小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus-2，JFrog-Bintray等等，有兴趣的可自行尝试。\"><a href=\"#小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus-2，JFrog-Bintray等等，有兴趣的可自行尝试。\" class=\"headerlink\" title=\"小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。\"></a>小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。</h4><h3 id=\"常用Type\"><a href=\"#常用Type\" class=\"headerlink\" title=\"常用Type\"></a>常用Type</h3><ol>\n<li>Hosted：本地仓库，通常我们会部署自己的构件到这一类型的仓库，比如公司的第三方库</li>\n<li>Proxy：代理仓库，它们被用来代理远程的公共仓库，如maven 中央仓库(官方仓库)</li>\n<li>Group：仓库组，用来合并多个 hosted&#x2F;proxy 仓库，当你的项目希望在多个repository 使用资源时就不需要多次引用了，只需要引用一个 group 即可</li>\n</ol>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ol>\n<li><a href=\"https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3\">https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3</a></li>\n<li><a href=\"https://help.sonatype.com/repomanager3/installation\">https://help.sonatype.com/repomanager3/installation</a></li>\n<li><a href=\"https://help.sonatype.com/repomanager3/installation/system-requirements\">https://help.sonatype.com/repomanager3/installation/system-requirements</a></li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"Nexus介绍\"><a href=\"#Nexus介绍\" class=\"headerlink\" title=\"Nexus介绍\"></a>Nexus介绍</h3><h4 id=\"Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\"><a href=\"#Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\" class=\"headerlink\" title=\"Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。\"></a>Nexus是一个流行的开源仓库管理器，用于管理和发布软件构件（如库、依赖项、插件等）。它提供了一个集中式的仓库，使开发人员可以方便地共享和访问软件构件。</h4><h4 id=\"以下是Nexus的一些主要特点和功能：\"><a href=\"#以下是Nexus的一些主要特点和功能：\" class=\"headerlink\" title=\"以下是Nexus的一些主要特点和功能：\"></a>以下是Nexus的一些主要特点和功能：</h4><h4 id=\"1-仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\"><a href=\"#1-仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\" class=\"headerlink\" title=\"1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。\"></a>1. 仓库管理：Nexus提供了本地仓库和远程仓库的管理功能。您可以配置本地仓库来存储和管理自己的构件，并设置远程仓库来访问外部的公共构件库。</h4><h4 id=\"2-依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\"><a href=\"#2-依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\" class=\"headerlink\" title=\"2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。\"></a>2. 依赖项管理：Nexus可以用作构建工具（如Maven、Gradle等）的依赖项管理器。它能够自动下载和缓存构件，并提供依赖项解析和传递功能，以确保项目的构建过程顺利进行。</h4><h4 id=\"3-安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\"><a href=\"#3-安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\" class=\"headerlink\" title=\"3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。\"></a>3. 安全和权限控制：Nexus支持用户认证和权限管理，您可以设置访问仓库的用户和角色，并对不同的仓库进行细粒度的权限控制。</h4><h4 id=\"4-代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\"><a href=\"#4-代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\" class=\"headerlink\" title=\"4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。\"></a>4. 代理和缓存：Nexus允许您设置远程仓库代理，自动从外部仓库下载构件并缓存到本地仓库中。这可以加快构建过程并减少对外部网络的依赖。</h4><h4 id=\"5-搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\"><a href=\"#5-搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\" class=\"headerlink\" title=\"5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。\"></a>5. 搜索和浏览：Nexus提供了一个直观的用户界面，可以搜索和浏览仓库中的构件。您可以通过关键字、组织、版本等进行搜索，并查看构件的详细信息和元数据。</h4><h4 id=\"6-企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\"><a href=\"#6-企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\" class=\"headerlink\" title=\"6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。\"></a>6. 企业支持：Nexus提供了专业版和企业版，提供了更多高级功能和支持，如高可用性集群、故障转移、安全审计等。</h4><h4 id=\"总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\"><a href=\"#总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\" class=\"headerlink\" title=\"总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。\"></a>总体而言，Nexus是一个强大的仓库管理器，适用于各种软件开发项目，特别是基于Maven或Gradle的项目。它能够提供可靠的构件管理和依赖项解决方案，帮助开发团队更高效地管理和共享软件构件。</h4><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><h4 id=\"1-内存需要4G以上-其实可修改配置\"><a href=\"#1-内存需要4G以上-其实可修改配置\" class=\"headerlink\" title=\"1. 内存需要4G以上(其实可修改配置)\"></a>1. 内存需要4G以上(其实可修改配置)</h4><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\"><a href=\"#一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\" class=\"headerlink\" title=\"一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库\"></a>一台4G内存主机，这里我用的Rocky，一台客户机用来配置仓库</h4><h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Nexus\"><a href=\"#安装Nexus\" class=\"headerlink\" title=\"安装Nexus\"></a>安装Nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.sonatype.com/nexus/3/nexus-3.54.1-01-unix.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压Nexus\"><a href=\"#解压Nexus\" class=\"headerlink\" title=\"解压Nexus\"></a>解压Nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nexus-3.54.1-01-unix.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加Nexus默认路径\"><a href=\"#添加Nexus默认路径\" class=\"headerlink\" title=\"添加Nexus默认路径\"></a>添加Nexus默认路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s nexus-3.54.1-01 nexus</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s nexus/bin/nexus /usr/bin/</span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;PATH=/usr/local/nexus/bin:$PATH&#x27;</span> &gt; /etc/profile.d/nexus.sh</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile.d/nexus.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Nexus启动用户\"><a href=\"#配置Nexus启动用户\" class=\"headerlink\" title=\"配置Nexus启动用户\"></a>配置Nexus启动用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/nexus/bin/nexus.rc</span><br><span class=\"line\">run_as_user=<span class=\"string\">&quot;root&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Nexus启动端口\"><a href=\"#配置Nexus启动端口\" class=\"headerlink\" title=\"配置Nexus启动端口\"></a>配置Nexus启动端口</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim nexus/etc/nexus-default.properties</span><br><span class=\"line\"><span class=\"comment\">## DO NOT EDIT - CUSTOMIZATIONS BELONG IN $data-dir/etc/nexus.properties</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># Jetty section</span></span><br><span class=\"line\">application-port=8081</span><br><span class=\"line\">application-host=0.0.0.0</span><br><span class=\"line\">nexus-args=<span class=\"variable\">$&#123;jetty.etc&#125;</span>/jetty.xml,<span class=\"variable\">$&#123;jetty.etc&#125;</span>/jetty-http.xml,<span class=\"variable\">$&#123;jetty.etc&#125;</span>/jetty-requestlog.xml</span><br><span class=\"line\">nexus-context-path=/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nexus section</span></span><br><span class=\"line\">nexus-edition=nexus-pro-edition</span><br><span class=\"line\">nexus-features=\\</span><br><span class=\"line\"> nexus-pro-feature</span><br><span class=\"line\"></span><br><span class=\"line\">nexus.hazelcast.discovery.isEnabled=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动Nexus\"><a href=\"#启动Nexus\" class=\"headerlink\" title=\"启动Nexus\"></a>启动Nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nexus run</span><br><span class=\"line\"><span class=\"comment\">#前台启动</span></span><br><span class=\"line\">nexus start</span><br><span class=\"line\"><span class=\"comment\">#后台启动</span></span><br><span class=\"line\">nexus stop</span><br><span class=\"line\"><span class=\"comment\">#停止</span></span><br><span class=\"line\">nexus status</span><br><span class=\"line\"><span class=\"comment\">#查看状态</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看内存，这里不贴图了，可以看到使用了2-1G，我还没去打开网页\"><a href=\"#查看内存，这里不贴图了，可以看到使用了2-1G，我还没去打开网页\" class=\"headerlink\" title=\"查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页\"></a>查看内存，这里不贴图了，可以看到使用了2.1G，我还没去打开网页</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -h</span><br><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\">Mem:          3.5Gi       2.1Gi       856Mi        16Mi       625Mi       1.2Gi</span><br><span class=\"line\">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看端口监听\"><a href=\"#查看端口监听\" class=\"headerlink\" title=\"查看端口监听\"></a>查看端口监听</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -ntpl</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建service文件\"><a href=\"#创建service文件\" class=\"headerlink\" title=\"创建service文件\"></a>创建service文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /lib/systemd/system/nexus.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nexus service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">LimitNOFILE=65536</span><br><span class=\"line\">ExecStart=/usr/local/nexus/bin/nexus start</span><br><span class=\"line\">ExecStop=/usr/local/nexus/bin/nexus stop</span><br><span class=\"line\">User=root</span><br><span class=\"line\"><span class=\"comment\">#User=nexus</span></span><br><span class=\"line\">Restart=on-abort</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl status nexus</span><br><span class=\"line\"><span class=\"comment\">#注意，即使前面启动了，这里也会显示没有启动</span></span><br><span class=\"line\">nexus stop</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now nexus.service</span><br><span class=\"line\"><span class=\"comment\">#配置自启</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看Nexus面板初始密码\"><a href=\"#查看Nexus面板初始密码\" class=\"headerlink\" title=\"查看Nexus面板初始密码\"></a>查看Nexus面板初始密码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /usr/local/sonatype-work/nexus3/admin.password</span><br><span class=\"line\"><span class=\"comment\">#第一次登录需要修改密码，同时提示是否开启匿名下载，一般选择还是开启，如果你的仓库不对外又没有特殊要求的话</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Nexus优化\"><a href=\"#Nexus优化\" class=\"headerlink\" title=\"Nexus优化\"></a>Nexus优化</h3><h4 id=\"默认maven仓是国外，修改至国内\"><a href=\"#默认maven仓是国外，修改至国内\" class=\"headerlink\" title=\"默认maven仓是国外，修改至国内\"></a>默认maven仓是国外，修改至国内</h4><p><img src=\"/images/Nexus%E4%BC%98%E5%8C%96.png\" alt=\"修改maven-central默认仓\"><br><img src=\"/images/Nexus%E4%BC%98%E5%8C%962.png\" alt=\"修改为maven-central为国内源\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改为https://maven.aliyun.com/mvn/guide</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改Maven配置文件指向nexus\"><a href=\"#修改Maven配置文件指向nexus\" class=\"headerlink\" title=\"修改Maven配置文件指向nexus\"></a>修改Maven配置文件指向nexus</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/maven/settings.xml</span><br><span class=\"line\"><span class=\"comment\">#添加以下内容</span></span><br><span class=\"line\">&lt;mirror&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">id</span>&gt;my-nexus&lt;/id&gt;</span><br><span class=\"line\">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">&lt;name&gt;My-Nexus&lt;/name&gt;</span><br><span class=\"line\">&lt;url&gt;http://10.0.0.201:8081/repository/maven-central/&lt;/url&gt;</span><br><span class=\"line\">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加自定义存储目录\"><a href=\"#添加自定义存储目录\" class=\"headerlink\" title=\"添加自定义存储目录\"></a>添加自定义存储目录</h3><h4 id=\"names可自定义，路径会自动创建\"><a href=\"#names可自定义，路径会自动创建\" class=\"headerlink\" title=\"names可自定义，路径会自动创建\"></a>names可自定义，路径会自动创建</h4><p><img src=\"/images/%E6%95%B0%E6%8D%AE%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95.png\" alt=\"添加自定义存储路径\"></p>\n<h3 id=\"配置apt仓\"><a href=\"#配置apt仓\" class=\"headerlink\" title=\"配置apt仓\"></a>配置apt仓</h3><h4 id=\"这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22-04是jammy，请注意\"><a href=\"#这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22-04是jammy，请注意\" class=\"headerlink\" title=\"这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意\"></a>这里要注意ubuntu各版本的代号，图里我填的是18版本的Bionic，22.04是jammy，请注意</h4><p><img src=\"/images/%E5%88%9B%E5%BB%BAapt%E4%BB%93%E5%BA%93%E6%BA%90.png\" alt=\"配置apt仓\"><br><img src=\"/images/apt-link.png\" alt=\"复制apt仓库链接\"></p>\n<h3 id=\"在客户机配置\"><a href=\"#在客户机配置\" class=\"headerlink\" title=\"在客户机配置\"></a>在客户机配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span>  /etc/apt/sources.list ./</span><br><span class=\"line\">vim /etc/apt/sources.list</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-security main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://10.0.0.201:8081/repository/ubuntu22.04/ jammy-backports main restricted universe multiverse</span><br><span class=\"line\">:wq</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端主机测试\"><a href=\"#客户端主机测试\" class=\"headerlink\" title=\"客户端主机测试\"></a>客户端主机测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/%E6%B5%8B%E8%AF%95%E4%B8%8B%E8%BD%BD.png\" alt=\"可以看到有数据了\"></p>\n<h3 id=\"yum源同理，这里就不在过多叙述\"><a href=\"#yum源同理，这里就不在过多叙述\" class=\"headerlink\" title=\"yum源同理，这里就不在过多叙述\"></a>yum源同理，这里就不在过多叙述</h3><h4 id=\"小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus-2，JFrog-Bintray等等，有兴趣的可自行尝试。\"><a href=\"#小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus-2，JFrog-Bintray等等，有兴趣的可自行尝试。\" class=\"headerlink\" title=\"小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。\"></a>小结以下：实际上最简单的仓库就是apache和nginx了，我之前文章有写过。但相比之下，nexus可以在图形化界面操作，能够省去不少重复操作，为运维人员分担一定的压力，其实像nexus这样的开源仓库管理服务还有许多，例如Artifactory，Nexus 2，JFrog Bintray等等，有兴趣的可自行尝试。</h4><h3 id=\"常用Type\"><a href=\"#常用Type\" class=\"headerlink\" title=\"常用Type\"></a>常用Type</h3><ol>\n<li>Hosted：本地仓库，通常我们会部署自己的构件到这一类型的仓库，比如公司的第三方库</li>\n<li>Proxy：代理仓库，它们被用来代理远程的公共仓库，如maven 中央仓库(官方仓库)</li>\n<li>Group：仓库组，用来合并多个 hosted&#x2F;proxy 仓库，当你的项目希望在多个repository 使用资源时就不需要多次引用了，只需要引用一个 group 即可</li>\n</ol>\n<h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><ol>\n<li><a href=\"https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3\">https://help.sonatype.com/repomanager3/product-information/download/download-archives---repository-manager-3</a></li>\n<li><a href=\"https://help.sonatype.com/repomanager3/installation\">https://help.sonatype.com/repomanager3/installation</a></li>\n<li><a href=\"https://help.sonatype.com/repomanager3/installation/system-requirements\">https://help.sonatype.com/repomanager3/installation/system-requirements</a></li>\n</ol>\n"},{"title":"简单构建tomcat镜像","date":"2023-06-18T14:57:02.000Z","_content":"\n# 部署准备\n- 安装docker环境\n# 部署步骤\n安装docker环境\n```bash\napt update && sh <(curl -fsSL https://get.docker.com)\n```\n测试\n```bash\ndocker version\n```\n拉取alpine和ubuntu镜像,这里也可以直接拉官方的，我是拉本地仓的\n![pull-images](/images/pull-images.jpg)\n创建目录,先编译基于alpine镜像\n```bash\nmkdir /Dockerfile/web/tomcat/{alpine,ubuntu} -p && cd /Dockerfile/web/tomcat/alpine\n```\n创建dockerfile文件\n```bash\ncat << EOF > dockerfile\nFROM harbor.test.com/tomcat/alpine-tomcat:v1.0\nLABEL autor=\"lee\"\nENV tomcat_version=8.5.90 PATH=/usr/local/tomcat/bin:$PATH\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/'  /etc/apk/repositories \\\n    && apk add --no-cache openjdk8 \\\n    #因为alpine要支持 oracle jdk 需要安装几个库依赖文件，这里就不折腾了\n    && ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \"Asia/Shanghai\" > /etc/timezone \\\n    && addgroup tomcat -g 2023 && adduser -Gtomcat -u 2023 -D tomcat \\\n    && wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-${tomcat_version}.tar.gz \\\n    #这里可使用 ADD 进行添加,我偷个懒...\n    && tar xf /usr/local/apache-tomcat-${tomcat_version}.tar.gz -C /usr/local \\\n    && ln -s /usr/local/apache-tomcat-${tomcat_version} /usr/local/tomcat \\\n    && rm -rf /usr/local/*.tar.gz \\\n    && chown -R tomcat.tomcat /usr/local/apache-tomcat-${tomcat_version}/\nCMD [\"catalina.sh\",\"run\"]\nEXPOSE 8080\nEOF\n```\n接下来执行build，可以看到没有问题,然后执行一下，一个简单的alpine+tomcat就完成了\n![build-images](/images/build-images.jpg)\nweb端查看,可以看到没有问题,接下来试试ubuntu\n![web](/images/web-test.jpg)\n进入目录\n```bash\ncd ../ubuntu\n```\n创建文件\n```bash\ncat << EOF > dockerfile\nFROM harbor.test.com/tomcat/ubuntu-tomcat:v1.0 \nLABEL autor=\"lee\" \nENV tomcat_version=8.5.90 jdk_version=1.8.0_371  PATH=/usr/local/tomcat/bin:$PATH  \\\n    #JAVA_HOME=/usr/local/jdk \\\n    #PATH=${PATH}:${JAVA_HOME}/bin  JRE_HOME=${JAVA_HOME}/jre \\\n    #CLASSPATH=.:${JAVA_HOME}/lib/:${JRE_HOME}/lib/ PATH=/usr/local/tomcat/bin:${PATH}\n    #我在脚本source了，这里我也懒的给变量了\nRUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \\\n    && apt update; export DEBIAN_FRONTEND=noninteractive && apt install -y tzdata wget \\\n    && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo Asia/Shanghai > /etc/timezone \\\n    && groupadd tomcat -g 2023 && useradd tomcat -u 2023 -g tomcat && rm -rf /var/lib/apt/lists/* \\\n    && wget -P /usr/local http://pan.alybaba.top/soft/jdk-${jdk_version}-linux-x64.tar.gz \\\n    #这里下载纯属偷懒，一般下载到构建目录用 ADD 复制进去，自动解压\n    && tar xf /usr/local/jdk-${jdk_version}-linux-x64.tar.gz -C /usr/local \\\n    && ln -s /usr/local/jdk${jdk_version} /usr/local/jdk \\\n    && echo  \"export JAVA_HOME=/usr/local/jdk\\nexport PATH=\\$PATH:\\$JAVA_HOME/bin\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib/:\\$JRE_HOME/lib/\" > /etc/profile.d/jdk.sh  \\\n    && wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-${tomcat_version}.tar.gz \\\n    && tar xf /usr/local/apache-tomcat-${tomcat_version}.tar.gz -C /usr/local \\\n    && ln -s /usr/local/apache-tomcat-${tomcat_version} /usr/local/tomcat && apt autoremove -y  wget \\\n    && echo 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh  && rm -rf /usr/local/*.tar.gz \\\n    && chown -R tomcat.tomcat /usr/local/tomcat  && echo   'JAVA_HOME=/usr/local/jdk' >  /usr/local/tomcat/conf/tomcat.conf\nCOPY entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nEXPOSE 8080\nEOF\n```\n创建entrypoint脚本.........\n```bash\ncat << EOF entrypoint.sh\n#!/bin/bash\n. /etc/profile.d/jdk.sh\n#tomcat的变量我写进去了....\nsleep 1\ncatalina.sh run\nEOF\n```\n构建镜像\n```bash\nchmod +x entrypoint  && docker build -t ubuntu-tomcat:v1.0.1 .\n```\n可以看到很大....\n![build-images](/images/build-images-2.jpg)\n那我们来访问试试，没问题。那么到这里就简单完成了docker镜像构建\n![web-test-2](/images/web-test-2.jpg)\n\n# 参考资料\n- dockerfile 官方说明: [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)\n","source":"_posts/docker-simple-build.md","raw":"---\ntitle: 简单构建tomcat镜像\ndate: 2023-06-18 22:57:02\ntags:\n---\n\n# 部署准备\n- 安装docker环境\n# 部署步骤\n安装docker环境\n```bash\napt update && sh <(curl -fsSL https://get.docker.com)\n```\n测试\n```bash\ndocker version\n```\n拉取alpine和ubuntu镜像,这里也可以直接拉官方的，我是拉本地仓的\n![pull-images](/images/pull-images.jpg)\n创建目录,先编译基于alpine镜像\n```bash\nmkdir /Dockerfile/web/tomcat/{alpine,ubuntu} -p && cd /Dockerfile/web/tomcat/alpine\n```\n创建dockerfile文件\n```bash\ncat << EOF > dockerfile\nFROM harbor.test.com/tomcat/alpine-tomcat:v1.0\nLABEL autor=\"lee\"\nENV tomcat_version=8.5.90 PATH=/usr/local/tomcat/bin:$PATH\nRUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/'  /etc/apk/repositories \\\n    && apk add --no-cache openjdk8 \\\n    #因为alpine要支持 oracle jdk 需要安装几个库依赖文件，这里就不折腾了\n    && ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \"Asia/Shanghai\" > /etc/timezone \\\n    && addgroup tomcat -g 2023 && adduser -Gtomcat -u 2023 -D tomcat \\\n    && wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-${tomcat_version}.tar.gz \\\n    #这里可使用 ADD 进行添加,我偷个懒...\n    && tar xf /usr/local/apache-tomcat-${tomcat_version}.tar.gz -C /usr/local \\\n    && ln -s /usr/local/apache-tomcat-${tomcat_version} /usr/local/tomcat \\\n    && rm -rf /usr/local/*.tar.gz \\\n    && chown -R tomcat.tomcat /usr/local/apache-tomcat-${tomcat_version}/\nCMD [\"catalina.sh\",\"run\"]\nEXPOSE 8080\nEOF\n```\n接下来执行build，可以看到没有问题,然后执行一下，一个简单的alpine+tomcat就完成了\n![build-images](/images/build-images.jpg)\nweb端查看,可以看到没有问题,接下来试试ubuntu\n![web](/images/web-test.jpg)\n进入目录\n```bash\ncd ../ubuntu\n```\n创建文件\n```bash\ncat << EOF > dockerfile\nFROM harbor.test.com/tomcat/ubuntu-tomcat:v1.0 \nLABEL autor=\"lee\" \nENV tomcat_version=8.5.90 jdk_version=1.8.0_371  PATH=/usr/local/tomcat/bin:$PATH  \\\n    #JAVA_HOME=/usr/local/jdk \\\n    #PATH=${PATH}:${JAVA_HOME}/bin  JRE_HOME=${JAVA_HOME}/jre \\\n    #CLASSPATH=.:${JAVA_HOME}/lib/:${JRE_HOME}/lib/ PATH=/usr/local/tomcat/bin:${PATH}\n    #我在脚本source了，这里我也懒的给变量了\nRUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list \\\n    && apt update; export DEBIAN_FRONTEND=noninteractive && apt install -y tzdata wget \\\n    && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo Asia/Shanghai > /etc/timezone \\\n    && groupadd tomcat -g 2023 && useradd tomcat -u 2023 -g tomcat && rm -rf /var/lib/apt/lists/* \\\n    && wget -P /usr/local http://pan.alybaba.top/soft/jdk-${jdk_version}-linux-x64.tar.gz \\\n    #这里下载纯属偷懒，一般下载到构建目录用 ADD 复制进去，自动解压\n    && tar xf /usr/local/jdk-${jdk_version}-linux-x64.tar.gz -C /usr/local \\\n    && ln -s /usr/local/jdk${jdk_version} /usr/local/jdk \\\n    && echo  \"export JAVA_HOME=/usr/local/jdk\\nexport PATH=\\$PATH:\\$JAVA_HOME/bin\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib/:\\$JRE_HOME/lib/\" > /etc/profile.d/jdk.sh  \\\n    && wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-${tomcat_version}.tar.gz \\\n    && tar xf /usr/local/apache-tomcat-${tomcat_version}.tar.gz -C /usr/local \\\n    && ln -s /usr/local/apache-tomcat-${tomcat_version} /usr/local/tomcat && apt autoremove -y  wget \\\n    && echo 'PATH=/usr/local/tomcat/bin:$PATH' > /etc/profile.d/tomcat.sh  && rm -rf /usr/local/*.tar.gz \\\n    && chown -R tomcat.tomcat /usr/local/tomcat  && echo   'JAVA_HOME=/usr/local/jdk' >  /usr/local/tomcat/conf/tomcat.conf\nCOPY entrypoint.sh /\nENTRYPOINT [\"/entrypoint.sh\"]\nEXPOSE 8080\nEOF\n```\n创建entrypoint脚本.........\n```bash\ncat << EOF entrypoint.sh\n#!/bin/bash\n. /etc/profile.d/jdk.sh\n#tomcat的变量我写进去了....\nsleep 1\ncatalina.sh run\nEOF\n```\n构建镜像\n```bash\nchmod +x entrypoint  && docker build -t ubuntu-tomcat:v1.0.1 .\n```\n可以看到很大....\n![build-images](/images/build-images-2.jpg)\n那我们来访问试试，没问题。那么到这里就简单完成了docker镜像构建\n![web-test-2](/images/web-test-2.jpg)\n\n# 参考资料\n- dockerfile 官方说明: [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)\n","slug":"docker-simple-build","published":1,"updated":"2023-06-18T15:45:03.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dom00038x8f7rvdd3uq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h1><ul>\n<li>安装docker环境</li>\n</ul>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>安装docker环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p>拉取alpine和ubuntu镜像,这里也可以直接拉官方的，我是拉本地仓的<br><img src=\"/images/pull-images.jpg\" alt=\"pull-images\"><br>创建目录,先编译基于alpine镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /Dockerfile/web/tomcat/&#123;alpine,ubuntu&#125; -p &amp;&amp; <span class=\"built_in\">cd</span> /Dockerfile/web/tomcat/alpine</span><br></pre></td></tr></table></figure>\n<p>创建dockerfile文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; dockerfile</span></span><br><span class=\"line\"><span class=\"string\">FROM harbor.test.com/tomcat/alpine-tomcat:v1.0</span></span><br><span class=\"line\"><span class=\"string\">LABEL autor=&quot;lee&quot;</span></span><br><span class=\"line\"><span class=\"string\">ENV tomcat_version=8.5.90 PATH=/usr/local/tomcat/bin:$PATH</span></span><br><span class=\"line\"><span class=\"string\">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/&#x27;  /etc/apk/repositories \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; apk add --no-cache openjdk8 \\</span></span><br><span class=\"line\"><span class=\"string\">    #因为alpine要支持 oracle jdk 需要安装几个库依赖文件，这里就不折腾了</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; addgroup tomcat -g 2023 &amp;&amp; adduser -Gtomcat -u 2023 -D tomcat \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    #这里可使用 ADD 进行添加,我偷个懒...</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; tar xf /usr/local/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz -C /usr/local \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/local/apache-tomcat-$&#123;tomcat_version&#125; /usr/local/tomcat \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; rm -rf /usr/local/*.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; chown -R tomcat.tomcat /usr/local/apache-tomcat-$&#123;tomcat_version&#125;/</span></span><br><span class=\"line\"><span class=\"string\">CMD [&quot;catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>接下来执行build，可以看到没有问题,然后执行一下，一个简单的alpine+tomcat就完成了<br><img src=\"/images/build-images.jpg\" alt=\"build-images\"><br>web端查看,可以看到没有问题,接下来试试ubuntu<br><img src=\"/images/web-test.jpg\" alt=\"web\"><br>进入目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../ubuntu</span><br></pre></td></tr></table></figure>\n<p>创建文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; dockerfile</span></span><br><span class=\"line\"><span class=\"string\">FROM harbor.test.com/tomcat/ubuntu-tomcat:v1.0 </span></span><br><span class=\"line\"><span class=\"string\">LABEL autor=&quot;lee&quot; </span></span><br><span class=\"line\"><span class=\"string\">ENV tomcat_version=8.5.90 jdk_version=1.8.0_371  PATH=/usr/local/tomcat/bin:$PATH  \\</span></span><br><span class=\"line\"><span class=\"string\">    #JAVA_HOME=/usr/local/jdk \\</span></span><br><span class=\"line\"><span class=\"string\">    #PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin  JRE_HOME=$&#123;JAVA_HOME&#125;/jre \\</span></span><br><span class=\"line\"><span class=\"string\">    #CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/:$&#123;JRE_HOME&#125;/lib/ PATH=/usr/local/tomcat/bin:$&#123;PATH&#125;</span></span><br><span class=\"line\"><span class=\"string\">    #我在脚本source了，这里我也懒的给变量了</span></span><br><span class=\"line\"><span class=\"string\">RUN sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; apt update; export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt install -y tzdata wget \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo Asia/Shanghai &gt; /etc/timezone \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; groupadd tomcat -g 2023 &amp;&amp; useradd tomcat -u 2023 -g tomcat &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/jdk-$&#123;jdk_version&#125;-linux-x64.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    #这里下载纯属偷懒，一般下载到构建目录用 ADD 复制进去，自动解压</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; tar xf /usr/local/jdk-$&#123;jdk_version&#125;-linux-x64.tar.gz -C /usr/local \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/local/jdk$&#123;jdk_version&#125; /usr/local/jdk \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; echo  &quot;export JAVA_HOME=/usr/local/jdk\\nexport PATH=\\$PATH:\\$JAVA_HOME/bin\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib/:\\$JRE_HOME/lib/&quot; &gt; /etc/profile.d/jdk.sh  \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; tar xf /usr/local/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz -C /usr/local \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/local/apache-tomcat-$&#123;tomcat_version&#125; /usr/local/tomcat &amp;&amp; apt autoremove -y  wget \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; echo &#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27; &gt; /etc/profile.d/tomcat.sh  &amp;&amp; rm -rf /usr/local/*.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; chown -R tomcat.tomcat /usr/local/tomcat  &amp;&amp; echo   &#x27;JAVA_HOME=/usr/local/jdk&#x27; &gt;  /usr/local/tomcat/conf/tomcat.conf</span></span><br><span class=\"line\"><span class=\"string\">COPY entrypoint.sh /</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT [&quot;/entrypoint.sh&quot;]</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>创建entrypoint脚本………</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF entrypoint.sh</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">. /etc/profile.d/jdk.sh</span></span><br><span class=\"line\"><span class=\"string\">#tomcat的变量我写进去了....</span></span><br><span class=\"line\"><span class=\"string\">sleep 1</span></span><br><span class=\"line\"><span class=\"string\">catalina.sh run</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x entrypoint  &amp;&amp; docker build -t ubuntu-tomcat:v1.0.1 .</span><br></pre></td></tr></table></figure>\n<p>可以看到很大….<br><img src=\"/images/build-images-2.jpg\" alt=\"build-images\"><br>那我们来访问试试，没问题。那么到这里就简单完成了docker镜像构建<br><img src=\"/images/web-test-2.jpg\" alt=\"web-test-2\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>dockerfile 官方说明: <a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h1><ul>\n<li>安装docker环境</li>\n</ul>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>安装docker环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p>拉取alpine和ubuntu镜像,这里也可以直接拉官方的，我是拉本地仓的<br><img src=\"/images/pull-images.jpg\" alt=\"pull-images\"><br>创建目录,先编译基于alpine镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /Dockerfile/web/tomcat/&#123;alpine,ubuntu&#125; -p &amp;&amp; <span class=\"built_in\">cd</span> /Dockerfile/web/tomcat/alpine</span><br></pre></td></tr></table></figure>\n<p>创建dockerfile文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; dockerfile</span></span><br><span class=\"line\"><span class=\"string\">FROM harbor.test.com/tomcat/alpine-tomcat:v1.0</span></span><br><span class=\"line\"><span class=\"string\">LABEL autor=&quot;lee&quot;</span></span><br><span class=\"line\"><span class=\"string\">ENV tomcat_version=8.5.90 PATH=/usr/local/tomcat/bin:$PATH</span></span><br><span class=\"line\"><span class=\"string\">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/&#x27;  /etc/apk/repositories \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; apk add --no-cache openjdk8 \\</span></span><br><span class=\"line\"><span class=\"string\">    #因为alpine要支持 oracle jdk 需要安装几个库依赖文件，这里就不折腾了</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; addgroup tomcat -g 2023 &amp;&amp; adduser -Gtomcat -u 2023 -D tomcat \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    #这里可使用 ADD 进行添加,我偷个懒...</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; tar xf /usr/local/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz -C /usr/local \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/local/apache-tomcat-$&#123;tomcat_version&#125; /usr/local/tomcat \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; rm -rf /usr/local/*.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; chown -R tomcat.tomcat /usr/local/apache-tomcat-$&#123;tomcat_version&#125;/</span></span><br><span class=\"line\"><span class=\"string\">CMD [&quot;catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>接下来执行build，可以看到没有问题,然后执行一下，一个简单的alpine+tomcat就完成了<br><img src=\"/images/build-images.jpg\" alt=\"build-images\"><br>web端查看,可以看到没有问题,接下来试试ubuntu<br><img src=\"/images/web-test.jpg\" alt=\"web\"><br>进入目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ../ubuntu</span><br></pre></td></tr></table></figure>\n<p>创建文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; dockerfile</span></span><br><span class=\"line\"><span class=\"string\">FROM harbor.test.com/tomcat/ubuntu-tomcat:v1.0 </span></span><br><span class=\"line\"><span class=\"string\">LABEL autor=&quot;lee&quot; </span></span><br><span class=\"line\"><span class=\"string\">ENV tomcat_version=8.5.90 jdk_version=1.8.0_371  PATH=/usr/local/tomcat/bin:$PATH  \\</span></span><br><span class=\"line\"><span class=\"string\">    #JAVA_HOME=/usr/local/jdk \\</span></span><br><span class=\"line\"><span class=\"string\">    #PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin  JRE_HOME=$&#123;JAVA_HOME&#125;/jre \\</span></span><br><span class=\"line\"><span class=\"string\">    #CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/:$&#123;JRE_HOME&#125;/lib/ PATH=/usr/local/tomcat/bin:$&#123;PATH&#125;</span></span><br><span class=\"line\"><span class=\"string\">    #我在脚本source了，这里我也懒的给变量了</span></span><br><span class=\"line\"><span class=\"string\">RUN sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; apt update; export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt install -y tzdata wget \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo Asia/Shanghai &gt; /etc/timezone \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; groupadd tomcat -g 2023 &amp;&amp; useradd tomcat -u 2023 -g tomcat &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/jdk-$&#123;jdk_version&#125;-linux-x64.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    #这里下载纯属偷懒，一般下载到构建目录用 ADD 复制进去，自动解压</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; tar xf /usr/local/jdk-$&#123;jdk_version&#125;-linux-x64.tar.gz -C /usr/local \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/local/jdk$&#123;jdk_version&#125; /usr/local/jdk \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; echo  &quot;export JAVA_HOME=/usr/local/jdk\\nexport PATH=\\$PATH:\\$JAVA_HOME/bin\\nexport JRE_HOME=\\$JAVA_HOME/jre\\nexport CLASSPATH=.:\\$JAVA_HOME/lib/:\\$JRE_HOME/lib/&quot; &gt; /etc/profile.d/jdk.sh  \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; wget -P /usr/local http://pan.alybaba.top/soft/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; tar xf /usr/local/apache-tomcat-$&#123;tomcat_version&#125;.tar.gz -C /usr/local \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; ln -s /usr/local/apache-tomcat-$&#123;tomcat_version&#125; /usr/local/tomcat &amp;&amp; apt autoremove -y  wget \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; echo &#x27;PATH=/usr/local/tomcat/bin:$PATH&#x27; &gt; /etc/profile.d/tomcat.sh  &amp;&amp; rm -rf /usr/local/*.tar.gz \\</span></span><br><span class=\"line\"><span class=\"string\">    &amp;&amp; chown -R tomcat.tomcat /usr/local/tomcat  &amp;&amp; echo   &#x27;JAVA_HOME=/usr/local/jdk&#x27; &gt;  /usr/local/tomcat/conf/tomcat.conf</span></span><br><span class=\"line\"><span class=\"string\">COPY entrypoint.sh /</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT [&quot;/entrypoint.sh&quot;]</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE 8080</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>创建entrypoint脚本………</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF entrypoint.sh</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">. /etc/profile.d/jdk.sh</span></span><br><span class=\"line\"><span class=\"string\">#tomcat的变量我写进去了....</span></span><br><span class=\"line\"><span class=\"string\">sleep 1</span></span><br><span class=\"line\"><span class=\"string\">catalina.sh run</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x entrypoint  &amp;&amp; docker build -t ubuntu-tomcat:v1.0.1 .</span><br></pre></td></tr></table></figure>\n<p>可以看到很大….<br><img src=\"/images/build-images-2.jpg\" alt=\"build-images\"><br>那我们来访问试试，没问题。那么到这里就简单完成了docker镜像构建<br><img src=\"/images/web-test-2.jpg\" alt=\"web-test-2\"></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>dockerfile 官方说明: <a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></li>\n</ul>\n"},{"title":"原来如此...","date":"2023-06-28T08:48:42.000Z","_content":"~~防火墙问题,我裂开...~~\n<hr />\n\n![](/images/h3-check.jpg)\n<hr />\n\n![](/images/h3.jpg)\n","source":"_posts/h3.md","raw":"---\ntitle: 原来如此...\ndate: 2023-06-28 16:48:42\ntags:\n---\n~~防火墙问题,我裂开...~~\n<hr />\n\n![](/images/h3-check.jpg)\n<hr />\n\n![](/images/h3.jpg)\n","slug":"h3","published":1,"updated":"2023-06-28T10:15:10.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5don00048x8f320n5v9f","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><del>防火墙问题,我裂开…</del></p>\n<hr />\n\n<p><img src=\"/images/h3-check.jpg\"></p>\n<hr />\n\n<p><img src=\"/images/h3.jpg\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p><del>防火墙问题,我裂开…</del></p>\n<hr />\n\n<p><img src=\"/images/h3-check.jpg\"></p>\n<hr />\n\n<p><img src=\"/images/h3.jpg\"></p>\n"},{"title":"编译安装haproxy","date":"2023-06-26T12:30:02.000Z","_content":"源安装\n```bash\napt install software-properties-common\n#软件源管理工具\n```\n添加 haproxy source 源文件\n```bash\nadd-apt-repository ppa:vbernat/haproxy-2.0\n#添加haproxy源，，红帽系列好像不被官方支持...但是源仓库是有的，版本低\n```\n更新一下源\n```bash\napt update\n```\n查看选择需要安装的版本\n```bash\napt-cache madison haproxy\n```\n安装\n```bash\napt -y install haproxy=2.8.\\*\n```\n`编译安装`\n安装编译相关工具和依赖\n```bash\napt -y install gcc make libssl-dev libpcre3  libpcre3-dev zlib1g-dev libreadline-dev libsystemd-dev liblua5.4-dev\n```\n下载源码包\n```bash\nwget http://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz\n```\n解压\n```bash\ntar xf haproxy-2.8.0.tar.gz && cd haproxy-2.8.0\n```\n构建编译的参数\n```bash\nmake ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_PROMEX=1 USE_LUA=1\n```\n安装到指定目录\n```bash\nmake install PREFIX=/apps/haproxy\n```\n创建软链接，也就是添加可执行路径\n```bash\nln -s /apps/haproxy/sbin/haproxy /usr/local/sbin/\n```\n参考配置文件\n```bash\nglobal\n    chroot /apps/haproxy   改变根目录\n    deamon                 后台运行\n    mode tcp | http        转发类型 \n    stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin  proxess 1    这是socket文件,可用通过命令向该文件执行命令\n    user  gid | username\n    group uid | groupname 指定用户和组\n    nbproc n   该命令和nginx相似，开启n个进程，不过从2.5以后被弃用\n    nbthread n  指定每个进程开启的线程，默认为1，同时两者同时开启会报错，Centos8的1.8无此问题\n    cpu-map 1 0\n    cpu-map 2 1  亲缘性，CPU绑定进程，进程从1开始，cpu从0开始\n    cpu-map auto:1/1-8 0-7   自动绑定，每个进程的1-8个线程分别绑定0-7号cpu。haproxy2.4中为nbthreads\n    #查看cpu绑定 ps axo pid,cmd,psr -L | grep haproxy\n    #或者安装sysstat,pidstat -p  haproxy-pid -t \n    maxconn n       每个进程的最大连接数为n\n    maxsslconn n    每个进程的ssl最大连接数为n\n    maxconnrate n   每个进程每秒能创建的最多连接数为n\n    spread-checks n 后端server状态检查，建议为2-5，默认为0\n    pidfile   /some/path/haproxy.pid  PID文件路径\n    log 127.0.0.1 local2 info   日志发送到本机，默认为514 udp端口\n    log x.x.x.x local2 info     定义log，和rsyslog配合使用，local3为名称，info为日志等级，需要开启UDP，最多可以定义两个\n        日志配置\n        vim /etc/rsyslog.conf\n        module(load=\"imudp\")\n        input(type=\"imudp\" port=\"514\")\n\n        echo  local2.* /var/log/haproxy.log 或 local2.info  /var/log/haproxy.log > /etc/rsyslog.d/50-default.conf\n        systemctl restart rsyslog\ndefaults\n    option redispatch                   重定向其他正常服务器\n    option abortonclose                 自动结束连接时长较久的连接             \n    option http-keep-alive              开启与客户端的会话保持\n    option forwardfor                   透传真实IP至后端服务器,可自定义修改\n    mode http | tcp                     默认工作类型\n    timeout http-keep-alive             会话保持时间\n    timeout connect 120s                客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)默认单位 ms\n    timeout server 600s                 客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，超时502\n    timeout client 600s                 设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同\n    timeout check 5s                    对后端服务器的默认检测超时时间\n    default-server inter 1000 weight 3  指定后端服务器的默认设置\n\n前后端整合\nlisten nginx                            使用listen替换 frontend和backend的配置方式，可以简化设置，常用于TCP协议的应用       \n        bind 公网IP:端口\n        mode tcp | http\n        server web1 后端IP:port\n        server web2 后端IP:port\n\n\n前端服务器\nfrontend  nginx\n    bind 公网IP：端口\n    use_backend real-nginx\n\n后端服务器                                                                                 \nbackend  real-nginx \n    redirect prefix http://www.baidu.com/                    全局重定向，只适合http\n    server web1 后端IP:port check inter 5000 fail 3 rise 3   每5秒检查一次，如果3次不通就挂，上线同理\n    server web2 后端IP:port weight 3                         权重\n    server web2 后端IP:port check backup                     备份服务器，可当sorry server\n        server后字段\n            check \n                addr <IP> 可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量\n                port <num> 指定的健康状态监测端口\n                inter <num> 健康状态检查间隔时间，默认2000 ms\n                fall <num> 后端服务器从线上转为线下的检查的连续失效次数，默认为3\n                rise <num> 后端服务器从下线恢复上线的检查的连续有效次数，默认为2\n            disable 关闭服务器\n            maxconn 后端服务器最大连接数\n            redir http://x.x.x  局部302临时重定向到某url，只适合http\n\nlisten mysql\n        bind 0.0.0.0:3306           haproxy端口\n        mode tcp                    如果不指定tcp，会以http进行连接\n        server data1 x.x.x.x:3306   后端数据库地址和端口\n\nlisten stats\n        mode http\n        bind 0.0.0.0:9999\n        stats enable\n        log global                  开启日志，默认不开启\n        stats uri /haproxy-status   访问后缀\n        stats auth admin:123456     开启认证\n        stats refresh 5             自动刷新，这里是每5s\n        stats admin if TURE         如果是admin就允许访问stats页面\n```\n检查配置文件\n```bash\nhaproxy -c -f /etc/haproxy/haproxy.cfg\n```\n创建用户\n```bash\nuseradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy\n#如果没创建用户和组的话\n```\n创建damon.service文件\n```bash\ncat << EOF > /usr/lib/systemd/system/haproxy.service\n[Unit]\nDescription=HAProxy Load Balancer\nAfter=syslog.target network.target\n[Service]\nExecStartPre=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -c -q\n#-f可指定文件，也可指定目录，目录一般存放子配置文件\nExecStart=/usr/local/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -p  /var/lib/haproxy/haproxy.pid\nExecReload=/bin/kill -USR2 $MAINPID\nLimitNOFILE=100000\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n```bash\nsystemctl daemon-reload && systemctl start haproxy\n```\nweb端访问 http://ip:9999/haproxy-status\n\n官方配置手册 http://docs.haproxy.org/2.8/configuration.html\n","source":"_posts/haproxy.md","raw":"---\ntitle: 编译安装haproxy\ndate: 2023-06-26 20:30:02\ntags:\n---\n源安装\n```bash\napt install software-properties-common\n#软件源管理工具\n```\n添加 haproxy source 源文件\n```bash\nadd-apt-repository ppa:vbernat/haproxy-2.0\n#添加haproxy源，，红帽系列好像不被官方支持...但是源仓库是有的，版本低\n```\n更新一下源\n```bash\napt update\n```\n查看选择需要安装的版本\n```bash\napt-cache madison haproxy\n```\n安装\n```bash\napt -y install haproxy=2.8.\\*\n```\n`编译安装`\n安装编译相关工具和依赖\n```bash\napt -y install gcc make libssl-dev libpcre3  libpcre3-dev zlib1g-dev libreadline-dev libsystemd-dev liblua5.4-dev\n```\n下载源码包\n```bash\nwget http://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz\n```\n解压\n```bash\ntar xf haproxy-2.8.0.tar.gz && cd haproxy-2.8.0\n```\n构建编译的参数\n```bash\nmake ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_PROMEX=1 USE_LUA=1\n```\n安装到指定目录\n```bash\nmake install PREFIX=/apps/haproxy\n```\n创建软链接，也就是添加可执行路径\n```bash\nln -s /apps/haproxy/sbin/haproxy /usr/local/sbin/\n```\n参考配置文件\n```bash\nglobal\n    chroot /apps/haproxy   改变根目录\n    deamon                 后台运行\n    mode tcp | http        转发类型 \n    stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin  proxess 1    这是socket文件,可用通过命令向该文件执行命令\n    user  gid | username\n    group uid | groupname 指定用户和组\n    nbproc n   该命令和nginx相似，开启n个进程，不过从2.5以后被弃用\n    nbthread n  指定每个进程开启的线程，默认为1，同时两者同时开启会报错，Centos8的1.8无此问题\n    cpu-map 1 0\n    cpu-map 2 1  亲缘性，CPU绑定进程，进程从1开始，cpu从0开始\n    cpu-map auto:1/1-8 0-7   自动绑定，每个进程的1-8个线程分别绑定0-7号cpu。haproxy2.4中为nbthreads\n    #查看cpu绑定 ps axo pid,cmd,psr -L | grep haproxy\n    #或者安装sysstat,pidstat -p  haproxy-pid -t \n    maxconn n       每个进程的最大连接数为n\n    maxsslconn n    每个进程的ssl最大连接数为n\n    maxconnrate n   每个进程每秒能创建的最多连接数为n\n    spread-checks n 后端server状态检查，建议为2-5，默认为0\n    pidfile   /some/path/haproxy.pid  PID文件路径\n    log 127.0.0.1 local2 info   日志发送到本机，默认为514 udp端口\n    log x.x.x.x local2 info     定义log，和rsyslog配合使用，local3为名称，info为日志等级，需要开启UDP，最多可以定义两个\n        日志配置\n        vim /etc/rsyslog.conf\n        module(load=\"imudp\")\n        input(type=\"imudp\" port=\"514\")\n\n        echo  local2.* /var/log/haproxy.log 或 local2.info  /var/log/haproxy.log > /etc/rsyslog.d/50-default.conf\n        systemctl restart rsyslog\ndefaults\n    option redispatch                   重定向其他正常服务器\n    option abortonclose                 自动结束连接时长较久的连接             \n    option http-keep-alive              开启与客户端的会话保持\n    option forwardfor                   透传真实IP至后端服务器,可自定义修改\n    mode http | tcp                     默认工作类型\n    timeout http-keep-alive             会话保持时间\n    timeout connect 120s                客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)默认单位 ms\n    timeout server 600s                 客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，超时502\n    timeout client 600s                 设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同\n    timeout check 5s                    对后端服务器的默认检测超时时间\n    default-server inter 1000 weight 3  指定后端服务器的默认设置\n\n前后端整合\nlisten nginx                            使用listen替换 frontend和backend的配置方式，可以简化设置，常用于TCP协议的应用       \n        bind 公网IP:端口\n        mode tcp | http\n        server web1 后端IP:port\n        server web2 后端IP:port\n\n\n前端服务器\nfrontend  nginx\n    bind 公网IP：端口\n    use_backend real-nginx\n\n后端服务器                                                                                 \nbackend  real-nginx \n    redirect prefix http://www.baidu.com/                    全局重定向，只适合http\n    server web1 后端IP:port check inter 5000 fail 3 rise 3   每5秒检查一次，如果3次不通就挂，上线同理\n    server web2 后端IP:port weight 3                         权重\n    server web2 后端IP:port check backup                     备份服务器，可当sorry server\n        server后字段\n            check \n                addr <IP> 可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量\n                port <num> 指定的健康状态监测端口\n                inter <num> 健康状态检查间隔时间，默认2000 ms\n                fall <num> 后端服务器从线上转为线下的检查的连续失效次数，默认为3\n                rise <num> 后端服务器从下线恢复上线的检查的连续有效次数，默认为2\n            disable 关闭服务器\n            maxconn 后端服务器最大连接数\n            redir http://x.x.x  局部302临时重定向到某url，只适合http\n\nlisten mysql\n        bind 0.0.0.0:3306           haproxy端口\n        mode tcp                    如果不指定tcp，会以http进行连接\n        server data1 x.x.x.x:3306   后端数据库地址和端口\n\nlisten stats\n        mode http\n        bind 0.0.0.0:9999\n        stats enable\n        log global                  开启日志，默认不开启\n        stats uri /haproxy-status   访问后缀\n        stats auth admin:123456     开启认证\n        stats refresh 5             自动刷新，这里是每5s\n        stats admin if TURE         如果是admin就允许访问stats页面\n```\n检查配置文件\n```bash\nhaproxy -c -f /etc/haproxy/haproxy.cfg\n```\n创建用户\n```bash\nuseradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy\n#如果没创建用户和组的话\n```\n创建damon.service文件\n```bash\ncat << EOF > /usr/lib/systemd/system/haproxy.service\n[Unit]\nDescription=HAProxy Load Balancer\nAfter=syslog.target network.target\n[Service]\nExecStartPre=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -c -q\n#-f可指定文件，也可指定目录，目录一般存放子配置文件\nExecStart=/usr/local/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -p  /var/lib/haproxy/haproxy.pid\nExecReload=/bin/kill -USR2 $MAINPID\nLimitNOFILE=100000\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n```bash\nsystemctl daemon-reload && systemctl start haproxy\n```\nweb端访问 http://ip:9999/haproxy-status\n\n官方配置手册 http://docs.haproxy.org/2.8/configuration.html\n","slug":"haproxy","published":1,"updated":"2023-06-26T13:28:47.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5doo00058x8f168u02mo","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>源安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install software-properties-common</span><br><span class=\"line\"><span class=\"comment\">#软件源管理工具</span></span><br></pre></td></tr></table></figure>\n<p>添加 haproxy source 源文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:vbernat/haproxy-2.0</span><br><span class=\"line\"><span class=\"comment\">#添加haproxy源，，红帽系列好像不被官方支持...但是源仓库是有的，版本低</span></span><br></pre></td></tr></table></figure>\n<p>更新一下源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n<p>查看选择需要安装的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache madison haproxy</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install haproxy=2.8.\\*</span><br></pre></td></tr></table></figure>\n<p><code>编译安装</code><br>安装编译相关工具和依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install gcc make libssl-dev libpcre3  libpcre3-dev zlib1g-dev libreadline-dev libsystemd-dev liblua5.4-dev</span><br></pre></td></tr></table></figure>\n<p>下载源码包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf haproxy-2.8.0.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> haproxy-2.8.0</span><br></pre></td></tr></table></figure>\n<p>构建编译的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_PROMEX=1 USE_LUA=1</span><br></pre></td></tr></table></figure>\n<p>安装到指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install PREFIX=/apps/haproxy</span><br></pre></td></tr></table></figure>\n<p>创建软链接，也就是添加可执行路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /apps/haproxy/sbin/haproxy /usr/local/sbin/</span><br></pre></td></tr></table></figure>\n<p>参考配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    <span class=\"built_in\">chroot</span> /apps/haproxy   改变根目录</span><br><span class=\"line\">    deamon                 后台运行</span><br><span class=\"line\">    mode tcp | http        转发类型 </span><br><span class=\"line\">    stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin  proxess 1    这是socket文件,可用通过命令向该文件执行命令</span><br><span class=\"line\">    user  gid | username</span><br><span class=\"line\">    group uid | groupname 指定用户和组</span><br><span class=\"line\">    nbproc n   该命令和nginx相似，开启n个进程，不过从2.5以后被弃用</span><br><span class=\"line\">    nbthread n  指定每个进程开启的线程，默认为1，同时两者同时开启会报错，Centos8的1.8无此问题</span><br><span class=\"line\">    cpu-map 1 0</span><br><span class=\"line\">    cpu-map 2 1  亲缘性，CPU绑定进程，进程从1开始，cpu从0开始</span><br><span class=\"line\">    cpu-map auto:1/1-8 0-7   自动绑定，每个进程的1-8个线程分别绑定0-7号cpu。haproxy2.4中为nbthreads</span><br><span class=\"line\">    <span class=\"comment\">#查看cpu绑定 ps axo pid,cmd,psr -L | grep haproxy</span></span><br><span class=\"line\">    <span class=\"comment\">#或者安装sysstat,pidstat -p  haproxy-pid -t </span></span><br><span class=\"line\">    maxconn n       每个进程的最大连接数为n</span><br><span class=\"line\">    maxsslconn n    每个进程的ssl最大连接数为n</span><br><span class=\"line\">    maxconnrate n   每个进程每秒能创建的最多连接数为n</span><br><span class=\"line\">    spread-checks n 后端server状态检查，建议为2-5，默认为0</span><br><span class=\"line\">    pidfile   /some/path/haproxy.pid  PID文件路径</span><br><span class=\"line\">    <span class=\"built_in\">log</span> 127.0.0.1 local2 info   日志发送到本机，默认为514 udp端口</span><br><span class=\"line\">    <span class=\"built_in\">log</span> x.x.x.x local2 info     定义<span class=\"built_in\">log</span>，和rsyslog配合使用，local3为名称，info为日志等级，需要开启UDP，最多可以定义两个</span><br><span class=\"line\">        日志配置</span><br><span class=\"line\">        vim /etc/rsyslog.conf</span><br><span class=\"line\">        module(load=<span class=\"string\">&quot;imudp&quot;</span>)</span><br><span class=\"line\">        input(<span class=\"built_in\">type</span>=<span class=\"string\">&quot;imudp&quot;</span> port=<span class=\"string\">&quot;514&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span>  local2.* /var/log/haproxy.log 或 local2.info  /var/log/haproxy.log &gt; /etc/rsyslog.d/50-default.conf</span><br><span class=\"line\">        systemctl restart rsyslog</span><br><span class=\"line\">defaults</span><br><span class=\"line\">    option redispatch                   重定向其他正常服务器</span><br><span class=\"line\">    option abortonclose                 自动结束连接时长较久的连接             </span><br><span class=\"line\">    option http-keep-alive              开启与客户端的会话保持</span><br><span class=\"line\">    option forwardfor                   透传真实IP至后端服务器,可自定义修改</span><br><span class=\"line\">    mode http | tcp                     默认工作类型</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> http-keep-alive             会话保持时间</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> connect 120s                客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)默认单位 ms</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> server 600s                 客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，超时502</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> client 600s                 设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> check 5s                    对后端服务器的默认检测超时时间</span><br><span class=\"line\">    default-server inter 1000 weight 3  指定后端服务器的默认设置</span><br><span class=\"line\"></span><br><span class=\"line\">前后端整合</span><br><span class=\"line\">listen nginx                            使用listen替换 frontend和backend的配置方式，可以简化设置，常用于TCP协议的应用       </span><br><span class=\"line\">        <span class=\"built_in\">bind</span> 公网IP:端口</span><br><span class=\"line\">        mode tcp | http</span><br><span class=\"line\">        server web1 后端IP:port</span><br><span class=\"line\">        server web2 后端IP:port</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">前端服务器</span><br><span class=\"line\">frontend  nginx</span><br><span class=\"line\">    <span class=\"built_in\">bind</span> 公网IP：端口</span><br><span class=\"line\">    use_backend real-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">后端服务器                                                                                 </span><br><span class=\"line\">backend  real-nginx </span><br><span class=\"line\">    redirect prefix http://www.baidu.com/                    全局重定向，只适合http</span><br><span class=\"line\">    server web1 后端IP:port check inter 5000 fail 3 rise 3   每5秒检查一次，如果3次不通就挂，上线同理</span><br><span class=\"line\">    server web2 后端IP:port weight 3                         权重</span><br><span class=\"line\">    server web2 后端IP:port check backup                     备份服务器，可当sorry server</span><br><span class=\"line\">        server后字段</span><br><span class=\"line\">            check </span><br><span class=\"line\">                addr &lt;IP&gt; 可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量</span><br><span class=\"line\">                port &lt;num&gt; 指定的健康状态监测端口</span><br><span class=\"line\">                inter &lt;num&gt; 健康状态检查间隔时间，默认2000 ms</span><br><span class=\"line\">                fall &lt;num&gt; 后端服务器从线上转为线下的检查的连续失效次数，默认为3</span><br><span class=\"line\">                rise &lt;num&gt; 后端服务器从下线恢复上线的检查的连续有效次数，默认为2</span><br><span class=\"line\">            <span class=\"built_in\">disable</span> 关闭服务器</span><br><span class=\"line\">            maxconn 后端服务器最大连接数</span><br><span class=\"line\">            redir http://x.x.x  局部302临时重定向到某url，只适合http</span><br><span class=\"line\"></span><br><span class=\"line\">listen mysql</span><br><span class=\"line\">        <span class=\"built_in\">bind</span> 0.0.0.0:3306           haproxy端口</span><br><span class=\"line\">        mode tcp                    如果不指定tcp，会以http进行连接</span><br><span class=\"line\">        server data1 x.x.x.x:3306   后端数据库地址和端口</span><br><span class=\"line\"></span><br><span class=\"line\">listen stats</span><br><span class=\"line\">        mode http</span><br><span class=\"line\">        <span class=\"built_in\">bind</span> 0.0.0.0:9999</span><br><span class=\"line\">        stats <span class=\"built_in\">enable</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> global                  开启日志，默认不开启</span><br><span class=\"line\">        stats uri /haproxy-status   访问后缀</span><br><span class=\"line\">        stats auth admin:123456     开启认证</span><br><span class=\"line\">        stats refresh 5             自动刷新，这里是每5s</span><br><span class=\"line\">        stats admin <span class=\"keyword\">if</span> TURE         如果是admin就允许访问stats页面</span><br></pre></td></tr></table></figure>\n<p>检查配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haproxy -c -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>创建用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy</span><br><span class=\"line\"><span class=\"comment\">#如果没创建用户和组的话</span></span><br></pre></td></tr></table></figure>\n<p>创建damon.service文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; /usr/lib/systemd/system/haproxy.service</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=HAProxy Load Balancer</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target network.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">ExecStartPre=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -c -q</span></span><br><span class=\"line\"><span class=\"string\">#-f可指定文件，也可指定目录，目录一般存放子配置文件</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/local/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -p  /var/lib/haproxy/haproxy.pid</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=/bin/kill -USR2 $MAINPID</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=100000</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl start haproxy</span><br></pre></td></tr></table></figure>\n<p>web端访问 <a href=\"http://ip:9999/haproxy-status\">http://ip:9999/haproxy-status</a></p>\n<p>官方配置手册 <a href=\"http://docs.haproxy.org/2.8/configuration.html\">http://docs.haproxy.org/2.8/configuration.html</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>源安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install software-properties-common</span><br><span class=\"line\"><span class=\"comment\">#软件源管理工具</span></span><br></pre></td></tr></table></figure>\n<p>添加 haproxy source 源文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-apt-repository ppa:vbernat/haproxy-2.0</span><br><span class=\"line\"><span class=\"comment\">#添加haproxy源，，红帽系列好像不被官方支持...但是源仓库是有的，版本低</span></span><br></pre></td></tr></table></figure>\n<p>更新一下源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n<p>查看选择需要安装的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache madison haproxy</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install haproxy=2.8.\\*</span><br></pre></td></tr></table></figure>\n<p><code>编译安装</code><br>安装编译相关工具和依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install gcc make libssl-dev libpcre3  libpcre3-dev zlib1g-dev libreadline-dev libsystemd-dev liblua5.4-dev</span><br></pre></td></tr></table></figure>\n<p>下载源码包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf haproxy-2.8.0.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> haproxy-2.8.0</span><br></pre></td></tr></table></figure>\n<p>构建编译的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_PROMEX=1 USE_LUA=1</span><br></pre></td></tr></table></figure>\n<p>安装到指定目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install PREFIX=/apps/haproxy</span><br></pre></td></tr></table></figure>\n<p>创建软链接，也就是添加可执行路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /apps/haproxy/sbin/haproxy /usr/local/sbin/</span><br></pre></td></tr></table></figure>\n<p>参考配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    <span class=\"built_in\">chroot</span> /apps/haproxy   改变根目录</span><br><span class=\"line\">    deamon                 后台运行</span><br><span class=\"line\">    mode tcp | http        转发类型 </span><br><span class=\"line\">    stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin  proxess 1    这是socket文件,可用通过命令向该文件执行命令</span><br><span class=\"line\">    user  gid | username</span><br><span class=\"line\">    group uid | groupname 指定用户和组</span><br><span class=\"line\">    nbproc n   该命令和nginx相似，开启n个进程，不过从2.5以后被弃用</span><br><span class=\"line\">    nbthread n  指定每个进程开启的线程，默认为1，同时两者同时开启会报错，Centos8的1.8无此问题</span><br><span class=\"line\">    cpu-map 1 0</span><br><span class=\"line\">    cpu-map 2 1  亲缘性，CPU绑定进程，进程从1开始，cpu从0开始</span><br><span class=\"line\">    cpu-map auto:1/1-8 0-7   自动绑定，每个进程的1-8个线程分别绑定0-7号cpu。haproxy2.4中为nbthreads</span><br><span class=\"line\">    <span class=\"comment\">#查看cpu绑定 ps axo pid,cmd,psr -L | grep haproxy</span></span><br><span class=\"line\">    <span class=\"comment\">#或者安装sysstat,pidstat -p  haproxy-pid -t </span></span><br><span class=\"line\">    maxconn n       每个进程的最大连接数为n</span><br><span class=\"line\">    maxsslconn n    每个进程的ssl最大连接数为n</span><br><span class=\"line\">    maxconnrate n   每个进程每秒能创建的最多连接数为n</span><br><span class=\"line\">    spread-checks n 后端server状态检查，建议为2-5，默认为0</span><br><span class=\"line\">    pidfile   /some/path/haproxy.pid  PID文件路径</span><br><span class=\"line\">    <span class=\"built_in\">log</span> 127.0.0.1 local2 info   日志发送到本机，默认为514 udp端口</span><br><span class=\"line\">    <span class=\"built_in\">log</span> x.x.x.x local2 info     定义<span class=\"built_in\">log</span>，和rsyslog配合使用，local3为名称，info为日志等级，需要开启UDP，最多可以定义两个</span><br><span class=\"line\">        日志配置</span><br><span class=\"line\">        vim /etc/rsyslog.conf</span><br><span class=\"line\">        module(load=<span class=\"string\">&quot;imudp&quot;</span>)</span><br><span class=\"line\">        input(<span class=\"built_in\">type</span>=<span class=\"string\">&quot;imudp&quot;</span> port=<span class=\"string\">&quot;514&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span>  local2.* /var/log/haproxy.log 或 local2.info  /var/log/haproxy.log &gt; /etc/rsyslog.d/50-default.conf</span><br><span class=\"line\">        systemctl restart rsyslog</span><br><span class=\"line\">defaults</span><br><span class=\"line\">    option redispatch                   重定向其他正常服务器</span><br><span class=\"line\">    option abortonclose                 自动结束连接时长较久的连接             </span><br><span class=\"line\">    option http-keep-alive              开启与客户端的会话保持</span><br><span class=\"line\">    option forwardfor                   透传真实IP至后端服务器,可自定义修改</span><br><span class=\"line\">    mode http | tcp                     默认工作类型</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> http-keep-alive             会话保持时间</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> connect 120s                客户端请求从haproxy到后端server最长连接等待时间(TCP连接之前)默认单位 ms</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> server 600s                 客户端请求从haproxy到后端服务端的请求处理超时时长(TCP连接之后)，超时502</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> client 600s                 设置haproxy与客户端的最长非活动时间，默认单位ms，建议和timeoutserver相同</span><br><span class=\"line\">    <span class=\"built_in\">timeout</span> check 5s                    对后端服务器的默认检测超时时间</span><br><span class=\"line\">    default-server inter 1000 weight 3  指定后端服务器的默认设置</span><br><span class=\"line\"></span><br><span class=\"line\">前后端整合</span><br><span class=\"line\">listen nginx                            使用listen替换 frontend和backend的配置方式，可以简化设置，常用于TCP协议的应用       </span><br><span class=\"line\">        <span class=\"built_in\">bind</span> 公网IP:端口</span><br><span class=\"line\">        mode tcp | http</span><br><span class=\"line\">        server web1 后端IP:port</span><br><span class=\"line\">        server web2 后端IP:port</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">前端服务器</span><br><span class=\"line\">frontend  nginx</span><br><span class=\"line\">    <span class=\"built_in\">bind</span> 公网IP：端口</span><br><span class=\"line\">    use_backend real-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">后端服务器                                                                                 </span><br><span class=\"line\">backend  real-nginx </span><br><span class=\"line\">    redirect prefix http://www.baidu.com/                    全局重定向，只适合http</span><br><span class=\"line\">    server web1 后端IP:port check inter 5000 fail 3 rise 3   每5秒检查一次，如果3次不通就挂，上线同理</span><br><span class=\"line\">    server web2 后端IP:port weight 3                         权重</span><br><span class=\"line\">    server web2 后端IP:port check backup                     备份服务器，可当sorry server</span><br><span class=\"line\">        server后字段</span><br><span class=\"line\">            check </span><br><span class=\"line\">                addr &lt;IP&gt; 可指定的健康状态监测IP，可以是专门的数据网段，减少业务网络的流量</span><br><span class=\"line\">                port &lt;num&gt; 指定的健康状态监测端口</span><br><span class=\"line\">                inter &lt;num&gt; 健康状态检查间隔时间，默认2000 ms</span><br><span class=\"line\">                fall &lt;num&gt; 后端服务器从线上转为线下的检查的连续失效次数，默认为3</span><br><span class=\"line\">                rise &lt;num&gt; 后端服务器从下线恢复上线的检查的连续有效次数，默认为2</span><br><span class=\"line\">            <span class=\"built_in\">disable</span> 关闭服务器</span><br><span class=\"line\">            maxconn 后端服务器最大连接数</span><br><span class=\"line\">            redir http://x.x.x  局部302临时重定向到某url，只适合http</span><br><span class=\"line\"></span><br><span class=\"line\">listen mysql</span><br><span class=\"line\">        <span class=\"built_in\">bind</span> 0.0.0.0:3306           haproxy端口</span><br><span class=\"line\">        mode tcp                    如果不指定tcp，会以http进行连接</span><br><span class=\"line\">        server data1 x.x.x.x:3306   后端数据库地址和端口</span><br><span class=\"line\"></span><br><span class=\"line\">listen stats</span><br><span class=\"line\">        mode http</span><br><span class=\"line\">        <span class=\"built_in\">bind</span> 0.0.0.0:9999</span><br><span class=\"line\">        stats <span class=\"built_in\">enable</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> global                  开启日志，默认不开启</span><br><span class=\"line\">        stats uri /haproxy-status   访问后缀</span><br><span class=\"line\">        stats auth admin:123456     开启认证</span><br><span class=\"line\">        stats refresh 5             自动刷新，这里是每5s</span><br><span class=\"line\">        stats admin <span class=\"keyword\">if</span> TURE         如果是admin就允许访问stats页面</span><br></pre></td></tr></table></figure>\n<p>检查配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">haproxy -c -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>\n<p>创建用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -r -s /sbin/nologin -d /var/lib/haproxy haproxy</span><br><span class=\"line\"><span class=\"comment\">#如果没创建用户和组的话</span></span><br></pre></td></tr></table></figure>\n<p>创建damon.service文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; /usr/lib/systemd/system/haproxy.service</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=HAProxy Load Balancer</span></span><br><span class=\"line\"><span class=\"string\">After=syslog.target network.target</span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">ExecStartPre=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -c -q</span></span><br><span class=\"line\"><span class=\"string\">#-f可指定文件，也可指定目录，目录一般存放子配置文件</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/local/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -f /etc/haproxy/haproxy.d/ -p  /var/lib/haproxy/haproxy.pid</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=/bin/kill -USR2 $MAINPID</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=100000</span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl start haproxy</span><br></pre></td></tr></table></figure>\n<p>web端访问 <a href=\"http://ip:9999/haproxy-status\">http://ip:9999/haproxy-status</a></p>\n<p>官方配置手册 <a href=\"http://docs.haproxy.org/2.8/configuration.html\">http://docs.haproxy.org/2.8/configuration.html</a></p>\n"},{"title":"开源Docker仓库管理器Harbor","date":"2023-06-17T13:41:02.000Z","_content":"\n# 部署准备\n- 安装docker和docker-compose\n- 多台虚拟机...\n# 部署步骤\n10.0.0.133更新\n```bash\napt update\n```\n这里使用官方脚本安装\n```bash\nsh <(curl -fsSL https://get.docker.com)\n```\n启动docker\n```bash\ndocker start docker\n```\n安装docker-compose\n```bash\nwget -O /usr/bin/docker-compose -P /usr/bin  \\\nhttps://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64\n或\nwget -O /usr/bin/docker-compose -P /usr/bin http://pan.alybaba.top/soft/docker-compose-linux-x86_64\n```\n添加执行权限\n```bash\nchmod +x /usr/bin/docker-compose\n```\n测试\n```bash\ndocker-compose version\n```\n下载Harbor镜像包,这里是离线安装\n```bash\nwget https://github.com/goharbor/harbor/releases/download/v2.8.2/harbor-offline-installer-v2.8.2.tgz\n或\nwget http://pan.alybaba.top/soft/harbor-offline-installer-v2.8.2.tgz\n```\n解压\n```bash\ntar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local  \n```\n自签证书,创建存放自签证书目录\n```bash\nmkdir -p /data/harbor/certs && cd  /data/harbor/certs\n```\n生成 CA（证书颁发机构）私钥 (ca.key) 和证书 (ca.crt)\n```bash\nopenssl genrsa -out ca.key 4096\nopenssl req -x509 -new -nodes -sha512 -days 3650  \\\n-subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=test.com\" \\ \n-key ca.key -out ca.crt\n```\n生成 Harbor 服务器私钥 (harbor.test.com.key)\n```bash\nopenssl genrsa -out harbor.test.com.key 4096\n```\n生成 Harbor 服务器证书签名请求 (harbor.test.com.csr)\n```bash\nopenssl req -sha512 -new -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com\" \\\n-key harbor.test.com.key -out harbor.test.com.csr\n```\n创建 v3.ext 文件，指定证书扩展属性\n```bash\ncat << EOF > v3.ext \nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=test.com\nDNS.2=test\nDNS.3=harbor.test.com\nEOF\n```\n使用 CA 证书和私钥，对之前生成的 CSR 进行签名，生成最终的 Harbor 服务器证书 (harbor.test.com.crt)\n```bash\nopenssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key \\\n-CAcreateserial -in harbor.test.com.csr -out harbor.test.com.crt\n```\n修改 harbor 部分相关参数\n```bash\ncp /usr/local/harbor/harbor.yml.tmpl /usr/local/harbor/harbor.yml && vim /usr/local/harbor/harbor.yml\nhostname: www.test.com\n#这里需要修改hosts文件\n    certificate: /you/path/harbor.test.com.crt\n    private_key: /you/path/harbor.test.com.key\n#你的证书和私钥存放的位置\nharbor_admin_password: Harbor12345\n# Harbor12345是登录密码，可以修改成你想要的密码，账号是admin\n#这里值得注意的是，会自动修改nginx的配置文件自动跳转https\n:wq\n```\n`同时，这里要注意，因为是自签证书，浏览器访问还是会不信任，导致镜像无法推送`\n`2种方法，第一，在客户端安装自签证书，第二写docker配置文件，这里就采用第二种了`\n```bash\necho -e '{\\n\"insecure-registries\": [\"harbor.test.com\"]\\n}' > /etc/docker/daemon.json\n#意思是信任不安全的镜像仓库地址\nsystemctl restart docker\n```\n启动仓库\n```bash\ncd /usr/local/harbor  && ./install.sh && ./prepare && docker-compose up -d\n#这里也可以使用docker-compose -f /you/path/docker-compose.yml up -d 指定文件所在路径后台启动\n```\n写入service文件，配置自启动\n```bash\ncat << EOF > /lib/systemd/system/harbor.service \n[Unit]\nDescription=Harbor\nAfter=docker.service systemd-networkd.service systemd-resolved.service\nRequires=docker.service\nDocumentation=http://github.com/vmware/harbor\n\n[Service]\nType=simple\nRestart=on-failure\nRestart=5\nExecStart=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml up\nExecStop=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml down\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n启动harbor\n```bash\ndocker-compose down\n#这里要注意，前面我们用docker-compose启动过的，这里我们关闭\nsystemctl daemon-reload && systemctl start harbor.service\n```\nlinux登录仓库,输出Login Succeeded则成功，如出现其他报错，请检查日志或者报错原因\n```bash\ndocker login -u admin -p Harbor12345 harbor.test.com\n#这里可以使用本机，也可以使用客户端，记得添加hosts解析以及docker信任配置\n```\n接下来我们去网页端登录看看,可以看到还是提示不安全，不交钱就是这样\n![logi-page](/images/harbor-login.jpg)\n登录进去创建一个项目,我这边已经创建了\n![create-project](/images/harbor-create.jpg)\n然后我们就来推送一个镜像试试，首先看看有什么镜像\n![see-what-we-got](/images/harbor-docker-images.jpg)\n`可以看到，我已经操作了一边。`\n首先重命名\n```bash\ndocker tag alpine-nginx:1.24.0-v3  harbor.test.com/nginx/alpine-nginx:1.24.0-v3\n#harbor.test.com表示harbor仓库地址\n#nginx表示你创建的项目的地址\n```\n接着推送就完成了\n```bash\ndocker push  harbor.test.com/nginx/alpine-nginx:1.24.0-v3\n```\n然后也可以把镜像拉下来\n```bash\ndocker pull  harbor.test.com/nginx/alpine-nginx:1.24.0-v3\n```\n![pull-images](/images/harbor-pull.jpg)\n在web端我们也可以看到镜像，harbor还压缩了\n![see-pull-images](/images/harbor-images.jpg)\n`这里虽然完成的harbor的部署，但是始终是一个单点问题，所有接下来我们继续部署高可用harbor`\n使用另一台空闲机10.0.0.132安装 docker 和 docker-compose 环境\n```bash\nsh <(curl -fsSL https://get.docker.com) && wget -O /usr/bin/docker-compose  -P \\\n/usr/bin  http://pan.alybaba.top/soft/docker-compose-linux-x86_64 \\\n&& chmod +x /usr/bin/docker-compose\n```\nharbor包和service文件我已经用scp命令拷贝过来\n```bash\ntar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local && cd /usr/local/harbor\nsed -i 's/hostname: reg.mydomain.com/hostname: 10.0.0.132/'  harbor.yml\necho -e '{\\n\"insecure-registries\": [\"10.0.0.132\"]\\n}' > /etc/docker/daemon.json\n./install.sh  && ./prepare && systemctl daemon-reload\nsystemctl start docker harbor.service\n```\n那么我登上前面配置的harbor上进行高可用配置，前面的ip地址是133，它对应的仓库地址就是132\n![create-target](/images/harbor-hight-use.jpg)\n做完这里，在 10.0.0.133  push镜像时已经可以同步到10.0.0.132了，那么132也同理配置，这里就不再过多叙述\n![create-policy](/images/harbor-hight-use-2.jpg)\n# 部分参考资料\n- docker-compose 官方下载地址: https://docs.docker.com/compose/\n- docker 官方文档安装地址：https://docs.docker.com/engine/install/ubuntu/\n- harbor 下载地址: https://github.com/vmware/harbor/releases\n- harbor 安装文档: https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md\n","source":"_posts/harbor.md","raw":"---\ntitle: 开源Docker仓库管理器Harbor\ndate: 2023-06-17 21:41:02\ntags:\n---\n\n# 部署准备\n- 安装docker和docker-compose\n- 多台虚拟机...\n# 部署步骤\n10.0.0.133更新\n```bash\napt update\n```\n这里使用官方脚本安装\n```bash\nsh <(curl -fsSL https://get.docker.com)\n```\n启动docker\n```bash\ndocker start docker\n```\n安装docker-compose\n```bash\nwget -O /usr/bin/docker-compose -P /usr/bin  \\\nhttps://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64\n或\nwget -O /usr/bin/docker-compose -P /usr/bin http://pan.alybaba.top/soft/docker-compose-linux-x86_64\n```\n添加执行权限\n```bash\nchmod +x /usr/bin/docker-compose\n```\n测试\n```bash\ndocker-compose version\n```\n下载Harbor镜像包,这里是离线安装\n```bash\nwget https://github.com/goharbor/harbor/releases/download/v2.8.2/harbor-offline-installer-v2.8.2.tgz\n或\nwget http://pan.alybaba.top/soft/harbor-offline-installer-v2.8.2.tgz\n```\n解压\n```bash\ntar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local  \n```\n自签证书,创建存放自签证书目录\n```bash\nmkdir -p /data/harbor/certs && cd  /data/harbor/certs\n```\n生成 CA（证书颁发机构）私钥 (ca.key) 和证书 (ca.crt)\n```bash\nopenssl genrsa -out ca.key 4096\nopenssl req -x509 -new -nodes -sha512 -days 3650  \\\n-subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=test.com\" \\ \n-key ca.key -out ca.crt\n```\n生成 Harbor 服务器私钥 (harbor.test.com.key)\n```bash\nopenssl genrsa -out harbor.test.com.key 4096\n```\n生成 Harbor 服务器证书签名请求 (harbor.test.com.csr)\n```bash\nopenssl req -sha512 -new -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com\" \\\n-key harbor.test.com.key -out harbor.test.com.csr\n```\n创建 v3.ext 文件，指定证书扩展属性\n```bash\ncat << EOF > v3.ext \nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=test.com\nDNS.2=test\nDNS.3=harbor.test.com\nEOF\n```\n使用 CA 证书和私钥，对之前生成的 CSR 进行签名，生成最终的 Harbor 服务器证书 (harbor.test.com.crt)\n```bash\nopenssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key \\\n-CAcreateserial -in harbor.test.com.csr -out harbor.test.com.crt\n```\n修改 harbor 部分相关参数\n```bash\ncp /usr/local/harbor/harbor.yml.tmpl /usr/local/harbor/harbor.yml && vim /usr/local/harbor/harbor.yml\nhostname: www.test.com\n#这里需要修改hosts文件\n    certificate: /you/path/harbor.test.com.crt\n    private_key: /you/path/harbor.test.com.key\n#你的证书和私钥存放的位置\nharbor_admin_password: Harbor12345\n# Harbor12345是登录密码，可以修改成你想要的密码，账号是admin\n#这里值得注意的是，会自动修改nginx的配置文件自动跳转https\n:wq\n```\n`同时，这里要注意，因为是自签证书，浏览器访问还是会不信任，导致镜像无法推送`\n`2种方法，第一，在客户端安装自签证书，第二写docker配置文件，这里就采用第二种了`\n```bash\necho -e '{\\n\"insecure-registries\": [\"harbor.test.com\"]\\n}' > /etc/docker/daemon.json\n#意思是信任不安全的镜像仓库地址\nsystemctl restart docker\n```\n启动仓库\n```bash\ncd /usr/local/harbor  && ./install.sh && ./prepare && docker-compose up -d\n#这里也可以使用docker-compose -f /you/path/docker-compose.yml up -d 指定文件所在路径后台启动\n```\n写入service文件，配置自启动\n```bash\ncat << EOF > /lib/systemd/system/harbor.service \n[Unit]\nDescription=Harbor\nAfter=docker.service systemd-networkd.service systemd-resolved.service\nRequires=docker.service\nDocumentation=http://github.com/vmware/harbor\n\n[Service]\nType=simple\nRestart=on-failure\nRestart=5\nExecStart=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml up\nExecStop=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml down\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n启动harbor\n```bash\ndocker-compose down\n#这里要注意，前面我们用docker-compose启动过的，这里我们关闭\nsystemctl daemon-reload && systemctl start harbor.service\n```\nlinux登录仓库,输出Login Succeeded则成功，如出现其他报错，请检查日志或者报错原因\n```bash\ndocker login -u admin -p Harbor12345 harbor.test.com\n#这里可以使用本机，也可以使用客户端，记得添加hosts解析以及docker信任配置\n```\n接下来我们去网页端登录看看,可以看到还是提示不安全，不交钱就是这样\n![logi-page](/images/harbor-login.jpg)\n登录进去创建一个项目,我这边已经创建了\n![create-project](/images/harbor-create.jpg)\n然后我们就来推送一个镜像试试，首先看看有什么镜像\n![see-what-we-got](/images/harbor-docker-images.jpg)\n`可以看到，我已经操作了一边。`\n首先重命名\n```bash\ndocker tag alpine-nginx:1.24.0-v3  harbor.test.com/nginx/alpine-nginx:1.24.0-v3\n#harbor.test.com表示harbor仓库地址\n#nginx表示你创建的项目的地址\n```\n接着推送就完成了\n```bash\ndocker push  harbor.test.com/nginx/alpine-nginx:1.24.0-v3\n```\n然后也可以把镜像拉下来\n```bash\ndocker pull  harbor.test.com/nginx/alpine-nginx:1.24.0-v3\n```\n![pull-images](/images/harbor-pull.jpg)\n在web端我们也可以看到镜像，harbor还压缩了\n![see-pull-images](/images/harbor-images.jpg)\n`这里虽然完成的harbor的部署，但是始终是一个单点问题，所有接下来我们继续部署高可用harbor`\n使用另一台空闲机10.0.0.132安装 docker 和 docker-compose 环境\n```bash\nsh <(curl -fsSL https://get.docker.com) && wget -O /usr/bin/docker-compose  -P \\\n/usr/bin  http://pan.alybaba.top/soft/docker-compose-linux-x86_64 \\\n&& chmod +x /usr/bin/docker-compose\n```\nharbor包和service文件我已经用scp命令拷贝过来\n```bash\ntar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local && cd /usr/local/harbor\nsed -i 's/hostname: reg.mydomain.com/hostname: 10.0.0.132/'  harbor.yml\necho -e '{\\n\"insecure-registries\": [\"10.0.0.132\"]\\n}' > /etc/docker/daemon.json\n./install.sh  && ./prepare && systemctl daemon-reload\nsystemctl start docker harbor.service\n```\n那么我登上前面配置的harbor上进行高可用配置，前面的ip地址是133，它对应的仓库地址就是132\n![create-target](/images/harbor-hight-use.jpg)\n做完这里，在 10.0.0.133  push镜像时已经可以同步到10.0.0.132了，那么132也同理配置，这里就不再过多叙述\n![create-policy](/images/harbor-hight-use-2.jpg)\n# 部分参考资料\n- docker-compose 官方下载地址: https://docs.docker.com/compose/\n- docker 官方文档安装地址：https://docs.docker.com/engine/install/ubuntu/\n- harbor 下载地址: https://github.com/vmware/harbor/releases\n- harbor 安装文档: https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md\n","slug":"harbor","published":1,"updated":"2023-06-17T14:14:43.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dop00068x8f28595t4h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h1><ul>\n<li>安装docker和docker-compose</li>\n<li>多台虚拟机…</li>\n</ul>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>10.0.0.133更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n<p>这里使用官方脚本安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>\n<p>启动docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start docker</span><br></pre></td></tr></table></figure>\n<p>安装docker-compose</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /usr/bin/docker-compose -P /usr/bin  \\</span><br><span class=\"line\">https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64</span><br><span class=\"line\">或</span><br><span class=\"line\">wget -O /usr/bin/docker-compose -P /usr/bin http://pan.alybaba.top/soft/docker-compose-linux-x86_64</span><br></pre></td></tr></table></figure>\n<p>添加执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n<p>下载Harbor镜像包,这里是离线安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/goharbor/harbor/releases/download/v2.8.2/harbor-offline-installer-v2.8.2.tgz</span><br><span class=\"line\">或</span><br><span class=\"line\">wget http://pan.alybaba.top/soft/harbor-offline-installer-v2.8.2.tgz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local  </span><br></pre></td></tr></table></figure>\n<p>自签证书,创建存放自签证书目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/harbor/certs &amp;&amp; <span class=\"built_in\">cd</span>  /data/harbor/certs</span><br></pre></td></tr></table></figure>\n<p>生成 CA（证书颁发机构）私钥 (ca.key) 和证书 (ca.crt)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650  \\</span><br><span class=\"line\">-subj <span class=\"string\">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=test.com&quot;</span> \\ </span><br><span class=\"line\">-key ca.key -out ca.crt</span><br></pre></td></tr></table></figure>\n<p>生成 Harbor 服务器私钥 (harbor.test.com.key)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out harbor.test.com.key 4096</span><br></pre></td></tr></table></figure>\n<p>生成 Harbor 服务器证书签名请求 (harbor.test.com.csr)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -sha512 -new -subj <span class=\"string\">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com&quot;</span> \\</span><br><span class=\"line\">-key harbor.test.com.key -out harbor.test.com.csr</span><br></pre></td></tr></table></figure>\n<p>创建 v3.ext 文件，指定证书扩展属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; v3.ext </span></span><br><span class=\"line\"><span class=\"string\">authorityKeyIdentifier=keyid,issuer</span></span><br><span class=\"line\"><span class=\"string\">basicConstraints=CA:FALSE</span></span><br><span class=\"line\"><span class=\"string\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class=\"line\"><span class=\"string\">extendedKeyUsage = serverAuth</span></span><br><span class=\"line\"><span class=\"string\">subjectAltName = @alt_names</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[alt_names]</span></span><br><span class=\"line\"><span class=\"string\">DNS.1=test.com</span></span><br><span class=\"line\"><span class=\"string\">DNS.2=test</span></span><br><span class=\"line\"><span class=\"string\">DNS.3=harbor.test.com</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>使用 CA 证书和私钥，对之前生成的 CSR 进行签名，生成最终的 Harbor 服务器证书 (harbor.test.com.crt)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key \\</span><br><span class=\"line\">-CAcreateserial -<span class=\"keyword\">in</span> harbor.test.com.csr -out harbor.test.com.crt</span><br></pre></td></tr></table></figure>\n<p>修改 harbor 部分相关参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/harbor/harbor.yml.tmpl /usr/local/harbor/harbor.yml &amp;&amp; vim /usr/local/harbor/harbor.yml</span><br><span class=\"line\">hostname: www.test.com</span><br><span class=\"line\"><span class=\"comment\">#这里需要修改hosts文件</span></span><br><span class=\"line\">    certificate: /you/path/harbor.test.com.crt</span><br><span class=\"line\">    private_key: /you/path/harbor.test.com.key</span><br><span class=\"line\"><span class=\"comment\">#你的证书和私钥存放的位置</span></span><br><span class=\"line\">harbor_admin_password: Harbor12345</span><br><span class=\"line\"><span class=\"comment\"># Harbor12345是登录密码，可以修改成你想要的密码，账号是admin</span></span><br><span class=\"line\"><span class=\"comment\">#这里值得注意的是，会自动修改nginx的配置文件自动跳转https</span></span><br><span class=\"line\">:wq</span><br></pre></td></tr></table></figure>\n<p><code>同时，这里要注意，因为是自签证书，浏览器访问还是会不信任，导致镜像无法推送</code><br><code>2种方法，第一，在客户端安装自签证书，第二写docker配置文件，这里就采用第二种了</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;&#123;\\n&quot;insecure-registries&quot;: [&quot;harbor.test.com&quot;]\\n&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class=\"line\"><span class=\"comment\">#意思是信任不安全的镜像仓库地址</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>启动仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/harbor  &amp;&amp; ./install.sh &amp;&amp; ./prepare &amp;&amp; docker-compose up -d</span><br><span class=\"line\"><span class=\"comment\">#这里也可以使用docker-compose -f /you/path/docker-compose.yml up -d 指定文件所在路径后台启动</span></span><br></pre></td></tr></table></figure>\n<p>写入service文件，配置自启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; /lib/systemd/system/harbor.service </span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Harbor</span></span><br><span class=\"line\"><span class=\"string\">After=docker.service systemd-networkd.service systemd-resolved.service</span></span><br><span class=\"line\"><span class=\"string\">Requires=docker.service</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://github.com/vmware/harbor</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=simple</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">Restart=5</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml up</span></span><br><span class=\"line\"><span class=\"string\">ExecStop=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml down</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>启动harbor</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br><span class=\"line\"><span class=\"comment\">#这里要注意，前面我们用docker-compose启动过的，这里我们关闭</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl start harbor.service</span><br></pre></td></tr></table></figure>\n<p>linux登录仓库,输出Login Succeeded则成功，如出现其他报错，请检查日志或者报错原因</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login -u admin -p Harbor12345 harbor.test.com</span><br><span class=\"line\"><span class=\"comment\">#这里可以使用本机，也可以使用客户端，记得添加hosts解析以及docker信任配置</span></span><br></pre></td></tr></table></figure>\n<p>接下来我们去网页端登录看看,可以看到还是提示不安全，不交钱就是这样<br><img src=\"/images/harbor-login.jpg\" alt=\"logi-page\"><br>登录进去创建一个项目,我这边已经创建了<br><img src=\"/images/harbor-create.jpg\" alt=\"create-project\"><br>然后我们就来推送一个镜像试试，首先看看有什么镜像<br><img src=\"/images/harbor-docker-images.jpg\" alt=\"see-what-we-got\"><br><code>可以看到，我已经操作了一边。</code><br>首先重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag alpine-nginx:1.24.0-v3  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br><span class=\"line\"><span class=\"comment\">#harbor.test.com表示harbor仓库地址</span></span><br><span class=\"line\"><span class=\"comment\">#nginx表示你创建的项目的地址</span></span><br></pre></td></tr></table></figure>\n<p>接着推送就完成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br></pre></td></tr></table></figure>\n<p>然后也可以把镜像拉下来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/harbor-pull.jpg\" alt=\"pull-images\"><br>在web端我们也可以看到镜像，harbor还压缩了<br><img src=\"/images/harbor-images.jpg\" alt=\"see-pull-images\"><br><code>这里虽然完成的harbor的部署，但是始终是一个单点问题，所有接下来我们继续部署高可用harbor</code><br>使用另一台空闲机10.0.0.132安装 docker 和 docker-compose 环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh &lt;(curl -fsSL https://get.docker.com) &amp;&amp; wget -O /usr/bin/docker-compose  -P \\</span><br><span class=\"line\">/usr/bin  http://pan.alybaba.top/soft/docker-compose-linux-x86_64 \\</span><br><span class=\"line\">&amp;&amp; <span class=\"built_in\">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>harbor包和service文件我已经用scp命令拷贝过来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local &amp;&amp; <span class=\"built_in\">cd</span> /usr/local/harbor</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/hostname: reg.mydomain.com/hostname: 10.0.0.132/&#x27;</span>  harbor.yml</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;&#123;\\n&quot;insecure-registries&quot;: [&quot;10.0.0.132&quot;]\\n&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class=\"line\">./install.sh  &amp;&amp; ./prepare &amp;&amp; systemctl daemon-reload</span><br><span class=\"line\">systemctl start docker harbor.service</span><br></pre></td></tr></table></figure>\n<p>那么我登上前面配置的harbor上进行高可用配置，前面的ip地址是133，它对应的仓库地址就是132<br><img src=\"/images/harbor-hight-use.jpg\" alt=\"create-target\"><br>做完这里，在 10.0.0.133  push镜像时已经可以同步到10.0.0.132了，那么132也同理配置，这里就不再过多叙述<br><img src=\"/images/harbor-hight-use-2.jpg\" alt=\"create-policy\"></p>\n<h1 id=\"部分参考资料\"><a href=\"#部分参考资料\" class=\"headerlink\" title=\"部分参考资料\"></a>部分参考资料</h1><ul>\n<li>docker-compose 官方下载地址: <a href=\"https://docs.docker.com/compose/\">https://docs.docker.com/compose/</a></li>\n<li>docker 官方文档安装地址：<a href=\"https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></li>\n<li>harbor 下载地址: <a href=\"https://github.com/vmware/harbor/releases\">https://github.com/vmware/harbor/releases</a></li>\n<li>harbor 安装文档: <a href=\"https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md\">https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h1><ul>\n<li>安装docker和docker-compose</li>\n<li>多台虚拟机…</li>\n</ul>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>10.0.0.133更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n<p>这里使用官方脚本安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh &lt;(curl -fsSL https://get.docker.com)</span><br></pre></td></tr></table></figure>\n<p>启动docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start docker</span><br></pre></td></tr></table></figure>\n<p>安装docker-compose</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /usr/bin/docker-compose -P /usr/bin  \\</span><br><span class=\"line\">https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64</span><br><span class=\"line\">或</span><br><span class=\"line\">wget -O /usr/bin/docker-compose -P /usr/bin http://pan.alybaba.top/soft/docker-compose-linux-x86_64</span><br></pre></td></tr></table></figure>\n<p>添加执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n<p>下载Harbor镜像包,这里是离线安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/goharbor/harbor/releases/download/v2.8.2/harbor-offline-installer-v2.8.2.tgz</span><br><span class=\"line\">或</span><br><span class=\"line\">wget http://pan.alybaba.top/soft/harbor-offline-installer-v2.8.2.tgz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local  </span><br></pre></td></tr></table></figure>\n<p>自签证书,创建存放自签证书目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/harbor/certs &amp;&amp; <span class=\"built_in\">cd</span>  /data/harbor/certs</span><br></pre></td></tr></table></figure>\n<p>生成 CA（证书颁发机构）私钥 (ca.key) 和证书 (ca.crt)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650  \\</span><br><span class=\"line\">-subj <span class=\"string\">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=test.com&quot;</span> \\ </span><br><span class=\"line\">-key ca.key -out ca.crt</span><br></pre></td></tr></table></figure>\n<p>生成 Harbor 服务器私钥 (harbor.test.com.key)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out harbor.test.com.key 4096</span><br></pre></td></tr></table></figure>\n<p>生成 Harbor 服务器证书签名请求 (harbor.test.com.csr)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -sha512 -new -subj <span class=\"string\">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com&quot;</span> \\</span><br><span class=\"line\">-key harbor.test.com.key -out harbor.test.com.csr</span><br></pre></td></tr></table></figure>\n<p>创建 v3.ext 文件，指定证书扩展属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; v3.ext </span></span><br><span class=\"line\"><span class=\"string\">authorityKeyIdentifier=keyid,issuer</span></span><br><span class=\"line\"><span class=\"string\">basicConstraints=CA:FALSE</span></span><br><span class=\"line\"><span class=\"string\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class=\"line\"><span class=\"string\">extendedKeyUsage = serverAuth</span></span><br><span class=\"line\"><span class=\"string\">subjectAltName = @alt_names</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[alt_names]</span></span><br><span class=\"line\"><span class=\"string\">DNS.1=test.com</span></span><br><span class=\"line\"><span class=\"string\">DNS.2=test</span></span><br><span class=\"line\"><span class=\"string\">DNS.3=harbor.test.com</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>使用 CA 证书和私钥，对之前生成的 CSR 进行签名，生成最终的 Harbor 服务器证书 (harbor.test.com.crt)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key \\</span><br><span class=\"line\">-CAcreateserial -<span class=\"keyword\">in</span> harbor.test.com.csr -out harbor.test.com.crt</span><br></pre></td></tr></table></figure>\n<p>修改 harbor 部分相关参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/harbor/harbor.yml.tmpl /usr/local/harbor/harbor.yml &amp;&amp; vim /usr/local/harbor/harbor.yml</span><br><span class=\"line\">hostname: www.test.com</span><br><span class=\"line\"><span class=\"comment\">#这里需要修改hosts文件</span></span><br><span class=\"line\">    certificate: /you/path/harbor.test.com.crt</span><br><span class=\"line\">    private_key: /you/path/harbor.test.com.key</span><br><span class=\"line\"><span class=\"comment\">#你的证书和私钥存放的位置</span></span><br><span class=\"line\">harbor_admin_password: Harbor12345</span><br><span class=\"line\"><span class=\"comment\"># Harbor12345是登录密码，可以修改成你想要的密码，账号是admin</span></span><br><span class=\"line\"><span class=\"comment\">#这里值得注意的是，会自动修改nginx的配置文件自动跳转https</span></span><br><span class=\"line\">:wq</span><br></pre></td></tr></table></figure>\n<p><code>同时，这里要注意，因为是自签证书，浏览器访问还是会不信任，导致镜像无法推送</code><br><code>2种方法，第一，在客户端安装自签证书，第二写docker配置文件，这里就采用第二种了</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;&#123;\\n&quot;insecure-registries&quot;: [&quot;harbor.test.com&quot;]\\n&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class=\"line\"><span class=\"comment\">#意思是信任不安全的镜像仓库地址</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>启动仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/harbor  &amp;&amp; ./install.sh &amp;&amp; ./prepare &amp;&amp; docker-compose up -d</span><br><span class=\"line\"><span class=\"comment\">#这里也可以使用docker-compose -f /you/path/docker-compose.yml up -d 指定文件所在路径后台启动</span></span><br></pre></td></tr></table></figure>\n<p>写入service文件，配置自启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt; <span class=\"string\">EOF &gt; /lib/systemd/system/harbor.service </span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Harbor</span></span><br><span class=\"line\"><span class=\"string\">After=docker.service systemd-networkd.service systemd-resolved.service</span></span><br><span class=\"line\"><span class=\"string\">Requires=docker.service</span></span><br><span class=\"line\"><span class=\"string\">Documentation=http://github.com/vmware/harbor</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=simple</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">Restart=5</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml up</span></span><br><span class=\"line\"><span class=\"string\">ExecStop=/usr/bin/docker-compose -f /usr/local/harbor/docker-compose.yml down</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<p>启动harbor</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br><span class=\"line\"><span class=\"comment\">#这里要注意，前面我们用docker-compose启动过的，这里我们关闭</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl start harbor.service</span><br></pre></td></tr></table></figure>\n<p>linux登录仓库,输出Login Succeeded则成功，如出现其他报错，请检查日志或者报错原因</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login -u admin -p Harbor12345 harbor.test.com</span><br><span class=\"line\"><span class=\"comment\">#这里可以使用本机，也可以使用客户端，记得添加hosts解析以及docker信任配置</span></span><br></pre></td></tr></table></figure>\n<p>接下来我们去网页端登录看看,可以看到还是提示不安全，不交钱就是这样<br><img src=\"/images/harbor-login.jpg\" alt=\"logi-page\"><br>登录进去创建一个项目,我这边已经创建了<br><img src=\"/images/harbor-create.jpg\" alt=\"create-project\"><br>然后我们就来推送一个镜像试试，首先看看有什么镜像<br><img src=\"/images/harbor-docker-images.jpg\" alt=\"see-what-we-got\"><br><code>可以看到，我已经操作了一边。</code><br>首先重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag alpine-nginx:1.24.0-v3  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br><span class=\"line\"><span class=\"comment\">#harbor.test.com表示harbor仓库地址</span></span><br><span class=\"line\"><span class=\"comment\">#nginx表示你创建的项目的地址</span></span><br></pre></td></tr></table></figure>\n<p>接着推送就完成了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br></pre></td></tr></table></figure>\n<p>然后也可以把镜像拉下来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull  harbor.test.com/nginx/alpine-nginx:1.24.0-v3</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/harbor-pull.jpg\" alt=\"pull-images\"><br>在web端我们也可以看到镜像，harbor还压缩了<br><img src=\"/images/harbor-images.jpg\" alt=\"see-pull-images\"><br><code>这里虽然完成的harbor的部署，但是始终是一个单点问题，所有接下来我们继续部署高可用harbor</code><br>使用另一台空闲机10.0.0.132安装 docker 和 docker-compose 环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh &lt;(curl -fsSL https://get.docker.com) &amp;&amp; wget -O /usr/bin/docker-compose  -P \\</span><br><span class=\"line\">/usr/bin  http://pan.alybaba.top/soft/docker-compose-linux-x86_64 \\</span><br><span class=\"line\">&amp;&amp; <span class=\"built_in\">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>harbor包和service文件我已经用scp命令拷贝过来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf harbor-offline-installer-v2.8.2.tgz -C /usr/local &amp;&amp; <span class=\"built_in\">cd</span> /usr/local/harbor</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/hostname: reg.mydomain.com/hostname: 10.0.0.132/&#x27;</span>  harbor.yml</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;&#123;\\n&quot;insecure-registries&quot;: [&quot;10.0.0.132&quot;]\\n&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class=\"line\">./install.sh  &amp;&amp; ./prepare &amp;&amp; systemctl daemon-reload</span><br><span class=\"line\">systemctl start docker harbor.service</span><br></pre></td></tr></table></figure>\n<p>那么我登上前面配置的harbor上进行高可用配置，前面的ip地址是133，它对应的仓库地址就是132<br><img src=\"/images/harbor-hight-use.jpg\" alt=\"create-target\"><br>做完这里，在 10.0.0.133  push镜像时已经可以同步到10.0.0.132了，那么132也同理配置，这里就不再过多叙述<br><img src=\"/images/harbor-hight-use-2.jpg\" alt=\"create-policy\"></p>\n<h1 id=\"部分参考资料\"><a href=\"#部分参考资料\" class=\"headerlink\" title=\"部分参考资料\"></a>部分参考资料</h1><ul>\n<li>docker-compose 官方下载地址: <a href=\"https://docs.docker.com/compose/\">https://docs.docker.com/compose/</a></li>\n<li>docker 官方文档安装地址：<a href=\"https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></li>\n<li>harbor 下载地址: <a href=\"https://github.com/vmware/harbor/releases\">https://github.com/vmware/harbor/releases</a></li>\n<li>harbor 安装文档: <a href=\"https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md\">https://github.com/goharbor/harbor/blob/master/docs/install-config/_index.md</a></li>\n</ul>\n"},{"title":"编译安装keepalived","date":"2023-06-26T13:20:02.000Z","_content":"# 部署准备\n- ubuntu22.04\n# 部署步骤\n安装相关依赖和工具\n```bash\napt update && apt -y install make gcc ipvsadm buildessential pkg-config \\\nautomake autoconf libipset-dev libnl-3-dev libnl-genl-3-dev \\\nlibssl-dev libxtables-dev libip4tc-dev libip6tc-dev libmagic-dev libsnmp-dev \\\nlibglib2.0-dev libpcre2-dev libnftnl-dev libmnl-dev libsystemd-dev\n```\n下载源码包\n```bash\nwget https://keepalived.org/software/keepalived-2.2.8.tar.gz\n```\n解压\n```bash\ntar xf keepalived-2.2.8.tar.gz && cd keepalived-2.2.8/\n```\n配置安装路径，禁用FW_MARK(可选)\n```bash\n./configure --prefix=/usr/local/keepalived --disable-fwmark\n#禁用 Keepalived 的 FW_MARK 功能，需配合防火墙打标签实现高级路由和策略\n#未禁用该选项 使用nft list ruleset 可看到会生成一个基于nftables的规则集，导致 VIP 无法正常通信\n#实际测试我无论是关闭还是未关闭，都会生成防火墙规则集\n#需注释 vrrp_strict 可使 VIP 正常通信\n#./configure 可用 --help 选项查看其他编译选项\n```\n编译安装\n```bash\nmake && make install\n```\n拷贝 service 文件\n```bash\ncp -a /root/keepalived-2.2.8/keepalived/keepalived.service /lib/systemd/system/\n```\n拷贝 conf 文件\n```bash\nmv  /usr/local/keepalived/etc/keepalived/keepalived.conf.sample  /usr/local/keepalived/etc/keepalived/keepalived.conf\n```\n启动\n```bash\nsystemctl damon-reload  &&  systemctl enable --now keepalived\n```\n查看版本和编译相关参数，这里可添加路径到默认 PATH ，或软链接\n```bash\n/usr/local/keepalived/sbin/keepalived -v\n```\n查看相关参考手册\n```bash\nman /usr/local/keepalived/share/man/man1/genhash.1\n#keepalived 命令行工具手册页\nman /usr/local/keepalived/share/man/man5/keepalived.conf.5\n#keepalived conf配置手册页\nman /usr/local/keepalived/share/man/man8/keepalived.8\n#keepalived 系统管理员手册\n```\n# 参考资料\n- https://keepalived.org/doc/installing_keepalived.html\n","source":"_posts/keeplived.md","raw":"---\ntitle: 编译安装keepalived\ndate: 2023-06-26 21:20:02\ntags:\n---\n# 部署准备\n- ubuntu22.04\n# 部署步骤\n安装相关依赖和工具\n```bash\napt update && apt -y install make gcc ipvsadm buildessential pkg-config \\\nautomake autoconf libipset-dev libnl-3-dev libnl-genl-3-dev \\\nlibssl-dev libxtables-dev libip4tc-dev libip6tc-dev libmagic-dev libsnmp-dev \\\nlibglib2.0-dev libpcre2-dev libnftnl-dev libmnl-dev libsystemd-dev\n```\n下载源码包\n```bash\nwget https://keepalived.org/software/keepalived-2.2.8.tar.gz\n```\n解压\n```bash\ntar xf keepalived-2.2.8.tar.gz && cd keepalived-2.2.8/\n```\n配置安装路径，禁用FW_MARK(可选)\n```bash\n./configure --prefix=/usr/local/keepalived --disable-fwmark\n#禁用 Keepalived 的 FW_MARK 功能，需配合防火墙打标签实现高级路由和策略\n#未禁用该选项 使用nft list ruleset 可看到会生成一个基于nftables的规则集，导致 VIP 无法正常通信\n#实际测试我无论是关闭还是未关闭，都会生成防火墙规则集\n#需注释 vrrp_strict 可使 VIP 正常通信\n#./configure 可用 --help 选项查看其他编译选项\n```\n编译安装\n```bash\nmake && make install\n```\n拷贝 service 文件\n```bash\ncp -a /root/keepalived-2.2.8/keepalived/keepalived.service /lib/systemd/system/\n```\n拷贝 conf 文件\n```bash\nmv  /usr/local/keepalived/etc/keepalived/keepalived.conf.sample  /usr/local/keepalived/etc/keepalived/keepalived.conf\n```\n启动\n```bash\nsystemctl damon-reload  &&  systemctl enable --now keepalived\n```\n查看版本和编译相关参数，这里可添加路径到默认 PATH ，或软链接\n```bash\n/usr/local/keepalived/sbin/keepalived -v\n```\n查看相关参考手册\n```bash\nman /usr/local/keepalived/share/man/man1/genhash.1\n#keepalived 命令行工具手册页\nman /usr/local/keepalived/share/man/man5/keepalived.conf.5\n#keepalived conf配置手册页\nman /usr/local/keepalived/share/man/man8/keepalived.8\n#keepalived 系统管理员手册\n```\n# 参考资料\n- https://keepalived.org/doc/installing_keepalived.html\n","slug":"keeplived","published":1,"updated":"2023-06-26T13:28:29.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5doq00078x8f1iq54hgn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h1><ul>\n<li>ubuntu22.04</li>\n</ul>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>安装相关依赖和工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt -y install make gcc ipvsadm buildessential pkg-config \\</span><br><span class=\"line\">automake autoconf libipset-dev libnl-3-dev libnl-genl-3-dev \\</span><br><span class=\"line\">libssl-dev libxtables-dev libip4tc-dev libip6tc-dev libmagic-dev libsnmp-dev \\</span><br><span class=\"line\">libglib2.0-dev libpcre2-dev libnftnl-dev libmnl-dev libsystemd-dev</span><br></pre></td></tr></table></figure>\n<p>下载源码包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://keepalived.org/software/keepalived-2.2.8.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf keepalived-2.2.8.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> keepalived-2.2.8/</span><br></pre></td></tr></table></figure>\n<p>配置安装路径，禁用FW_MARK(可选)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/keepalived --disable-fwmark</span><br><span class=\"line\"><span class=\"comment\">#禁用 Keepalived 的 FW_MARK 功能，需配合防火墙打标签实现高级路由和策略</span></span><br><span class=\"line\"><span class=\"comment\">#未禁用该选项 使用nft list ruleset 可看到会生成一个基于nftables的规则集，导致 VIP 无法正常通信</span></span><br><span class=\"line\"><span class=\"comment\">#实际测试我无论是关闭还是未关闭，都会生成防火墙规则集</span></span><br><span class=\"line\"><span class=\"comment\">#需注释 vrrp_strict 可使 VIP 正常通信</span></span><br><span class=\"line\"><span class=\"comment\">#./configure 可用 --help 选项查看其他编译选项</span></span><br></pre></td></tr></table></figure>\n<p>编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>拷贝 service 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -a /root/keepalived-2.2.8/keepalived/keepalived.service /lib/systemd/system/</span><br></pre></td></tr></table></figure>\n<p>拷贝 conf 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span>  /usr/local/keepalived/etc/keepalived/keepalived.conf.sample  /usr/local/keepalived/etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>\n<p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl damon-reload  &amp;&amp;  systemctl <span class=\"built_in\">enable</span> --now keepalived</span><br></pre></td></tr></table></figure>\n<p>查看版本和编译相关参数，这里可添加路径到默认 PATH ，或软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/keepalived/sbin/keepalived -v</span><br></pre></td></tr></table></figure>\n<p>查看相关参考手册</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man /usr/local/keepalived/share/man/man1/genhash.1</span><br><span class=\"line\"><span class=\"comment\">#keepalived 命令行工具手册页</span></span><br><span class=\"line\">man /usr/local/keepalived/share/man/man5/keepalived.conf.5</span><br><span class=\"line\"><span class=\"comment\">#keepalived conf配置手册页</span></span><br><span class=\"line\">man /usr/local/keepalived/share/man/man8/keepalived.8</span><br><span class=\"line\"><span class=\"comment\">#keepalived 系统管理员手册</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://keepalived.org/doc/installing_keepalived.html\">https://keepalived.org/doc/installing_keepalived.html</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"部署准备\"><a href=\"#部署准备\" class=\"headerlink\" title=\"部署准备\"></a>部署准备</h1><ul>\n<li>ubuntu22.04</li>\n</ul>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>安装相关依赖和工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt -y install make gcc ipvsadm buildessential pkg-config \\</span><br><span class=\"line\">automake autoconf libipset-dev libnl-3-dev libnl-genl-3-dev \\</span><br><span class=\"line\">libssl-dev libxtables-dev libip4tc-dev libip6tc-dev libmagic-dev libsnmp-dev \\</span><br><span class=\"line\">libglib2.0-dev libpcre2-dev libnftnl-dev libmnl-dev libsystemd-dev</span><br></pre></td></tr></table></figure>\n<p>下载源码包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://keepalived.org/software/keepalived-2.2.8.tar.gz</span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf keepalived-2.2.8.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> keepalived-2.2.8/</span><br></pre></td></tr></table></figure>\n<p>配置安装路径，禁用FW_MARK(可选)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/keepalived --disable-fwmark</span><br><span class=\"line\"><span class=\"comment\">#禁用 Keepalived 的 FW_MARK 功能，需配合防火墙打标签实现高级路由和策略</span></span><br><span class=\"line\"><span class=\"comment\">#未禁用该选项 使用nft list ruleset 可看到会生成一个基于nftables的规则集，导致 VIP 无法正常通信</span></span><br><span class=\"line\"><span class=\"comment\">#实际测试我无论是关闭还是未关闭，都会生成防火墙规则集</span></span><br><span class=\"line\"><span class=\"comment\">#需注释 vrrp_strict 可使 VIP 正常通信</span></span><br><span class=\"line\"><span class=\"comment\">#./configure 可用 --help 选项查看其他编译选项</span></span><br></pre></td></tr></table></figure>\n<p>编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>拷贝 service 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -a /root/keepalived-2.2.8/keepalived/keepalived.service /lib/systemd/system/</span><br></pre></td></tr></table></figure>\n<p>拷贝 conf 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span>  /usr/local/keepalived/etc/keepalived/keepalived.conf.sample  /usr/local/keepalived/etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>\n<p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl damon-reload  &amp;&amp;  systemctl <span class=\"built_in\">enable</span> --now keepalived</span><br></pre></td></tr></table></figure>\n<p>查看版本和编译相关参数，这里可添加路径到默认 PATH ，或软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/keepalived/sbin/keepalived -v</span><br></pre></td></tr></table></figure>\n<p>查看相关参考手册</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man /usr/local/keepalived/share/man/man1/genhash.1</span><br><span class=\"line\"><span class=\"comment\">#keepalived 命令行工具手册页</span></span><br><span class=\"line\">man /usr/local/keepalived/share/man/man5/keepalived.conf.5</span><br><span class=\"line\"><span class=\"comment\">#keepalived conf配置手册页</span></span><br><span class=\"line\">man /usr/local/keepalived/share/man/man8/keepalived.8</span><br><span class=\"line\"><span class=\"comment\">#keepalived 系统管理员手册</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://keepalived.org/doc/installing_keepalived.html\">https://keepalived.org/doc/installing_keepalived.html</a></li>\n</ul>\n"},{"title":"简单使用kvm","date":"2023-06-08T07:36:42.000Z","_content":"\nKVM是一种开源的虚拟化技术，它是基于Linux内核的虚拟化解决方案，全称是Kernel-based Virtual Machine。KVM利用Linux内核的虚拟化扩展，将物理主机转变为可以运行多个虚拟机的虚拟化平台。那么这里我将使用centos和ubuntu来进行简单相关部署\n`ubuntu 22.04部署步骤`\n安装相关软件,虚拟机需开启虚拟化,我这里给的内存和核心都为8\n```bash\napt -y install qemu-kvm virt-manager libvirt-daemon-system cockpit cockpit-machines  bridge-utils libosinfo-bin\n```\n开机自启\n```bash\nsystemctl enble --now libvirtd.service\n#开源的虚拟化管理守护进程，用于支持多种虚拟化技术，包括 KVM、QEMU、Xen、LXC 等。\n```\nweb管理界面自启\n```bash\nsystemctl enable --now  cockpit\nsystemctl status libvirtd.service\nbrctl show\n#这里是查看网桥信息，该命令可添加，删除网桥，默认kvm是桥接了一个virbr0的网桥\n```\n这里使用virt-manager\n```bash\nexport DISPLAY=10.0.0.1:0.0\n#0.0为xmanager，这里我已经安装并打开了xmanager passive\n```\n打开xmanager\n```bash\nvirt-manager\n```\n![X-manager](/images/xmanager-ok.jpg)\n乱码请选择英文\n```bash\nlocalctl set-locale LANG=en-US.UTF-8\n```\n创建目录\n```bash\nmkdir /data/iso && cd /data/iso\n```\n安装windows\n```bash\nvirt-install \\\n--virt-type=kvm \\\n--name win2016 \\\n--ram 4096 \\\n--vcpus 4 \\\n--os-variant=win2k16 \\\n#注意，这里是根据libosinfo-bin | grep win查看到的\n--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\\n--network=bridge=virbr0,model=virtio \\\n--graphics vnc,listen=0.0.0.0 --noautoconsole \\\n--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2\n```\n进入控制台\n```bash\nvirt-manager\n#这里报错请export DISPLAY=你和虚拟机网卡的网关:0.0\n```\n然后一直点下一步，直到这里，因为默认是不支持windows的virtio\n![缺少驱动](/images/win-1.jpg)\n\n下载驱动\n```bash\nwget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso\n```\n然后重新来...记得删除或者暂停改个名也行\n```bash\nvirt-install \\\n--virt-type=kvm \\\n--name win2016 \\\n--ram 4096 \\\n--vcpus 4 \\\n--os-variant=win2k16 \\\n--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\\n--network=bridge=virbr0,model=virtio \\\n--graphics vnc,listen=0.0.0.0 --noautoconsole \\\n--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2 \\\n--disk path=/data/iso/virtio-win-0.1.229.iso,device=cdrom\n#这里就是下载的驱动，关联一下\n```\n可以看到已经加载的原镜像和驱动\n![成功加载](/images/win-2.jpg)\n选择加载驱动程序\n![选择驱动](/images/win-3.jpg)\n选择2016，下一步\n![加载驱动](/images/win-4.jpg)\n可以看到出来磁盘了，这里我就默认了\n![配置磁盘](/images/win-5.jpg)\n等待安装...\n![安装中...](/images/win-6.jpg)\n经过N遍重启成功进入\n![安装中...](/images/win-7.jpg)\n安装网卡驱动\n![安装网卡驱动](/images/win-8.jpg)\n安装PCI驱动\n![安装PCI驱动](/images/win-9.jpg)\n其他驱动可依葫芦画瓢去挂载的驱动ISO里面去找，windows克隆可能会出现冲突，所以想要克隆可执行win自带初始化程序(谁会没事在linux克隆win？？？)\n![初始化](/images/win-10.jpg)\n打快照，点击两个个电脑图标\n![快照](/images/win-11.jpg)\n接着创建快照就行了\n![快照](/images/win-12.jpg)\n\n`rocky 8.x 部署步骤`\ncentos我就用图形web安装了\n```bash\nyum -y install qemu-kvm libvirt virt-manager virt-install  virt-viewer   cockpit  cockpit-machines\nsystemctl start --now cockpit.socket\nsystemctl start --now libvirtd\n```\n输入本机ip加port，我这里是10.0.0.200:9090\n![首页](/images/fist-page.jpg)\n然后点击虚拟机，创建虚拟机，注意，我已经创建目录，上传了镜像，所有我选择本地安装，这里还能编辑配置，点击创建并运行或者安装即可\n![创建虚拟机](/images/create-vm.jpg)\n![更多硬件自定义配置](/images/more-setting.jpg)\n点一下界面，用鼠标上下键选择安装centos7\n![安装centos7](/images/create-ok.jpg)\n做好配置好进行安装，这里安装的mini版，所以就300个,完成后请用 TAB 键选择reboot重启\n![安装centos7-1](/images/install-centos7.jpg)\n到这里就安装完成了\n![成功安装centos7](/images/install-ok.jpg)\n\n`命令行配置`\n创建一个20G的虚拟机磁盘文件，copy该文件，在图形化界面可导入\n```bash\nqemu-img create -f qcow2 /var/lib/libvirt/images/centos7.qcow2 20G\n```\n初始化配置\n```bash\nvirt-install --virt-type kvm \\\n--name centos7 \\\n--ram 1024 \\\n--vcpus 2 \\\n--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\\n--disk path=/var/lib/libvirt/images/centos7.qcow2 \\\n--network network=default \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--os-variant=centos7.0\n#注意这里os-variant应该和支持的系统相同，这里必须先创建文件才能执行该命令\n#--virt-type kvm意思是虚拟化类型为kvm\n#--name centos7 虚拟机名称为centos7，可以自定义\n#--ram 1024 内存分配1024mb，也可使用memory\n#--vcpus 2 分配cpu核数为2核\n#--cdrom= 指定光驱镜像路径为\n#--disk=  指定虚拟机磁盘镜像为\n#--network network=default 指定网络为系统默认\n#--graphics vnc,listen=0.0.0.0 指定虚拟机使用 VNC 图形界面，并监听所有网络接口。\n#--noautoconsole 不自动打开虚拟机的控制台\n#--os-variant=centos7.0 指定虚拟机的操作系统为 CentOS 7\n```\n或者指定虚拟机磁盘文件一步到位\n```bash\nvirt-install --virt-type kvm \\\n--name centos7 \\\n--ram 1024 \\\n--vcpus 2 \\\n--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\\n--disk path=/var/lib/libvirt/images/centos7.qcow2,size=10,format=qcow2,bus=virtio \\\n--network network=default \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--os-variant=centos7.0\n#size=10,format=qcow2,bus=virtio,size=10为虚拟磁盘文件为10G，格式为qcow2，总线为virtio\n```\n`克隆机器`\n方法1，复制已经安装的虚拟机磁盘文件\n```bash\ncp -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2\n```\n在图形化界面选择导入\n![导入复制的虚拟机磁盘文件](/images/clone-1.jpg)\n指定路径，选择操作系统\n![继续操作](/images/clone-2.jpg)\n配置cpu和ram\n![配置硬件](/images/clone-3.jpg)\n这里我改个名\n![修改虚拟机名称](/images/clone-4.jpg)\n然后完成了\n![克隆完成](/images/clone-5.jpg)\n\n方法2,复制虚拟机磁盘文件，注意前面的复制我删了\n```bash\ncp -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2\n```\n命令行指定克隆机配置\n```bash\nvirt-install --virt-type kvm \\\n--name centos7-2 \\\n--ram 1024 --vcpus 2 \\\n--disk path=/var/lib/libvirt/images/centos7-2.qcow2,bus=virtio \\\n--network network=default,model=virtio \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--autostart \\\n--boot hd\n#--network network=default,model=virtio 使用virtio模型\n#--autostart 虚拟机启动时自动启动\n#--boot hd 启动顺序为从硬盘启动\n```\n然后在控制台也可以看见了，直接双击打开就ok\n![命令行克隆](/images/clone-6.jpg)\n\n方法3,基于现有虚拟机克隆\n```bash\nvirt-clone -o centos7  -f /var/lib/libvirt/images/centos7-2.qcow2 -n centos7-2\n#-o centos7 意思是根据现有虚拟机名称进行克隆\n#-f /var/lib/libvirt/images/centos7-2.qcow2 新虚拟机磁盘文件的路径和名称\n#-n centos7-2 新虚拟机的名称\n#这里要注意的是，被克隆的虚拟机需要关机才行，不然会报错。然后克隆出来注意IP\n#可写脚本批量创建\n```\n部分参考链接和术语解释\n- [https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md](https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md)\n- [https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/](https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/)\n- [https://www.linux-kvm.org](https://www.linux-kvm.org)\n- QEMU-KVM 是一种开源的虚拟化解决方案，结合了QEMU和KVM两个组件，用于创建和管理虚拟机\n- virt-manager 是一个图形化的虚拟机管理工具，用于管理KVM和QEMU虚拟化环境。\n- libvirt 是一个开源的虚拟化管理工具，它提供了一个统一的接口和工具集，用于管理各种虚拟化平台（如KVM、QEMU、Xen等）上的虚拟机和虚拟化资源。\n- Cockpit 是一个用于管理Linux服务器的图形化Web界面工具\n- Cockpit Machines（也称为Virtual Machines）是Cockpit的一个插件，它提供了一个图形化的界面来管理和操作虚拟机。\n- Bridge-utils 是一个用于 Linux 系统的网络管理工具，它提供了创建和管理网络桥接的功能。\n- libosinfo-bin 是一个用于操作操作系统信息库（OS information database）的命令行工具。\n","source":"_posts/kvm.md","raw":"---\ntitle: 简单使用kvm\ndate: 2023-06-08 15:36:42\ntags:\n---\n\nKVM是一种开源的虚拟化技术，它是基于Linux内核的虚拟化解决方案，全称是Kernel-based Virtual Machine。KVM利用Linux内核的虚拟化扩展，将物理主机转变为可以运行多个虚拟机的虚拟化平台。那么这里我将使用centos和ubuntu来进行简单相关部署\n`ubuntu 22.04部署步骤`\n安装相关软件,虚拟机需开启虚拟化,我这里给的内存和核心都为8\n```bash\napt -y install qemu-kvm virt-manager libvirt-daemon-system cockpit cockpit-machines  bridge-utils libosinfo-bin\n```\n开机自启\n```bash\nsystemctl enble --now libvirtd.service\n#开源的虚拟化管理守护进程，用于支持多种虚拟化技术，包括 KVM、QEMU、Xen、LXC 等。\n```\nweb管理界面自启\n```bash\nsystemctl enable --now  cockpit\nsystemctl status libvirtd.service\nbrctl show\n#这里是查看网桥信息，该命令可添加，删除网桥，默认kvm是桥接了一个virbr0的网桥\n```\n这里使用virt-manager\n```bash\nexport DISPLAY=10.0.0.1:0.0\n#0.0为xmanager，这里我已经安装并打开了xmanager passive\n```\n打开xmanager\n```bash\nvirt-manager\n```\n![X-manager](/images/xmanager-ok.jpg)\n乱码请选择英文\n```bash\nlocalctl set-locale LANG=en-US.UTF-8\n```\n创建目录\n```bash\nmkdir /data/iso && cd /data/iso\n```\n安装windows\n```bash\nvirt-install \\\n--virt-type=kvm \\\n--name win2016 \\\n--ram 4096 \\\n--vcpus 4 \\\n--os-variant=win2k16 \\\n#注意，这里是根据libosinfo-bin | grep win查看到的\n--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\\n--network=bridge=virbr0,model=virtio \\\n--graphics vnc,listen=0.0.0.0 --noautoconsole \\\n--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2\n```\n进入控制台\n```bash\nvirt-manager\n#这里报错请export DISPLAY=你和虚拟机网卡的网关:0.0\n```\n然后一直点下一步，直到这里，因为默认是不支持windows的virtio\n![缺少驱动](/images/win-1.jpg)\n\n下载驱动\n```bash\nwget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso\n```\n然后重新来...记得删除或者暂停改个名也行\n```bash\nvirt-install \\\n--virt-type=kvm \\\n--name win2016 \\\n--ram 4096 \\\n--vcpus 4 \\\n--os-variant=win2k16 \\\n--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\\n--network=bridge=virbr0,model=virtio \\\n--graphics vnc,listen=0.0.0.0 --noautoconsole \\\n--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2 \\\n--disk path=/data/iso/virtio-win-0.1.229.iso,device=cdrom\n#这里就是下载的驱动，关联一下\n```\n可以看到已经加载的原镜像和驱动\n![成功加载](/images/win-2.jpg)\n选择加载驱动程序\n![选择驱动](/images/win-3.jpg)\n选择2016，下一步\n![加载驱动](/images/win-4.jpg)\n可以看到出来磁盘了，这里我就默认了\n![配置磁盘](/images/win-5.jpg)\n等待安装...\n![安装中...](/images/win-6.jpg)\n经过N遍重启成功进入\n![安装中...](/images/win-7.jpg)\n安装网卡驱动\n![安装网卡驱动](/images/win-8.jpg)\n安装PCI驱动\n![安装PCI驱动](/images/win-9.jpg)\n其他驱动可依葫芦画瓢去挂载的驱动ISO里面去找，windows克隆可能会出现冲突，所以想要克隆可执行win自带初始化程序(谁会没事在linux克隆win？？？)\n![初始化](/images/win-10.jpg)\n打快照，点击两个个电脑图标\n![快照](/images/win-11.jpg)\n接着创建快照就行了\n![快照](/images/win-12.jpg)\n\n`rocky 8.x 部署步骤`\ncentos我就用图形web安装了\n```bash\nyum -y install qemu-kvm libvirt virt-manager virt-install  virt-viewer   cockpit  cockpit-machines\nsystemctl start --now cockpit.socket\nsystemctl start --now libvirtd\n```\n输入本机ip加port，我这里是10.0.0.200:9090\n![首页](/images/fist-page.jpg)\n然后点击虚拟机，创建虚拟机，注意，我已经创建目录，上传了镜像，所有我选择本地安装，这里还能编辑配置，点击创建并运行或者安装即可\n![创建虚拟机](/images/create-vm.jpg)\n![更多硬件自定义配置](/images/more-setting.jpg)\n点一下界面，用鼠标上下键选择安装centos7\n![安装centos7](/images/create-ok.jpg)\n做好配置好进行安装，这里安装的mini版，所以就300个,完成后请用 TAB 键选择reboot重启\n![安装centos7-1](/images/install-centos7.jpg)\n到这里就安装完成了\n![成功安装centos7](/images/install-ok.jpg)\n\n`命令行配置`\n创建一个20G的虚拟机磁盘文件，copy该文件，在图形化界面可导入\n```bash\nqemu-img create -f qcow2 /var/lib/libvirt/images/centos7.qcow2 20G\n```\n初始化配置\n```bash\nvirt-install --virt-type kvm \\\n--name centos7 \\\n--ram 1024 \\\n--vcpus 2 \\\n--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\\n--disk path=/var/lib/libvirt/images/centos7.qcow2 \\\n--network network=default \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--os-variant=centos7.0\n#注意这里os-variant应该和支持的系统相同，这里必须先创建文件才能执行该命令\n#--virt-type kvm意思是虚拟化类型为kvm\n#--name centos7 虚拟机名称为centos7，可以自定义\n#--ram 1024 内存分配1024mb，也可使用memory\n#--vcpus 2 分配cpu核数为2核\n#--cdrom= 指定光驱镜像路径为\n#--disk=  指定虚拟机磁盘镜像为\n#--network network=default 指定网络为系统默认\n#--graphics vnc,listen=0.0.0.0 指定虚拟机使用 VNC 图形界面，并监听所有网络接口。\n#--noautoconsole 不自动打开虚拟机的控制台\n#--os-variant=centos7.0 指定虚拟机的操作系统为 CentOS 7\n```\n或者指定虚拟机磁盘文件一步到位\n```bash\nvirt-install --virt-type kvm \\\n--name centos7 \\\n--ram 1024 \\\n--vcpus 2 \\\n--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\\n--disk path=/var/lib/libvirt/images/centos7.qcow2,size=10,format=qcow2,bus=virtio \\\n--network network=default \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--os-variant=centos7.0\n#size=10,format=qcow2,bus=virtio,size=10为虚拟磁盘文件为10G，格式为qcow2，总线为virtio\n```\n`克隆机器`\n方法1，复制已经安装的虚拟机磁盘文件\n```bash\ncp -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2\n```\n在图形化界面选择导入\n![导入复制的虚拟机磁盘文件](/images/clone-1.jpg)\n指定路径，选择操作系统\n![继续操作](/images/clone-2.jpg)\n配置cpu和ram\n![配置硬件](/images/clone-3.jpg)\n这里我改个名\n![修改虚拟机名称](/images/clone-4.jpg)\n然后完成了\n![克隆完成](/images/clone-5.jpg)\n\n方法2,复制虚拟机磁盘文件，注意前面的复制我删了\n```bash\ncp -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2\n```\n命令行指定克隆机配置\n```bash\nvirt-install --virt-type kvm \\\n--name centos7-2 \\\n--ram 1024 --vcpus 2 \\\n--disk path=/var/lib/libvirt/images/centos7-2.qcow2,bus=virtio \\\n--network network=default,model=virtio \\\n--graphics vnc,listen=0.0.0.0 \\\n--noautoconsole \\\n--autostart \\\n--boot hd\n#--network network=default,model=virtio 使用virtio模型\n#--autostart 虚拟机启动时自动启动\n#--boot hd 启动顺序为从硬盘启动\n```\n然后在控制台也可以看见了，直接双击打开就ok\n![命令行克隆](/images/clone-6.jpg)\n\n方法3,基于现有虚拟机克隆\n```bash\nvirt-clone -o centos7  -f /var/lib/libvirt/images/centos7-2.qcow2 -n centos7-2\n#-o centos7 意思是根据现有虚拟机名称进行克隆\n#-f /var/lib/libvirt/images/centos7-2.qcow2 新虚拟机磁盘文件的路径和名称\n#-n centos7-2 新虚拟机的名称\n#这里要注意的是，被克隆的虚拟机需要关机才行，不然会报错。然后克隆出来注意IP\n#可写脚本批量创建\n```\n部分参考链接和术语解释\n- [https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md](https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md)\n- [https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/](https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/)\n- [https://www.linux-kvm.org](https://www.linux-kvm.org)\n- QEMU-KVM 是一种开源的虚拟化解决方案，结合了QEMU和KVM两个组件，用于创建和管理虚拟机\n- virt-manager 是一个图形化的虚拟机管理工具，用于管理KVM和QEMU虚拟化环境。\n- libvirt 是一个开源的虚拟化管理工具，它提供了一个统一的接口和工具集，用于管理各种虚拟化平台（如KVM、QEMU、Xen等）上的虚拟机和虚拟化资源。\n- Cockpit 是一个用于管理Linux服务器的图形化Web界面工具\n- Cockpit Machines（也称为Virtual Machines）是Cockpit的一个插件，它提供了一个图形化的界面来管理和操作虚拟机。\n- Bridge-utils 是一个用于 Linux 系统的网络管理工具，它提供了创建和管理网络桥接的功能。\n- libosinfo-bin 是一个用于操作操作系统信息库（OS information database）的命令行工具。\n","slug":"kvm","published":1,"updated":"2023-06-08T11:56:29.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dou00088x8f4zu4a233","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>KVM是一种开源的虚拟化技术，它是基于Linux内核的虚拟化解决方案，全称是Kernel-based Virtual Machine。KVM利用Linux内核的虚拟化扩展，将物理主机转变为可以运行多个虚拟机的虚拟化平台。那么这里我将使用centos和ubuntu来进行简单相关部署<br><code>ubuntu 22.04部署步骤</code><br>安装相关软件,虚拟机需开启虚拟化,我这里给的内存和核心都为8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install qemu-kvm virt-manager libvirt-daemon-system cockpit cockpit-machines  bridge-utils libosinfo-bin</span><br></pre></td></tr></table></figure>\n<p>开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enble --now libvirtd.service</span><br><span class=\"line\"><span class=\"comment\">#开源的虚拟化管理守护进程，用于支持多种虚拟化技术，包括 KVM、QEMU、Xen、LXC 等。</span></span><br></pre></td></tr></table></figure>\n<p>web管理界面自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  cockpit</span><br><span class=\"line\">systemctl status libvirtd.service</span><br><span class=\"line\">brctl show</span><br><span class=\"line\"><span class=\"comment\">#这里是查看网桥信息，该命令可添加，删除网桥，默认kvm是桥接了一个virbr0的网桥</span></span><br></pre></td></tr></table></figure>\n<p>这里使用virt-manager</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=10.0.0.1:0.0</span><br><span class=\"line\"><span class=\"comment\">#0.0为xmanager，这里我已经安装并打开了xmanager passive</span></span><br></pre></td></tr></table></figure>\n<p>打开xmanager</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-manager</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/xmanager-ok.jpg\" alt=\"X-manager\"><br>乱码请选择英文</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localctl set-locale LANG=en-US.UTF-8</span><br></pre></td></tr></table></figure>\n<p>创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/iso &amp;&amp; <span class=\"built_in\">cd</span> /data/iso</span><br></pre></td></tr></table></figure>\n<p>安装windows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install \\</span><br><span class=\"line\">--virt-type=kvm \\</span><br><span class=\"line\">--name win2016 \\</span><br><span class=\"line\">--ram 4096 \\</span><br><span class=\"line\">--vcpus 4 \\</span><br><span class=\"line\">--os-variant=win2k16 \\</span><br><span class=\"line\"><span class=\"comment\">#注意，这里是根据libosinfo-bin | grep win查看到的</span></span><br><span class=\"line\">--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\</span><br><span class=\"line\">--network=bridge=virbr0,model=virtio \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 --noautoconsole \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2</span><br></pre></td></tr></table></figure>\n<p>进入控制台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-manager</span><br><span class=\"line\"><span class=\"comment\">#这里报错请export DISPLAY=你和虚拟机网卡的网关:0.0</span></span><br></pre></td></tr></table></figure>\n<p>然后一直点下一步，直到这里，因为默认是不支持windows的virtio<br><img src=\"/images/win-1.jpg\" alt=\"缺少驱动\"></p>\n<p>下载驱动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso</span><br></pre></td></tr></table></figure>\n<p>然后重新来…记得删除或者暂停改个名也行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install \\</span><br><span class=\"line\">--virt-type=kvm \\</span><br><span class=\"line\">--name win2016 \\</span><br><span class=\"line\">--ram 4096 \\</span><br><span class=\"line\">--vcpus 4 \\</span><br><span class=\"line\">--os-variant=win2k16 \\</span><br><span class=\"line\">--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\</span><br><span class=\"line\">--network=bridge=virbr0,model=virtio \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 --noautoconsole \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2 \\</span><br><span class=\"line\">--disk path=/data/iso/virtio-win-0.1.229.iso,device=cdrom</span><br><span class=\"line\"><span class=\"comment\">#这里就是下载的驱动，关联一下</span></span><br></pre></td></tr></table></figure>\n<p>可以看到已经加载的原镜像和驱动<br><img src=\"/images/win-2.jpg\" alt=\"成功加载\"><br>选择加载驱动程序<br><img src=\"/images/win-3.jpg\" alt=\"选择驱动\"><br>选择2016，下一步<br><img src=\"/images/win-4.jpg\" alt=\"加载驱动\"><br>可以看到出来磁盘了，这里我就默认了<br><img src=\"/images/win-5.jpg\" alt=\"配置磁盘\"><br>等待安装…<br><img src=\"/images/win-6.jpg\" alt=\"安装中...\"><br>经过N遍重启成功进入<br><img src=\"/images/win-7.jpg\" alt=\"安装中...\"><br>安装网卡驱动<br><img src=\"/images/win-8.jpg\" alt=\"安装网卡驱动\"><br>安装PCI驱动<br><img src=\"/images/win-9.jpg\" alt=\"安装PCI驱动\"><br>其他驱动可依葫芦画瓢去挂载的驱动ISO里面去找，windows克隆可能会出现冲突，所以想要克隆可执行win自带初始化程序(谁会没事在linux克隆win？？？)<br><img src=\"/images/win-10.jpg\" alt=\"初始化\"><br>打快照，点击两个个电脑图标<br><img src=\"/images/win-11.jpg\" alt=\"快照\"><br>接着创建快照就行了<br><img src=\"/images/win-12.jpg\" alt=\"快照\"></p>\n<p><code>rocky 8.x 部署步骤</code><br>centos我就用图形web安装了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install qemu-kvm libvirt virt-manager virt-install  virt-viewer   cockpit  cockpit-machines</span><br><span class=\"line\">systemctl start --now cockpit.socket</span><br><span class=\"line\">systemctl start --now libvirtd</span><br></pre></td></tr></table></figure>\n<p>输入本机ip加port，我这里是10.0.0.200:9090<br><img src=\"/images/fist-page.jpg\" alt=\"首页\"><br>然后点击虚拟机，创建虚拟机，注意，我已经创建目录，上传了镜像，所有我选择本地安装，这里还能编辑配置，点击创建并运行或者安装即可<br><img src=\"/images/create-vm.jpg\" alt=\"创建虚拟机\"><br><img src=\"/images/more-setting.jpg\" alt=\"更多硬件自定义配置\"><br>点一下界面，用鼠标上下键选择安装centos7<br><img src=\"/images/create-ok.jpg\" alt=\"安装centos7\"><br>做好配置好进行安装，这里安装的mini版，所以就300个,完成后请用 TAB 键选择reboot重启<br><img src=\"/images/install-centos7.jpg\" alt=\"安装centos7-1\"><br>到这里就安装完成了<br><img src=\"/images/install-ok.jpg\" alt=\"成功安装centos7\"></p>\n<p><code>命令行配置</code><br>创建一个20G的虚拟机磁盘文件，copy该文件，在图形化界面可导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 /var/lib/libvirt/images/centos7.qcow2 20G</span><br></pre></td></tr></table></figure>\n<p>初始化配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type kvm \\</span><br><span class=\"line\">--name centos7 \\</span><br><span class=\"line\">--ram 1024 \\</span><br><span class=\"line\">--vcpus 2 \\</span><br><span class=\"line\">--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/centos7.qcow2 \\</span><br><span class=\"line\">--network network=default \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\">--noautoconsole \\</span><br><span class=\"line\">--os-variant=centos7.0</span><br><span class=\"line\"><span class=\"comment\">#注意这里os-variant应该和支持的系统相同，这里必须先创建文件才能执行该命令</span></span><br><span class=\"line\"><span class=\"comment\">#--virt-type kvm意思是虚拟化类型为kvm</span></span><br><span class=\"line\"><span class=\"comment\">#--name centos7 虚拟机名称为centos7，可以自定义</span></span><br><span class=\"line\"><span class=\"comment\">#--ram 1024 内存分配1024mb，也可使用memory</span></span><br><span class=\"line\"><span class=\"comment\">#--vcpus 2 分配cpu核数为2核</span></span><br><span class=\"line\"><span class=\"comment\">#--cdrom= 指定光驱镜像路径为</span></span><br><span class=\"line\"><span class=\"comment\">#--disk=  指定虚拟机磁盘镜像为</span></span><br><span class=\"line\"><span class=\"comment\">#--network network=default 指定网络为系统默认</span></span><br><span class=\"line\"><span class=\"comment\">#--graphics vnc,listen=0.0.0.0 指定虚拟机使用 VNC 图形界面，并监听所有网络接口。</span></span><br><span class=\"line\"><span class=\"comment\">#--noautoconsole 不自动打开虚拟机的控制台</span></span><br><span class=\"line\"><span class=\"comment\">#--os-variant=centos7.0 指定虚拟机的操作系统为 CentOS 7</span></span><br></pre></td></tr></table></figure>\n<p>或者指定虚拟机磁盘文件一步到位</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type kvm \\</span><br><span class=\"line\">--name centos7 \\</span><br><span class=\"line\">--ram 1024 \\</span><br><span class=\"line\">--vcpus 2 \\</span><br><span class=\"line\">--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/centos7.qcow2,size=10,format=qcow2,bus=virtio \\</span><br><span class=\"line\">--network network=default \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\">--noautoconsole \\</span><br><span class=\"line\">--os-variant=centos7.0</span><br><span class=\"line\"><span class=\"comment\">#size=10,format=qcow2,bus=virtio,size=10为虚拟磁盘文件为10G，格式为qcow2，总线为virtio</span></span><br></pre></td></tr></table></figure>\n<p><code>克隆机器</code><br>方法1，复制已经安装的虚拟机磁盘文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2</span><br></pre></td></tr></table></figure>\n<p>在图形化界面选择导入<br><img src=\"/images/clone-1.jpg\" alt=\"导入复制的虚拟机磁盘文件\"><br>指定路径，选择操作系统<br><img src=\"/images/clone-2.jpg\" alt=\"继续操作\"><br>配置cpu和ram<br><img src=\"/images/clone-3.jpg\" alt=\"配置硬件\"><br>这里我改个名<br><img src=\"/images/clone-4.jpg\" alt=\"修改虚拟机名称\"><br>然后完成了<br><img src=\"/images/clone-5.jpg\" alt=\"克隆完成\"></p>\n<p>方法2,复制虚拟机磁盘文件，注意前面的复制我删了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2</span><br></pre></td></tr></table></figure>\n<p>命令行指定克隆机配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type kvm \\</span><br><span class=\"line\">--name centos7-2 \\</span><br><span class=\"line\">--ram 1024 --vcpus 2 \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/centos7-2.qcow2,bus=virtio \\</span><br><span class=\"line\">--network network=default,model=virtio \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\">--noautoconsole \\</span><br><span class=\"line\">--autostart \\</span><br><span class=\"line\">--boot hd</span><br><span class=\"line\"><span class=\"comment\">#--network network=default,model=virtio 使用virtio模型</span></span><br><span class=\"line\"><span class=\"comment\">#--autostart 虚拟机启动时自动启动</span></span><br><span class=\"line\"><span class=\"comment\">#--boot hd 启动顺序为从硬盘启动</span></span><br></pre></td></tr></table></figure>\n<p>然后在控制台也可以看见了，直接双击打开就ok<br><img src=\"/images/clone-6.jpg\" alt=\"命令行克隆\"></p>\n<p>方法3,基于现有虚拟机克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-clone -o centos7  -f /var/lib/libvirt/images/centos7-2.qcow2 -n centos7-2</span><br><span class=\"line\"><span class=\"comment\">#-o centos7 意思是根据现有虚拟机名称进行克隆</span></span><br><span class=\"line\"><span class=\"comment\">#-f /var/lib/libvirt/images/centos7-2.qcow2 新虚拟机磁盘文件的路径和名称</span></span><br><span class=\"line\"><span class=\"comment\">#-n centos7-2 新虚拟机的名称</span></span><br><span class=\"line\"><span class=\"comment\">#这里要注意的是，被克隆的虚拟机需要关机才行，不然会报错。然后克隆出来注意IP</span></span><br><span class=\"line\"><span class=\"comment\">#可写脚本批量创建</span></span><br></pre></td></tr></table></figure>\n<p>部分参考链接和术语解释</p>\n<ul>\n<li><a href=\"https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md\">https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md</a></li>\n<li><a href=\"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/\">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/</a></li>\n<li><a href=\"https://www.linux-kvm.org/\">https://www.linux-kvm.org</a></li>\n<li>QEMU-KVM 是一种开源的虚拟化解决方案，结合了QEMU和KVM两个组件，用于创建和管理虚拟机</li>\n<li>virt-manager 是一个图形化的虚拟机管理工具，用于管理KVM和QEMU虚拟化环境。</li>\n<li>libvirt 是一个开源的虚拟化管理工具，它提供了一个统一的接口和工具集，用于管理各种虚拟化平台（如KVM、QEMU、Xen等）上的虚拟机和虚拟化资源。</li>\n<li>Cockpit 是一个用于管理Linux服务器的图形化Web界面工具</li>\n<li>Cockpit Machines（也称为Virtual Machines）是Cockpit的一个插件，它提供了一个图形化的界面来管理和操作虚拟机。</li>\n<li>Bridge-utils 是一个用于 Linux 系统的网络管理工具，它提供了创建和管理网络桥接的功能。</li>\n<li>libosinfo-bin 是一个用于操作操作系统信息库（OS information database）的命令行工具。</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>KVM是一种开源的虚拟化技术，它是基于Linux内核的虚拟化解决方案，全称是Kernel-based Virtual Machine。KVM利用Linux内核的虚拟化扩展，将物理主机转变为可以运行多个虚拟机的虚拟化平台。那么这里我将使用centos和ubuntu来进行简单相关部署<br><code>ubuntu 22.04部署步骤</code><br>安装相关软件,虚拟机需开启虚拟化,我这里给的内存和核心都为8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install qemu-kvm virt-manager libvirt-daemon-system cockpit cockpit-machines  bridge-utils libosinfo-bin</span><br></pre></td></tr></table></figure>\n<p>开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enble --now libvirtd.service</span><br><span class=\"line\"><span class=\"comment\">#开源的虚拟化管理守护进程，用于支持多种虚拟化技术，包括 KVM、QEMU、Xen、LXC 等。</span></span><br></pre></td></tr></table></figure>\n<p>web管理界面自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> --now  cockpit</span><br><span class=\"line\">systemctl status libvirtd.service</span><br><span class=\"line\">brctl show</span><br><span class=\"line\"><span class=\"comment\">#这里是查看网桥信息，该命令可添加，删除网桥，默认kvm是桥接了一个virbr0的网桥</span></span><br></pre></td></tr></table></figure>\n<p>这里使用virt-manager</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=10.0.0.1:0.0</span><br><span class=\"line\"><span class=\"comment\">#0.0为xmanager，这里我已经安装并打开了xmanager passive</span></span><br></pre></td></tr></table></figure>\n<p>打开xmanager</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-manager</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/xmanager-ok.jpg\" alt=\"X-manager\"><br>乱码请选择英文</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localctl set-locale LANG=en-US.UTF-8</span><br></pre></td></tr></table></figure>\n<p>创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /data/iso &amp;&amp; <span class=\"built_in\">cd</span> /data/iso</span><br></pre></td></tr></table></figure>\n<p>安装windows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install \\</span><br><span class=\"line\">--virt-type=kvm \\</span><br><span class=\"line\">--name win2016 \\</span><br><span class=\"line\">--ram 4096 \\</span><br><span class=\"line\">--vcpus 4 \\</span><br><span class=\"line\">--os-variant=win2k16 \\</span><br><span class=\"line\"><span class=\"comment\">#注意，这里是根据libosinfo-bin | grep win查看到的</span></span><br><span class=\"line\">--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\</span><br><span class=\"line\">--network=bridge=virbr0,model=virtio \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 --noautoconsole \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2</span><br></pre></td></tr></table></figure>\n<p>进入控制台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-manager</span><br><span class=\"line\"><span class=\"comment\">#这里报错请export DISPLAY=你和虚拟机网卡的网关:0.0</span></span><br></pre></td></tr></table></figure>\n<p>然后一直点下一步，直到这里，因为默认是不支持windows的virtio<br><img src=\"/images/win-1.jpg\" alt=\"缺少驱动\"></p>\n<p>下载驱动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.229-1/virtio-win-0.1.229.iso</span><br></pre></td></tr></table></figure>\n<p>然后重新来…记得删除或者暂停改个名也行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install \\</span><br><span class=\"line\">--virt-type=kvm \\</span><br><span class=\"line\">--name win2016 \\</span><br><span class=\"line\">--ram 4096 \\</span><br><span class=\"line\">--vcpus 4 \\</span><br><span class=\"line\">--os-variant=win2k16 \\</span><br><span class=\"line\">--cdrom=/data/iso/cn_windows_server_2016_x64_dvd_9718765.iso \\</span><br><span class=\"line\">--network=bridge=virbr0,model=virtio \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 --noautoconsole \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/win2016.qcow2,size=20,bus=virtio,format=qcow2 \\</span><br><span class=\"line\">--disk path=/data/iso/virtio-win-0.1.229.iso,device=cdrom</span><br><span class=\"line\"><span class=\"comment\">#这里就是下载的驱动，关联一下</span></span><br></pre></td></tr></table></figure>\n<p>可以看到已经加载的原镜像和驱动<br><img src=\"/images/win-2.jpg\" alt=\"成功加载\"><br>选择加载驱动程序<br><img src=\"/images/win-3.jpg\" alt=\"选择驱动\"><br>选择2016，下一步<br><img src=\"/images/win-4.jpg\" alt=\"加载驱动\"><br>可以看到出来磁盘了，这里我就默认了<br><img src=\"/images/win-5.jpg\" alt=\"配置磁盘\"><br>等待安装…<br><img src=\"/images/win-6.jpg\" alt=\"安装中...\"><br>经过N遍重启成功进入<br><img src=\"/images/win-7.jpg\" alt=\"安装中...\"><br>安装网卡驱动<br><img src=\"/images/win-8.jpg\" alt=\"安装网卡驱动\"><br>安装PCI驱动<br><img src=\"/images/win-9.jpg\" alt=\"安装PCI驱动\"><br>其他驱动可依葫芦画瓢去挂载的驱动ISO里面去找，windows克隆可能会出现冲突，所以想要克隆可执行win自带初始化程序(谁会没事在linux克隆win？？？)<br><img src=\"/images/win-10.jpg\" alt=\"初始化\"><br>打快照，点击两个个电脑图标<br><img src=\"/images/win-11.jpg\" alt=\"快照\"><br>接着创建快照就行了<br><img src=\"/images/win-12.jpg\" alt=\"快照\"></p>\n<p><code>rocky 8.x 部署步骤</code><br>centos我就用图形web安装了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install qemu-kvm libvirt virt-manager virt-install  virt-viewer   cockpit  cockpit-machines</span><br><span class=\"line\">systemctl start --now cockpit.socket</span><br><span class=\"line\">systemctl start --now libvirtd</span><br></pre></td></tr></table></figure>\n<p>输入本机ip加port，我这里是10.0.0.200:9090<br><img src=\"/images/fist-page.jpg\" alt=\"首页\"><br>然后点击虚拟机，创建虚拟机，注意，我已经创建目录，上传了镜像，所有我选择本地安装，这里还能编辑配置，点击创建并运行或者安装即可<br><img src=\"/images/create-vm.jpg\" alt=\"创建虚拟机\"><br><img src=\"/images/more-setting.jpg\" alt=\"更多硬件自定义配置\"><br>点一下界面，用鼠标上下键选择安装centos7<br><img src=\"/images/create-ok.jpg\" alt=\"安装centos7\"><br>做好配置好进行安装，这里安装的mini版，所以就300个,完成后请用 TAB 键选择reboot重启<br><img src=\"/images/install-centos7.jpg\" alt=\"安装centos7-1\"><br>到这里就安装完成了<br><img src=\"/images/install-ok.jpg\" alt=\"成功安装centos7\"></p>\n<p><code>命令行配置</code><br>创建一个20G的虚拟机磁盘文件，copy该文件，在图形化界面可导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 /var/lib/libvirt/images/centos7.qcow2 20G</span><br></pre></td></tr></table></figure>\n<p>初始化配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type kvm \\</span><br><span class=\"line\">--name centos7 \\</span><br><span class=\"line\">--ram 1024 \\</span><br><span class=\"line\">--vcpus 2 \\</span><br><span class=\"line\">--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/centos7.qcow2 \\</span><br><span class=\"line\">--network network=default \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\">--noautoconsole \\</span><br><span class=\"line\">--os-variant=centos7.0</span><br><span class=\"line\"><span class=\"comment\">#注意这里os-variant应该和支持的系统相同，这里必须先创建文件才能执行该命令</span></span><br><span class=\"line\"><span class=\"comment\">#--virt-type kvm意思是虚拟化类型为kvm</span></span><br><span class=\"line\"><span class=\"comment\">#--name centos7 虚拟机名称为centos7，可以自定义</span></span><br><span class=\"line\"><span class=\"comment\">#--ram 1024 内存分配1024mb，也可使用memory</span></span><br><span class=\"line\"><span class=\"comment\">#--vcpus 2 分配cpu核数为2核</span></span><br><span class=\"line\"><span class=\"comment\">#--cdrom= 指定光驱镜像路径为</span></span><br><span class=\"line\"><span class=\"comment\">#--disk=  指定虚拟机磁盘镜像为</span></span><br><span class=\"line\"><span class=\"comment\">#--network network=default 指定网络为系统默认</span></span><br><span class=\"line\"><span class=\"comment\">#--graphics vnc,listen=0.0.0.0 指定虚拟机使用 VNC 图形界面，并监听所有网络接口。</span></span><br><span class=\"line\"><span class=\"comment\">#--noautoconsole 不自动打开虚拟机的控制台</span></span><br><span class=\"line\"><span class=\"comment\">#--os-variant=centos7.0 指定虚拟机的操作系统为 CentOS 7</span></span><br></pre></td></tr></table></figure>\n<p>或者指定虚拟机磁盘文件一步到位</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type kvm \\</span><br><span class=\"line\">--name centos7 \\</span><br><span class=\"line\">--ram 1024 \\</span><br><span class=\"line\">--vcpus 2 \\</span><br><span class=\"line\">--cdrom=/data/isos/CentOS-7-x86_64-Minimal-2009.iso \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/centos7.qcow2,size=10,format=qcow2,bus=virtio \\</span><br><span class=\"line\">--network network=default \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\">--noautoconsole \\</span><br><span class=\"line\">--os-variant=centos7.0</span><br><span class=\"line\"><span class=\"comment\">#size=10,format=qcow2,bus=virtio,size=10为虚拟磁盘文件为10G，格式为qcow2，总线为virtio</span></span><br></pre></td></tr></table></figure>\n<p><code>克隆机器</code><br>方法1，复制已经安装的虚拟机磁盘文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2</span><br></pre></td></tr></table></figure>\n<p>在图形化界面选择导入<br><img src=\"/images/clone-1.jpg\" alt=\"导入复制的虚拟机磁盘文件\"><br>指定路径，选择操作系统<br><img src=\"/images/clone-2.jpg\" alt=\"继续操作\"><br>配置cpu和ram<br><img src=\"/images/clone-3.jpg\" alt=\"配置硬件\"><br>这里我改个名<br><img src=\"/images/clone-4.jpg\" alt=\"修改虚拟机名称\"><br>然后完成了<br><img src=\"/images/clone-5.jpg\" alt=\"克隆完成\"></p>\n<p>方法2,复制虚拟机磁盘文件，注意前面的复制我删了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -a  /var/lib/libvirt/images/centos7-1.qcow2  /var/lib/libvirt/images/centos7-2.qcow2</span><br></pre></td></tr></table></figure>\n<p>命令行指定克隆机配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-install --virt-type kvm \\</span><br><span class=\"line\">--name centos7-2 \\</span><br><span class=\"line\">--ram 1024 --vcpus 2 \\</span><br><span class=\"line\">--disk path=/var/lib/libvirt/images/centos7-2.qcow2,bus=virtio \\</span><br><span class=\"line\">--network network=default,model=virtio \\</span><br><span class=\"line\">--graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\">--noautoconsole \\</span><br><span class=\"line\">--autostart \\</span><br><span class=\"line\">--boot hd</span><br><span class=\"line\"><span class=\"comment\">#--network network=default,model=virtio 使用virtio模型</span></span><br><span class=\"line\"><span class=\"comment\">#--autostart 虚拟机启动时自动启动</span></span><br><span class=\"line\"><span class=\"comment\">#--boot hd 启动顺序为从硬盘启动</span></span><br></pre></td></tr></table></figure>\n<p>然后在控制台也可以看见了，直接双击打开就ok<br><img src=\"/images/clone-6.jpg\" alt=\"命令行克隆\"></p>\n<p>方法3,基于现有虚拟机克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virt-clone -o centos7  -f /var/lib/libvirt/images/centos7-2.qcow2 -n centos7-2</span><br><span class=\"line\"><span class=\"comment\">#-o centos7 意思是根据现有虚拟机名称进行克隆</span></span><br><span class=\"line\"><span class=\"comment\">#-f /var/lib/libvirt/images/centos7-2.qcow2 新虚拟机磁盘文件的路径和名称</span></span><br><span class=\"line\"><span class=\"comment\">#-n centos7-2 新虚拟机的名称</span></span><br><span class=\"line\"><span class=\"comment\">#这里要注意的是，被克隆的虚拟机需要关机才行，不然会报错。然后克隆出来注意IP</span></span><br><span class=\"line\"><span class=\"comment\">#可写脚本批量创建</span></span><br></pre></td></tr></table></figure>\n<p>部分参考链接和术语解释</p>\n<ul>\n<li><a href=\"https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md\">https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md</a></li>\n<li><a href=\"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/\">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/</a></li>\n<li><a href=\"https://www.linux-kvm.org/\">https://www.linux-kvm.org</a></li>\n<li>QEMU-KVM 是一种开源的虚拟化解决方案，结合了QEMU和KVM两个组件，用于创建和管理虚拟机</li>\n<li>virt-manager 是一个图形化的虚拟机管理工具，用于管理KVM和QEMU虚拟化环境。</li>\n<li>libvirt 是一个开源的虚拟化管理工具，它提供了一个统一的接口和工具集，用于管理各种虚拟化平台（如KVM、QEMU、Xen等）上的虚拟机和虚拟化资源。</li>\n<li>Cockpit 是一个用于管理Linux服务器的图形化Web界面工具</li>\n<li>Cockpit Machines（也称为Virtual Machines）是Cockpit的一个插件，它提供了一个图形化的界面来管理和操作虚拟机。</li>\n<li>Bridge-utils 是一个用于 Linux 系统的网络管理工具，它提供了创建和管理网络桥接的功能。</li>\n<li>libosinfo-bin 是一个用于操作操作系统信息库（OS information database）的命令行工具。</li>\n</ul>\n"},{"title":"如何让nginx支持QUIC和HTTP3","date":"2023-05-21T13:01:00.000Z","_content":"\n# 什么是 HTTP/3 和 QUIC ？\n\n- HTTP/3 是一种基于 QUIC（Quick UDP Internet Connections）协议的 HTTP 协议版本，它是 HTTP/2 的后继者，旨在改进 Web 性能和安全性。\n- HTTP/3 与之前的 HTTP 协议有很大的不同，最明显的区别是它使用 QUIC 协议而不是 TCP 协议来传输数据。\n- QUIC 是一种由 Google 开发的协议，基于 UDP，它在保持安全性的同时提供更快的连接和更少的延迟。与 TCP 不同，QUIC 允许多个请求同时在同一连接上进行，从而减少了网络拥塞和握手延迟的影响。\n## 参考图\n![http三种协议](/images/http.png)\n\n## 那么接下来我将介绍几种常见nginx编译http3的方法\n\n## 基于谷歌boringssl编译\n```bash\n#我直接在root家目录进行的操作，请注意你们的目录\napt update && apt install build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build hgsubversion\n#安装相关依赖\napt install software-properties-common -y\nadd-apt-repository ppa:longsleep/golang-backports\napt install golang\ngo --version\n#默认源安装的go版本过低...\ngit clone  https://github.com/google/boringssl.git\n#拉取项目，国内兄弟自己找镜像站点，我服务器在国外，这玩意大的很\ncd boringssl/\nmkdir build\n#存放编译文件\ncd build/\ncmake -GNinja ..\nninja\n#这个编译非常吃内存，我服务器一G内存直接原地爆炸，最好是拉到好点配置的机子上编译好，不然真的容易爆炸。\n#我这里编译了一份，点击这里查看[openssl已编译打包好](http://pan.alybaba.top/openssl.tar.gz)\n\nhg clone -b quic https://hg.nginx.org/nginx-quic\n#hg跟git差不多\n或者wget https://hg.nginx.org/nginx-quic/archive/quic.tar.gz\ntar xf quic.tar.gz\ncd nginx-quic-8057e053480a\nnginx -V\n./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module --with-cc-opt=\"-I../boringssl/include\" --with-ld-opt=\"-L../boringssl/build/ssl -L../boringssl/build/crypto\"\n#复制自己nginx的配置，然后把http3的选项加上即可，没什么问题就接着往下编译\nmake -j$(nproc --all)\n#我用虚拟机分的8核编译，没问题的话应该会多出来一个objs的目录,里面会有一个二进制文件\ncp -af objs/nginx   /sbin/nginx \n#替换当前\nvim /etc/nginx/conf.d/http3.conf\nserver{\n        listen 443 quic reuseport;\n        listen 443 ssl http2;\n        server_name  you domain name;\n        ssl_certificate /you/path/you.pem;\n        ssl_certificate_key /you/path/you.key;\n        ssl_protocols  TLSv1.1 TLSv1.2 TLSv1.3;\n        add_header alt-svc 'h3-23=\":443\"; ma=86400';\n        #这个声明是必须的\n}\n#对了，想实现http3，必需要安装证书，推荐acme.sh或者certbot，实在不行就用openssl自签。\n\niptables -IINPUT -p udp --dport 443 -j ACCEPT\niptables -IINPUT -p tcp --dport 443 -j ACCEPT\n#最后的话去控制台防火墙开一下443的UDP端口，(ps:命令行不起作用，可能我太菜，最好还是去控制台开一下)TCP也要开一下\nnetstat -nupl\n#查看udp端口是否监听\nsystemctl restart nginx\n```\n## 基于OpenSSL的quictlc编译\n```bash\ngit clone https://github.com/quictls/openssl.git\ncd  openssl\nmkdir build\n./Configure --prefix=/root/openssl/build --openssldir=./build\n#配置路径，第一个必须要绝对路径\nmake -j$(nproc --all) && make install_dev\n#编译没问题的话，build文件夹里应该会有include和lib64的文件夹\n \ncd ../nginx-quic-8057e053480a\nnginx -V\n./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module  --with-cc-opt=\"-I /root/openssl/include\"  --with-ld-opt=\"-L /root/openssl/lib64\"\n#那么没有问题的话这里也会生成objs目录，目录下也会有二进制文件\n\n#这里有一点要注意的是他那个那个没有集成到nginx里面，所以需要把 lib64的两个库文件给复制到 /lib 目录下\ncp -a ../openssl/build/lib64/*.81.3  /lib\n#接下来参考谷歌boringssl编译\n```\n## 基于Cloudflare的quiche编译\n```bash\ncurl https://sh.rustup.rs -sSf | sh\n#安装rust\nsource ~/.profile\n#生效变量\nwget https://nginx.org/download/nginx-1.16.1.tar.gz\n#支持1.19.4\ntar xf nginx-1.16.1.tar.gz\ngit clone  https://github.com/cloudflare/quiche\ncd  nginx-1.16.1\npatch -p01 < ../quiche/nginx/nginx-1.16.patch\n#打补丁2选1，这个是官方的，版本老点\n或curl https://raw.githubusercontent.com/kn007/patch/master/nginx_with_quic.patch | patch -p1\n#实测打这个补丁在make时会报错，需要从其他版本替换一个同名c文件，我替换的是1.14.1，其他自行测试\n\ncurl https://raw.githubusercontent.com/kn007/patch/master/Enable_BoringSSL_OCSP.patch | patch -p1\n#支持 OCSP Stapling\n\n./configure 你的其他nginx模块 --with-http_v3_module --with-openssl=../quiche/quiche/deps/boringssl --with-quiche=../quiche\n#这是需要添加的项，后面两个请根据自己的路径来\nmake -j$(nproc --all)\n#接下来请参考boringssl编译\n```\n## 基于官方安装，redhat需9以上，ubuntu需22.04\n### 请参考[官网](https://quic.nginx.org/packages.html)\n\n## 下载别人编译好的二进制文件或者安装包\n\n## 测试\n```bash\nnc -z -v -u IP地址 443 \n#发送一个udp数据包\ntcpdump -i 你的网卡名 -A -s0 port 443 and udp\n#打开浏览器的开发工具，通常是F12，点击网络，刷新也可查看当前使用的网络协议\n```\n## [在线测试链接](https://http3check.net/)\n\n## 总结\n 1. ~~反正我编译不下十遍了，一直不支持，怀疑是防火墙问题...~~\n 2. 注意，QUICh还是一个相对较新的协议，在某些情况下可能与特定的网络环境不兼容。在使用QUIC时，建议测试和评估其在特定环境中的性能和兼容性，不建议生产环境使用...\n 3. 国内对UDP不是太友好，容易qos。我指的是...其实是udp不容易溯源，且难以控制，对网络安全有一定的影响。\n 4. ~~可能还有其他的安装方法，这里我就不再演示了，因为我魔怔了...~~\n 5. 总的来说，HTTP/3 的设计目标是通过减少延迟和提高性能，为 Web 应用程序提供更快、更安全和更高效的用户体验。感兴趣的可以自行尝试哈，毕竟是未来的趋势。\n\n## 参考官方文献\n- [https://quic.nginx.org/readme.html](https://quic.nginx.org/readme.html)\n- [http://nginx.org/en/docs/quic.html](http://nginx.org/en/docs/quic.html)\n- [http://nginx.org/en/docs/http/ngx_http_v3_module.html](http://nginx.org/en/docs/http/ngx_http_v3_module.html)\n\n\n","source":"_posts/nginx编译2.md","raw":"---\ntitle: 如何让nginx支持QUIC和HTTP3\ndate: 2023-05-21 21:01:00\ntags:\n---\n\n# 什么是 HTTP/3 和 QUIC ？\n\n- HTTP/3 是一种基于 QUIC（Quick UDP Internet Connections）协议的 HTTP 协议版本，它是 HTTP/2 的后继者，旨在改进 Web 性能和安全性。\n- HTTP/3 与之前的 HTTP 协议有很大的不同，最明显的区别是它使用 QUIC 协议而不是 TCP 协议来传输数据。\n- QUIC 是一种由 Google 开发的协议，基于 UDP，它在保持安全性的同时提供更快的连接和更少的延迟。与 TCP 不同，QUIC 允许多个请求同时在同一连接上进行，从而减少了网络拥塞和握手延迟的影响。\n## 参考图\n![http三种协议](/images/http.png)\n\n## 那么接下来我将介绍几种常见nginx编译http3的方法\n\n## 基于谷歌boringssl编译\n```bash\n#我直接在root家目录进行的操作，请注意你们的目录\napt update && apt install build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build hgsubversion\n#安装相关依赖\napt install software-properties-common -y\nadd-apt-repository ppa:longsleep/golang-backports\napt install golang\ngo --version\n#默认源安装的go版本过低...\ngit clone  https://github.com/google/boringssl.git\n#拉取项目，国内兄弟自己找镜像站点，我服务器在国外，这玩意大的很\ncd boringssl/\nmkdir build\n#存放编译文件\ncd build/\ncmake -GNinja ..\nninja\n#这个编译非常吃内存，我服务器一G内存直接原地爆炸，最好是拉到好点配置的机子上编译好，不然真的容易爆炸。\n#我这里编译了一份，点击这里查看[openssl已编译打包好](http://pan.alybaba.top/openssl.tar.gz)\n\nhg clone -b quic https://hg.nginx.org/nginx-quic\n#hg跟git差不多\n或者wget https://hg.nginx.org/nginx-quic/archive/quic.tar.gz\ntar xf quic.tar.gz\ncd nginx-quic-8057e053480a\nnginx -V\n./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module --with-cc-opt=\"-I../boringssl/include\" --with-ld-opt=\"-L../boringssl/build/ssl -L../boringssl/build/crypto\"\n#复制自己nginx的配置，然后把http3的选项加上即可，没什么问题就接着往下编译\nmake -j$(nproc --all)\n#我用虚拟机分的8核编译，没问题的话应该会多出来一个objs的目录,里面会有一个二进制文件\ncp -af objs/nginx   /sbin/nginx \n#替换当前\nvim /etc/nginx/conf.d/http3.conf\nserver{\n        listen 443 quic reuseport;\n        listen 443 ssl http2;\n        server_name  you domain name;\n        ssl_certificate /you/path/you.pem;\n        ssl_certificate_key /you/path/you.key;\n        ssl_protocols  TLSv1.1 TLSv1.2 TLSv1.3;\n        add_header alt-svc 'h3-23=\":443\"; ma=86400';\n        #这个声明是必须的\n}\n#对了，想实现http3，必需要安装证书，推荐acme.sh或者certbot，实在不行就用openssl自签。\n\niptables -IINPUT -p udp --dport 443 -j ACCEPT\niptables -IINPUT -p tcp --dport 443 -j ACCEPT\n#最后的话去控制台防火墙开一下443的UDP端口，(ps:命令行不起作用，可能我太菜，最好还是去控制台开一下)TCP也要开一下\nnetstat -nupl\n#查看udp端口是否监听\nsystemctl restart nginx\n```\n## 基于OpenSSL的quictlc编译\n```bash\ngit clone https://github.com/quictls/openssl.git\ncd  openssl\nmkdir build\n./Configure --prefix=/root/openssl/build --openssldir=./build\n#配置路径，第一个必须要绝对路径\nmake -j$(nproc --all) && make install_dev\n#编译没问题的话，build文件夹里应该会有include和lib64的文件夹\n \ncd ../nginx-quic-8057e053480a\nnginx -V\n./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module  --with-cc-opt=\"-I /root/openssl/include\"  --with-ld-opt=\"-L /root/openssl/lib64\"\n#那么没有问题的话这里也会生成objs目录，目录下也会有二进制文件\n\n#这里有一点要注意的是他那个那个没有集成到nginx里面，所以需要把 lib64的两个库文件给复制到 /lib 目录下\ncp -a ../openssl/build/lib64/*.81.3  /lib\n#接下来参考谷歌boringssl编译\n```\n## 基于Cloudflare的quiche编译\n```bash\ncurl https://sh.rustup.rs -sSf | sh\n#安装rust\nsource ~/.profile\n#生效变量\nwget https://nginx.org/download/nginx-1.16.1.tar.gz\n#支持1.19.4\ntar xf nginx-1.16.1.tar.gz\ngit clone  https://github.com/cloudflare/quiche\ncd  nginx-1.16.1\npatch -p01 < ../quiche/nginx/nginx-1.16.patch\n#打补丁2选1，这个是官方的，版本老点\n或curl https://raw.githubusercontent.com/kn007/patch/master/nginx_with_quic.patch | patch -p1\n#实测打这个补丁在make时会报错，需要从其他版本替换一个同名c文件，我替换的是1.14.1，其他自行测试\n\ncurl https://raw.githubusercontent.com/kn007/patch/master/Enable_BoringSSL_OCSP.patch | patch -p1\n#支持 OCSP Stapling\n\n./configure 你的其他nginx模块 --with-http_v3_module --with-openssl=../quiche/quiche/deps/boringssl --with-quiche=../quiche\n#这是需要添加的项，后面两个请根据自己的路径来\nmake -j$(nproc --all)\n#接下来请参考boringssl编译\n```\n## 基于官方安装，redhat需9以上，ubuntu需22.04\n### 请参考[官网](https://quic.nginx.org/packages.html)\n\n## 下载别人编译好的二进制文件或者安装包\n\n## 测试\n```bash\nnc -z -v -u IP地址 443 \n#发送一个udp数据包\ntcpdump -i 你的网卡名 -A -s0 port 443 and udp\n#打开浏览器的开发工具，通常是F12，点击网络，刷新也可查看当前使用的网络协议\n```\n## [在线测试链接](https://http3check.net/)\n\n## 总结\n 1. ~~反正我编译不下十遍了，一直不支持，怀疑是防火墙问题...~~\n 2. 注意，QUICh还是一个相对较新的协议，在某些情况下可能与特定的网络环境不兼容。在使用QUIC时，建议测试和评估其在特定环境中的性能和兼容性，不建议生产环境使用...\n 3. 国内对UDP不是太友好，容易qos。我指的是...其实是udp不容易溯源，且难以控制，对网络安全有一定的影响。\n 4. ~~可能还有其他的安装方法，这里我就不再演示了，因为我魔怔了...~~\n 5. 总的来说，HTTP/3 的设计目标是通过减少延迟和提高性能，为 Web 应用程序提供更快、更安全和更高效的用户体验。感兴趣的可以自行尝试哈，毕竟是未来的趋势。\n\n## 参考官方文献\n- [https://quic.nginx.org/readme.html](https://quic.nginx.org/readme.html)\n- [http://nginx.org/en/docs/quic.html](http://nginx.org/en/docs/quic.html)\n- [http://nginx.org/en/docs/http/ngx_http_v3_module.html](http://nginx.org/en/docs/http/ngx_http_v3_module.html)\n\n\n","slug":"nginx编译2","published":1,"updated":"2023-05-21T13:37:58.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dow00098x8fhvkfh63a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"什么是-HTTP-x2F-3-和-QUIC-？\"><a href=\"#什么是-HTTP-x2F-3-和-QUIC-？\" class=\"headerlink\" title=\"什么是 HTTP&#x2F;3 和 QUIC ？\"></a>什么是 HTTP&#x2F;3 和 QUIC ？</h1><ul>\n<li>HTTP&#x2F;3 是一种基于 QUIC（Quick UDP Internet Connections）协议的 HTTP 协议版本，它是 HTTP&#x2F;2 的后继者，旨在改进 Web 性能和安全性。</li>\n<li>HTTP&#x2F;3 与之前的 HTTP 协议有很大的不同，最明显的区别是它使用 QUIC 协议而不是 TCP 协议来传输数据。</li>\n<li>QUIC 是一种由 Google 开发的协议，基于 UDP，它在保持安全性的同时提供更快的连接和更少的延迟。与 TCP 不同，QUIC 允许多个请求同时在同一连接上进行，从而减少了网络拥塞和握手延迟的影响。</li>\n</ul>\n<h2 id=\"参考图\"><a href=\"#参考图\" class=\"headerlink\" title=\"参考图\"></a>参考图</h2><p><img src=\"/images/http.png\" alt=\"http三种协议\"></p>\n<h2 id=\"那么接下来我将介绍几种常见nginx编译http3的方法\"><a href=\"#那么接下来我将介绍几种常见nginx编译http3的方法\" class=\"headerlink\" title=\"那么接下来我将介绍几种常见nginx编译http3的方法\"></a>那么接下来我将介绍几种常见nginx编译http3的方法</h2><h2 id=\"基于谷歌boringssl编译\"><a href=\"#基于谷歌boringssl编译\" class=\"headerlink\" title=\"基于谷歌boringssl编译\"></a>基于谷歌boringssl编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我直接在root家目录进行的操作，请注意你们的目录</span></span><br><span class=\"line\">apt update &amp;&amp; apt install build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build hgsubversion</span><br><span class=\"line\"><span class=\"comment\">#安装相关依赖</span></span><br><span class=\"line\">apt install software-properties-common -y</span><br><span class=\"line\">add-apt-repository ppa:longsleep/golang-backports</span><br><span class=\"line\">apt install golang</span><br><span class=\"line\">go --version</span><br><span class=\"line\"><span class=\"comment\">#默认源安装的go版本过低...</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  https://github.com/google/boringssl.git</span><br><span class=\"line\"><span class=\"comment\">#拉取项目，国内兄弟自己找镜像站点，我服务器在国外，这玩意大的很</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> boringssl/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\"><span class=\"comment\">#存放编译文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> build/</span><br><span class=\"line\">cmake -GNinja ..</span><br><span class=\"line\">ninja</span><br><span class=\"line\"><span class=\"comment\">#这个编译非常吃内存，我服务器一G内存直接原地爆炸，最好是拉到好点配置的机子上编译好，不然真的容易爆炸。</span></span><br><span class=\"line\"><span class=\"comment\">#我这里编译了一份，点击这里查看[openssl已编译打包好](http://pan.alybaba.top/openssl.tar.gz)</span></span><br><span class=\"line\"></span><br><span class=\"line\">hg <span class=\"built_in\">clone</span> -b quic https://hg.nginx.org/nginx-quic</span><br><span class=\"line\"><span class=\"comment\">#hg跟git差不多</span></span><br><span class=\"line\">或者wget https://hg.nginx.org/nginx-quic/archive/quic.tar.gz</span><br><span class=\"line\">tar xf quic.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-quic-8057e053480a</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module --with-cc-opt=<span class=\"string\">&quot;-I../boringssl/include&quot;</span> --with-ld-opt=<span class=\"string\">&quot;-L../boringssl/build/ssl -L../boringssl/build/crypto&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#复制自己nginx的配置，然后把http3的选项加上即可，没什么问题就接着往下编译</span></span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span> --all)</span><br><span class=\"line\"><span class=\"comment\">#我用虚拟机分的8核编译，没问题的话应该会多出来一个objs的目录,里面会有一个二进制文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -af objs/nginx   /sbin/nginx </span><br><span class=\"line\"><span class=\"comment\">#替换当前</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/http3.conf</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 443 quic reuseport;</span><br><span class=\"line\">        listen 443 ssl http2;</span><br><span class=\"line\">        server_name  you domain name;</span><br><span class=\"line\">        ssl_certificate /you/path/you.pem;</span><br><span class=\"line\">        ssl_certificate_key /you/path/you.key;</span><br><span class=\"line\">        ssl_protocols  TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">        add_header alt-svc <span class=\"string\">&#x27;h3-23=&quot;:443&quot;; ma=86400&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">#这个声明是必须的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#对了，想实现http3，必需要安装证书，推荐acme.sh或者certbot，实在不行就用openssl自签。</span></span><br><span class=\"line\"></span><br><span class=\"line\">iptables -IINPUT -p udp --dport 443 -j ACCEPT</span><br><span class=\"line\">iptables -IINPUT -p tcp --dport 443 -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#最后的话去控制台防火墙开一下443的UDP端口，(ps:命令行不起作用，可能我太菜，最好还是去控制台开一下)TCP也要开一下</span></span><br><span class=\"line\">netstat -nupl</span><br><span class=\"line\"><span class=\"comment\">#查看udp端口是否监听</span></span><br><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于OpenSSL的quictlc编译\"><a href=\"#基于OpenSSL的quictlc编译\" class=\"headerlink\" title=\"基于OpenSSL的quictlc编译\"></a>基于OpenSSL的quictlc编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/quictls/openssl.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span>  openssl</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\">./Configure --prefix=/root/openssl/build --openssldir=./build</span><br><span class=\"line\"><span class=\"comment\">#配置路径，第一个必须要绝对路径</span></span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span> --all) &amp;&amp; make install_dev</span><br><span class=\"line\"><span class=\"comment\">#编译没问题的话，build文件夹里应该会有include和lib64的文件夹</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../nginx-quic-8057e053480a</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module  --with-cc-opt=<span class=\"string\">&quot;-I /root/openssl/include&quot;</span>  --with-ld-opt=<span class=\"string\">&quot;-L /root/openssl/lib64&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#那么没有问题的话这里也会生成objs目录，目录下也会有二进制文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#这里有一点要注意的是他那个那个没有集成到nginx里面，所以需要把 lib64的两个库文件给复制到 /lib 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a ../openssl/build/lib64/*.81.3  /lib</span><br><span class=\"line\"><span class=\"comment\">#接下来参考谷歌boringssl编译</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基于Cloudflare的quiche编译\"><a href=\"#基于Cloudflare的quiche编译\" class=\"headerlink\" title=\"基于Cloudflare的quiche编译\"></a>基于Cloudflare的quiche编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\"><span class=\"comment\">#安装rust</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.profile</span><br><span class=\"line\"><span class=\"comment\">#生效变量</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#支持1.19.4</span></span><br><span class=\"line\">tar xf nginx-1.16.1.tar.gz</span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  https://github.com/cloudflare/quiche</span><br><span class=\"line\"><span class=\"built_in\">cd</span>  nginx-1.16.1</span><br><span class=\"line\">patch -p01 &lt; ../quiche/nginx/nginx-1.16.patch</span><br><span class=\"line\"><span class=\"comment\">#打补丁2选1，这个是官方的，版本老点</span></span><br><span class=\"line\">或curl https://raw.githubusercontent.com/kn007/patch/master/nginx_with_quic.patch | patch -p1</span><br><span class=\"line\"><span class=\"comment\">#实测打这个补丁在make时会报错，需要从其他版本替换一个同名c文件，我替换的是1.14.1，其他自行测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl https://raw.githubusercontent.com/kn007/patch/master/Enable_BoringSSL_OCSP.patch | patch -p1</span><br><span class=\"line\"><span class=\"comment\">#支持 OCSP Stapling</span></span><br><span class=\"line\"></span><br><span class=\"line\">./configure 你的其他nginx模块 --with-http_v3_module --with-openssl=../quiche/quiche/deps/boringssl --with-quiche=../quiche</span><br><span class=\"line\"><span class=\"comment\">#这是需要添加的项，后面两个请根据自己的路径来</span></span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span> --all)</span><br><span class=\"line\"><span class=\"comment\">#接下来请参考boringssl编译</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基于官方安装，redhat需9以上，ubuntu需22-04\"><a href=\"#基于官方安装，redhat需9以上，ubuntu需22-04\" class=\"headerlink\" title=\"基于官方安装，redhat需9以上，ubuntu需22.04\"></a>基于官方安装，redhat需9以上，ubuntu需22.04</h2><h3 id=\"请参考官网\"><a href=\"#请参考官网\" class=\"headerlink\" title=\"请参考官网\"></a>请参考<a href=\"https://quic.nginx.org/packages.html\">官网</a></h3><h2 id=\"下载别人编译好的二进制文件或者安装包\"><a href=\"#下载别人编译好的二进制文件或者安装包\" class=\"headerlink\" title=\"下载别人编译好的二进制文件或者安装包\"></a>下载别人编译好的二进制文件或者安装包</h2><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -z -v -u IP地址 443 </span><br><span class=\"line\"><span class=\"comment\">#发送一个udp数据包</span></span><br><span class=\"line\">tcpdump -i 你的网卡名 -A -s0 port 443 and udp</span><br><span class=\"line\"><span class=\"comment\">#打开浏览器的开发工具，通常是F12，点击网络，刷新也可查看当前使用的网络协议</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在线测试链接\"><a href=\"#在线测试链接\" class=\"headerlink\" title=\"在线测试链接\"></a><a href=\"https://http3check.net/\">在线测试链接</a></h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><del>反正我编译不下十遍了，一直不支持，怀疑是防火墙问题…</del></li>\n<li>注意，QUICh还是一个相对较新的协议，在某些情况下可能与特定的网络环境不兼容。在使用QUIC时，建议测试和评估其在特定环境中的性能和兼容性，不建议生产环境使用…</li>\n<li>国内对UDP不是太友好，容易qos。我指的是…其实是udp不容易溯源，且难以控制，对网络安全有一定的影响。</li>\n<li><del>可能还有其他的安装方法，这里我就不再演示了，因为我魔怔了…</del></li>\n<li>总的来说，HTTP&#x2F;3 的设计目标是通过减少延迟和提高性能，为 Web 应用程序提供更快、更安全和更高效的用户体验。感兴趣的可以自行尝试哈，毕竟是未来的趋势。</li>\n</ol>\n<h2 id=\"参考官方文献\"><a href=\"#参考官方文献\" class=\"headerlink\" title=\"参考官方文献\"></a>参考官方文献</h2><ul>\n<li><a href=\"https://quic.nginx.org/readme.html\">https://quic.nginx.org/readme.html</a></li>\n<li><a href=\"http://nginx.org/en/docs/quic.html\">http://nginx.org/en/docs/quic.html</a></li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_v3_module.html\">http://nginx.org/en/docs/http/ngx_http_v3_module.html</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"什么是-HTTP-x2F-3-和-QUIC-？\"><a href=\"#什么是-HTTP-x2F-3-和-QUIC-？\" class=\"headerlink\" title=\"什么是 HTTP&#x2F;3 和 QUIC ？\"></a>什么是 HTTP&#x2F;3 和 QUIC ？</h1><ul>\n<li>HTTP&#x2F;3 是一种基于 QUIC（Quick UDP Internet Connections）协议的 HTTP 协议版本，它是 HTTP&#x2F;2 的后继者，旨在改进 Web 性能和安全性。</li>\n<li>HTTP&#x2F;3 与之前的 HTTP 协议有很大的不同，最明显的区别是它使用 QUIC 协议而不是 TCP 协议来传输数据。</li>\n<li>QUIC 是一种由 Google 开发的协议，基于 UDP，它在保持安全性的同时提供更快的连接和更少的延迟。与 TCP 不同，QUIC 允许多个请求同时在同一连接上进行，从而减少了网络拥塞和握手延迟的影响。</li>\n</ul>\n<h2 id=\"参考图\"><a href=\"#参考图\" class=\"headerlink\" title=\"参考图\"></a>参考图</h2><p><img src=\"/images/http.png\" alt=\"http三种协议\"></p>\n<h2 id=\"那么接下来我将介绍几种常见nginx编译http3的方法\"><a href=\"#那么接下来我将介绍几种常见nginx编译http3的方法\" class=\"headerlink\" title=\"那么接下来我将介绍几种常见nginx编译http3的方法\"></a>那么接下来我将介绍几种常见nginx编译http3的方法</h2><h2 id=\"基于谷歌boringssl编译\"><a href=\"#基于谷歌boringssl编译\" class=\"headerlink\" title=\"基于谷歌boringssl编译\"></a>基于谷歌boringssl编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我直接在root家目录进行的操作，请注意你们的目录</span></span><br><span class=\"line\">apt update &amp;&amp; apt install build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build hgsubversion</span><br><span class=\"line\"><span class=\"comment\">#安装相关依赖</span></span><br><span class=\"line\">apt install software-properties-common -y</span><br><span class=\"line\">add-apt-repository ppa:longsleep/golang-backports</span><br><span class=\"line\">apt install golang</span><br><span class=\"line\">go --version</span><br><span class=\"line\"><span class=\"comment\">#默认源安装的go版本过低...</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  https://github.com/google/boringssl.git</span><br><span class=\"line\"><span class=\"comment\">#拉取项目，国内兄弟自己找镜像站点，我服务器在国外，这玩意大的很</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> boringssl/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\"><span class=\"comment\">#存放编译文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> build/</span><br><span class=\"line\">cmake -GNinja ..</span><br><span class=\"line\">ninja</span><br><span class=\"line\"><span class=\"comment\">#这个编译非常吃内存，我服务器一G内存直接原地爆炸，最好是拉到好点配置的机子上编译好，不然真的容易爆炸。</span></span><br><span class=\"line\"><span class=\"comment\">#我这里编译了一份，点击这里查看[openssl已编译打包好](http://pan.alybaba.top/openssl.tar.gz)</span></span><br><span class=\"line\"></span><br><span class=\"line\">hg <span class=\"built_in\">clone</span> -b quic https://hg.nginx.org/nginx-quic</span><br><span class=\"line\"><span class=\"comment\">#hg跟git差不多</span></span><br><span class=\"line\">或者wget https://hg.nginx.org/nginx-quic/archive/quic.tar.gz</span><br><span class=\"line\">tar xf quic.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-quic-8057e053480a</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module --with-cc-opt=<span class=\"string\">&quot;-I../boringssl/include&quot;</span> --with-ld-opt=<span class=\"string\">&quot;-L../boringssl/build/ssl -L../boringssl/build/crypto&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#复制自己nginx的配置，然后把http3的选项加上即可，没什么问题就接着往下编译</span></span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span> --all)</span><br><span class=\"line\"><span class=\"comment\">#我用虚拟机分的8核编译，没问题的话应该会多出来一个objs的目录,里面会有一个二进制文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -af objs/nginx   /sbin/nginx </span><br><span class=\"line\"><span class=\"comment\">#替换当前</span></span><br><span class=\"line\">vim /etc/nginx/conf.d/http3.conf</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">        listen 443 quic reuseport;</span><br><span class=\"line\">        listen 443 ssl http2;</span><br><span class=\"line\">        server_name  you domain name;</span><br><span class=\"line\">        ssl_certificate /you/path/you.pem;</span><br><span class=\"line\">        ssl_certificate_key /you/path/you.key;</span><br><span class=\"line\">        ssl_protocols  TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">        add_header alt-svc <span class=\"string\">&#x27;h3-23=&quot;:443&quot;; ma=86400&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">#这个声明是必须的</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#对了，想实现http3，必需要安装证书，推荐acme.sh或者certbot，实在不行就用openssl自签。</span></span><br><span class=\"line\"></span><br><span class=\"line\">iptables -IINPUT -p udp --dport 443 -j ACCEPT</span><br><span class=\"line\">iptables -IINPUT -p tcp --dport 443 -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\">#最后的话去控制台防火墙开一下443的UDP端口，(ps:命令行不起作用，可能我太菜，最好还是去控制台开一下)TCP也要开一下</span></span><br><span class=\"line\">netstat -nupl</span><br><span class=\"line\"><span class=\"comment\">#查看udp端口是否监听</span></span><br><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于OpenSSL的quictlc编译\"><a href=\"#基于OpenSSL的quictlc编译\" class=\"headerlink\" title=\"基于OpenSSL的quictlc编译\"></a>基于OpenSSL的quictlc编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/quictls/openssl.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span>  openssl</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\">./Configure --prefix=/root/openssl/build --openssldir=./build</span><br><span class=\"line\"><span class=\"comment\">#配置路径，第一个必须要绝对路径</span></span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span> --all) &amp;&amp; make install_dev</span><br><span class=\"line\"><span class=\"comment\">#编译没问题的话，build文件夹里应该会有include和lib64的文件夹</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../nginx-quic-8057e053480a</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">./auto/configure  you nginx config  --with-http_v3_module --with-stream_quic_module  --with-cc-opt=<span class=\"string\">&quot;-I /root/openssl/include&quot;</span>  --with-ld-opt=<span class=\"string\">&quot;-L /root/openssl/lib64&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#那么没有问题的话这里也会生成objs目录，目录下也会有二进制文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#这里有一点要注意的是他那个那个没有集成到nginx里面，所以需要把 lib64的两个库文件给复制到 /lib 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -a ../openssl/build/lib64/*.81.3  /lib</span><br><span class=\"line\"><span class=\"comment\">#接下来参考谷歌boringssl编译</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基于Cloudflare的quiche编译\"><a href=\"#基于Cloudflare的quiche编译\" class=\"headerlink\" title=\"基于Cloudflare的quiche编译\"></a>基于Cloudflare的quiche编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\"><span class=\"comment\">#安装rust</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.profile</span><br><span class=\"line\"><span class=\"comment\">#生效变量</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#支持1.19.4</span></span><br><span class=\"line\">tar xf nginx-1.16.1.tar.gz</span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  https://github.com/cloudflare/quiche</span><br><span class=\"line\"><span class=\"built_in\">cd</span>  nginx-1.16.1</span><br><span class=\"line\">patch -p01 &lt; ../quiche/nginx/nginx-1.16.patch</span><br><span class=\"line\"><span class=\"comment\">#打补丁2选1，这个是官方的，版本老点</span></span><br><span class=\"line\">或curl https://raw.githubusercontent.com/kn007/patch/master/nginx_with_quic.patch | patch -p1</span><br><span class=\"line\"><span class=\"comment\">#实测打这个补丁在make时会报错，需要从其他版本替换一个同名c文件，我替换的是1.14.1，其他自行测试</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl https://raw.githubusercontent.com/kn007/patch/master/Enable_BoringSSL_OCSP.patch | patch -p1</span><br><span class=\"line\"><span class=\"comment\">#支持 OCSP Stapling</span></span><br><span class=\"line\"></span><br><span class=\"line\">./configure 你的其他nginx模块 --with-http_v3_module --with-openssl=../quiche/quiche/deps/boringssl --with-quiche=../quiche</span><br><span class=\"line\"><span class=\"comment\">#这是需要添加的项，后面两个请根据自己的路径来</span></span><br><span class=\"line\">make -j$(<span class=\"built_in\">nproc</span> --all)</span><br><span class=\"line\"><span class=\"comment\">#接下来请参考boringssl编译</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基于官方安装，redhat需9以上，ubuntu需22-04\"><a href=\"#基于官方安装，redhat需9以上，ubuntu需22-04\" class=\"headerlink\" title=\"基于官方安装，redhat需9以上，ubuntu需22.04\"></a>基于官方安装，redhat需9以上，ubuntu需22.04</h2><h3 id=\"请参考官网\"><a href=\"#请参考官网\" class=\"headerlink\" title=\"请参考官网\"></a>请参考<a href=\"https://quic.nginx.org/packages.html\">官网</a></h3><h2 id=\"下载别人编译好的二进制文件或者安装包\"><a href=\"#下载别人编译好的二进制文件或者安装包\" class=\"headerlink\" title=\"下载别人编译好的二进制文件或者安装包\"></a>下载别人编译好的二进制文件或者安装包</h2><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -z -v -u IP地址 443 </span><br><span class=\"line\"><span class=\"comment\">#发送一个udp数据包</span></span><br><span class=\"line\">tcpdump -i 你的网卡名 -A -s0 port 443 and udp</span><br><span class=\"line\"><span class=\"comment\">#打开浏览器的开发工具，通常是F12，点击网络，刷新也可查看当前使用的网络协议</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在线测试链接\"><a href=\"#在线测试链接\" class=\"headerlink\" title=\"在线测试链接\"></a><a href=\"https://http3check.net/\">在线测试链接</a></h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><del>反正我编译不下十遍了，一直不支持，怀疑是防火墙问题…</del></li>\n<li>注意，QUICh还是一个相对较新的协议，在某些情况下可能与特定的网络环境不兼容。在使用QUIC时，建议测试和评估其在特定环境中的性能和兼容性，不建议生产环境使用…</li>\n<li>国内对UDP不是太友好，容易qos。我指的是…其实是udp不容易溯源，且难以控制，对网络安全有一定的影响。</li>\n<li><del>可能还有其他的安装方法，这里我就不再演示了，因为我魔怔了…</del></li>\n<li>总的来说，HTTP&#x2F;3 的设计目标是通过减少延迟和提高性能，为 Web 应用程序提供更快、更安全和更高效的用户体验。感兴趣的可以自行尝试哈，毕竟是未来的趋势。</li>\n</ol>\n<h2 id=\"参考官方文献\"><a href=\"#参考官方文献\" class=\"headerlink\" title=\"参考官方文献\"></a>参考官方文献</h2><ul>\n<li><a href=\"https://quic.nginx.org/readme.html\">https://quic.nginx.org/readme.html</a></li>\n<li><a href=\"http://nginx.org/en/docs/quic.html\">http://nginx.org/en/docs/quic.html</a></li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_v3_module.html\">http://nginx.org/en/docs/http/ngx_http_v3_module.html</a></li>\n</ul>\n"},{"title":"Zabbix和Grafana","date":"2023-06-06T11:00:10.000Z","_content":"\n前面介绍过简单安装zabbix了，想必zabbix自带的图形化可能无法满足需要，那么今天简单介绍下使用grafana来生成zabbix的图形化界面。\n\n1. Grafana 是一个流行的开源数据可视化和监控平台，它提供了丰富的仪表盘和图表，用于可视化各种数据源的指标和日志。\n2. Grafana 可以用于各种监控和数据可视化场景，如服务器监控、应用性能监控、网络监控、物联网数据可视化等。\n3.  Grafana 提供了一个强大而灵活的平台，使用户能够通过仪表盘和图表更好地理解和分析数据。\n\n`部署步骤`\nubuntu\n```bash\napt install -y adduser libfontconfig1\n#安装添加用户，组工具和字体配置和渲染的库\n```\n下载grafana安装装包\n```bash\nwget https://dl.grafana.com/enterprise/release/grafana-enterprise_9.5.2_amd64.deb\n```\n本地安装grafana包\n```bash\ndpkg -i grafana-enterprise_9.5.2_amd64.deb\n```\nredhat\n```bash\nyum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2-1.x86_64.rpm\n#官方源安装，Appstream版本过低，这里安装最新版的\n```\n或者清华源加速\n```bash\nyum install -y https://mirrors.tuna.tsinghua.edu.cn/grafana/yum/rpm/Packages/grafana-enterprise-9.5.2-1.x86_64.rpm\n```\n使用grafana命令工具安装zabbix插件\n```bash\ngrafana-cli plugins install alexanderzobnin-zabbix-app\n#默认安装最新版\n```\n查看zabbix历史所有版本\n```bash\ngrafana-cli plugins list-versions  alexanderzobnin-zabbix-app\n```\n可根据list安装指定版本号\n```bash\ngrafana-cli plugins install alexanderzobnin-zabbix-app  版本号\n```\n查看已安装的插件,我是安装的最新版\n```bash\ngrafana-cli plugins ls\n```\n\n然后在web端Plugins启用zabbix(不想贴图了ing)\n然后去Data sources添加zabbix，修改以下三项\n```txt\nURL  http://localhost:8080/api_jsonrpc.php\nuser name  Admin\npassword   zabbix\n#我用的nginx\n#这里要注意的是，如果是apache，端口号后应增加zabbix，这里我使用IP了，域名同理\n```\n自带的面板无法加载，去[https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)下载一个\n打开链接后搜索zabbix，记住编号，或者下载json文件\n![download zabbix dashboard](/images/dashbords.jpg)\n回到web界面，点击Dashboards，最右边NEW，选择import\n![setting zabbix dashboard](/images/import-dashbords.jpg)\n可以选择本地文件上传，也可输入模板的ID号进行在线load,实质上输入ID也是下载json文件，所以没有网络的情况下，可使用其他电脑下载\n![import zabbix dashboard](/images/import-dashbords-2.jpg)\n这里我选择的load，稍等片刻加载后源选择zabbix即可。忘了说Grafana服务默认端口号为3000,如果想自定意可以按照以下操作\n```bash\nrpm -ql grafana-enterprise | grep etc\n#查看配置文件\nvim /etc/grafana/grafana.ini\n;http_port = 3000\nhttp_port = you port\n```\n最终得到以下界面，然后有些参数显示不正确，可以自定义进行编辑，这里不在过多叙述。\n![最终效果图](/images/last-image.jpg)\n参考链接\n- 官方下载链接[https://grafana.com/grafana/download](https://grafana.com/grafana/download)\n- 官方插件下载链接[https://grafana.com/grafana/plugins/](https://grafana.com/grafana/plugins/)\n- 官方面板下载链接[https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)\n- 清华源加速[https://mirrors.tuna.tsinghua.edu.cn/grafana/](https://mirrors.tuna.tsinghua.edu.cn/grafana/)\n","source":"_posts/zabbix-grafana.md","raw":"---\ntitle: Zabbix和Grafana\ndate: 2023-06-06 19:00:10\ntags:\n---\n\n前面介绍过简单安装zabbix了，想必zabbix自带的图形化可能无法满足需要，那么今天简单介绍下使用grafana来生成zabbix的图形化界面。\n\n1. Grafana 是一个流行的开源数据可视化和监控平台，它提供了丰富的仪表盘和图表，用于可视化各种数据源的指标和日志。\n2. Grafana 可以用于各种监控和数据可视化场景，如服务器监控、应用性能监控、网络监控、物联网数据可视化等。\n3.  Grafana 提供了一个强大而灵活的平台，使用户能够通过仪表盘和图表更好地理解和分析数据。\n\n`部署步骤`\nubuntu\n```bash\napt install -y adduser libfontconfig1\n#安装添加用户，组工具和字体配置和渲染的库\n```\n下载grafana安装装包\n```bash\nwget https://dl.grafana.com/enterprise/release/grafana-enterprise_9.5.2_amd64.deb\n```\n本地安装grafana包\n```bash\ndpkg -i grafana-enterprise_9.5.2_amd64.deb\n```\nredhat\n```bash\nyum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2-1.x86_64.rpm\n#官方源安装，Appstream版本过低，这里安装最新版的\n```\n或者清华源加速\n```bash\nyum install -y https://mirrors.tuna.tsinghua.edu.cn/grafana/yum/rpm/Packages/grafana-enterprise-9.5.2-1.x86_64.rpm\n```\n使用grafana命令工具安装zabbix插件\n```bash\ngrafana-cli plugins install alexanderzobnin-zabbix-app\n#默认安装最新版\n```\n查看zabbix历史所有版本\n```bash\ngrafana-cli plugins list-versions  alexanderzobnin-zabbix-app\n```\n可根据list安装指定版本号\n```bash\ngrafana-cli plugins install alexanderzobnin-zabbix-app  版本号\n```\n查看已安装的插件,我是安装的最新版\n```bash\ngrafana-cli plugins ls\n```\n\n然后在web端Plugins启用zabbix(不想贴图了ing)\n然后去Data sources添加zabbix，修改以下三项\n```txt\nURL  http://localhost:8080/api_jsonrpc.php\nuser name  Admin\npassword   zabbix\n#我用的nginx\n#这里要注意的是，如果是apache，端口号后应增加zabbix，这里我使用IP了，域名同理\n```\n自带的面板无法加载，去[https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)下载一个\n打开链接后搜索zabbix，记住编号，或者下载json文件\n![download zabbix dashboard](/images/dashbords.jpg)\n回到web界面，点击Dashboards，最右边NEW，选择import\n![setting zabbix dashboard](/images/import-dashbords.jpg)\n可以选择本地文件上传，也可输入模板的ID号进行在线load,实质上输入ID也是下载json文件，所以没有网络的情况下，可使用其他电脑下载\n![import zabbix dashboard](/images/import-dashbords-2.jpg)\n这里我选择的load，稍等片刻加载后源选择zabbix即可。忘了说Grafana服务默认端口号为3000,如果想自定意可以按照以下操作\n```bash\nrpm -ql grafana-enterprise | grep etc\n#查看配置文件\nvim /etc/grafana/grafana.ini\n;http_port = 3000\nhttp_port = you port\n```\n最终得到以下界面，然后有些参数显示不正确，可以自定义进行编辑，这里不在过多叙述。\n![最终效果图](/images/last-image.jpg)\n参考链接\n- 官方下载链接[https://grafana.com/grafana/download](https://grafana.com/grafana/download)\n- 官方插件下载链接[https://grafana.com/grafana/plugins/](https://grafana.com/grafana/plugins/)\n- 官方面板下载链接[https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)\n- 清华源加速[https://mirrors.tuna.tsinghua.edu.cn/grafana/](https://mirrors.tuna.tsinghua.edu.cn/grafana/)\n","slug":"zabbix-grafana","published":1,"updated":"2023-06-06T11:32:50.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5dox000a8x8fejojb1d0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>前面介绍过简单安装zabbix了，想必zabbix自带的图形化可能无法满足需要，那么今天简单介绍下使用grafana来生成zabbix的图形化界面。</p>\n<ol>\n<li>Grafana 是一个流行的开源数据可视化和监控平台，它提供了丰富的仪表盘和图表，用于可视化各种数据源的指标和日志。</li>\n<li>Grafana 可以用于各种监控和数据可视化场景，如服务器监控、应用性能监控、网络监控、物联网数据可视化等。</li>\n<li>Grafana 提供了一个强大而灵活的平台，使用户能够通过仪表盘和图表更好地理解和分析数据。</li>\n</ol>\n<p><code>部署步骤</code><br>ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y adduser libfontconfig1</span><br><span class=\"line\"><span class=\"comment\">#安装添加用户，组工具和字体配置和渲染的库</span></span><br></pre></td></tr></table></figure>\n<p>下载grafana安装装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.grafana.com/enterprise/release/grafana-enterprise_9.5.2_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>本地安装grafana包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i grafana-enterprise_9.5.2_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>redhat</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2-1.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\">#官方源安装，Appstream版本过低，这里安装最新版的</span></span><br></pre></td></tr></table></figure>\n<p>或者清华源加速</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y https://mirrors.tuna.tsinghua.edu.cn/grafana/yum/rpm/Packages/grafana-enterprise-9.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>使用grafana命令工具安装zabbix插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class=\"line\"><span class=\"comment\">#默认安装最新版</span></span><br></pre></td></tr></table></figure>\n<p>查看zabbix历史所有版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins list-versions  alexanderzobnin-zabbix-app</span><br></pre></td></tr></table></figure>\n<p>可根据list安装指定版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins install alexanderzobnin-zabbix-app  版本号</span><br></pre></td></tr></table></figure>\n<p>查看已安装的插件,我是安装的最新版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在web端Plugins启用zabbix(不想贴图了ing)<br>然后去Data sources添加zabbix，修改以下三项</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL  http://localhost:8080/api_jsonrpc.php</span><br><span class=\"line\">user name  Admin</span><br><span class=\"line\">password   zabbix</span><br><span class=\"line\">#我用的nginx</span><br><span class=\"line\">#这里要注意的是，如果是apache，端口号后应增加zabbix，这里我使用IP了，域名同理</span><br></pre></td></tr></table></figure>\n<p>自带的面板无法加载，去<a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a>下载一个<br>打开链接后搜索zabbix，记住编号，或者下载json文件<br><img src=\"/images/dashbords.jpg\" alt=\"download zabbix dashboard\"><br>回到web界面，点击Dashboards，最右边NEW，选择import<br><img src=\"/images/import-dashbords.jpg\" alt=\"setting zabbix dashboard\"><br>可以选择本地文件上传，也可输入模板的ID号进行在线load,实质上输入ID也是下载json文件，所以没有网络的情况下，可使用其他电脑下载<br><img src=\"/images/import-dashbords-2.jpg\" alt=\"import zabbix dashboard\"><br>这里我选择的load，稍等片刻加载后源选择zabbix即可。忘了说Grafana服务默认端口号为3000,如果想自定意可以按照以下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql grafana-enterprise | grep etc</span><br><span class=\"line\"><span class=\"comment\">#查看配置文件</span></span><br><span class=\"line\">vim /etc/grafana/grafana.ini</span><br><span class=\"line\">;http_port = 3000</span><br><span class=\"line\">http_port = you port</span><br></pre></td></tr></table></figure>\n<p>最终得到以下界面，然后有些参数显示不正确，可以自定义进行编辑，这里不在过多叙述。<br><img src=\"/images/last-image.jpg\" alt=\"最终效果图\"><br>参考链接</p>\n<ul>\n<li>官方下载链接<a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a></li>\n<li>官方插件下载链接<a href=\"https://grafana.com/grafana/plugins/\">https://grafana.com/grafana/plugins/</a></li>\n<li>官方面板下载链接<a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a></li>\n<li>清华源加速<a href=\"https://mirrors.tuna.tsinghua.edu.cn/grafana/\">https://mirrors.tuna.tsinghua.edu.cn/grafana/</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>前面介绍过简单安装zabbix了，想必zabbix自带的图形化可能无法满足需要，那么今天简单介绍下使用grafana来生成zabbix的图形化界面。</p>\n<ol>\n<li>Grafana 是一个流行的开源数据可视化和监控平台，它提供了丰富的仪表盘和图表，用于可视化各种数据源的指标和日志。</li>\n<li>Grafana 可以用于各种监控和数据可视化场景，如服务器监控、应用性能监控、网络监控、物联网数据可视化等。</li>\n<li>Grafana 提供了一个强大而灵活的平台，使用户能够通过仪表盘和图表更好地理解和分析数据。</li>\n</ol>\n<p><code>部署步骤</code><br>ubuntu</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y adduser libfontconfig1</span><br><span class=\"line\"><span class=\"comment\">#安装添加用户，组工具和字体配置和渲染的库</span></span><br></pre></td></tr></table></figure>\n<p>下载grafana安装装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.grafana.com/enterprise/release/grafana-enterprise_9.5.2_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>本地安装grafana包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i grafana-enterprise_9.5.2_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>redhat</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2-1.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\">#官方源安装，Appstream版本过低，这里安装最新版的</span></span><br></pre></td></tr></table></figure>\n<p>或者清华源加速</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y https://mirrors.tuna.tsinghua.edu.cn/grafana/yum/rpm/Packages/grafana-enterprise-9.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>使用grafana命令工具安装zabbix插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class=\"line\"><span class=\"comment\">#默认安装最新版</span></span><br></pre></td></tr></table></figure>\n<p>查看zabbix历史所有版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins list-versions  alexanderzobnin-zabbix-app</span><br></pre></td></tr></table></figure>\n<p>可根据list安装指定版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins install alexanderzobnin-zabbix-app  版本号</span><br></pre></td></tr></table></figure>\n<p>查看已安装的插件,我是安装的最新版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grafana-cli plugins <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在web端Plugins启用zabbix(不想贴图了ing)<br>然后去Data sources添加zabbix，修改以下三项</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL  http://localhost:8080/api_jsonrpc.php</span><br><span class=\"line\">user name  Admin</span><br><span class=\"line\">password   zabbix</span><br><span class=\"line\">#我用的nginx</span><br><span class=\"line\">#这里要注意的是，如果是apache，端口号后应增加zabbix，这里我使用IP了，域名同理</span><br></pre></td></tr></table></figure>\n<p>自带的面板无法加载，去<a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a>下载一个<br>打开链接后搜索zabbix，记住编号，或者下载json文件<br><img src=\"/images/dashbords.jpg\" alt=\"download zabbix dashboard\"><br>回到web界面，点击Dashboards，最右边NEW，选择import<br><img src=\"/images/import-dashbords.jpg\" alt=\"setting zabbix dashboard\"><br>可以选择本地文件上传，也可输入模板的ID号进行在线load,实质上输入ID也是下载json文件，所以没有网络的情况下，可使用其他电脑下载<br><img src=\"/images/import-dashbords-2.jpg\" alt=\"import zabbix dashboard\"><br>这里我选择的load，稍等片刻加载后源选择zabbix即可。忘了说Grafana服务默认端口号为3000,如果想自定意可以按照以下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql grafana-enterprise | grep etc</span><br><span class=\"line\"><span class=\"comment\">#查看配置文件</span></span><br><span class=\"line\">vim /etc/grafana/grafana.ini</span><br><span class=\"line\">;http_port = 3000</span><br><span class=\"line\">http_port = you port</span><br></pre></td></tr></table></figure>\n<p>最终得到以下界面，然后有些参数显示不正确，可以自定义进行编辑，这里不在过多叙述。<br><img src=\"/images/last-image.jpg\" alt=\"最终效果图\"><br>参考链接</p>\n<ul>\n<li>官方下载链接<a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a></li>\n<li>官方插件下载链接<a href=\"https://grafana.com/grafana/plugins/\">https://grafana.com/grafana/plugins/</a></li>\n<li>官方面板下载链接<a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a></li>\n<li>清华源加速<a href=\"https://mirrors.tuna.tsinghua.edu.cn/grafana/\">https://mirrors.tuna.tsinghua.edu.cn/grafana/</a></li>\n</ul>\n"},{"title":"开源监控Zabbix","date":"2023-06-01T06:06:42.000Z","_content":"\n### Zabbix 介绍\n- Zabbix 是一个企业级分布式开源监控解决方案，支持实时监控数干台服务器，虚拟机和网络设备，采集百万级监控指标，适用于任何IT基础架构、服务、应用程序和资源的解决方案\n- Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。\n### 安装配置zabbix\n### 环境准备\n##### 准备3台主机\n1. zabbix、nginx、php。我这里是ubuntu22.04，ip 10.0.0.100\n2. mysql ubutnu22.04。ip 10.0.0.130\n3. client 随意 ip 10.0.0.131\n### 部署步骤\n#### zabbix,nginx,php部署\n##### 下载安装包\n```bash\nwget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb\n```\n##### 安装源\n```bash\ndpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb\napt update\napt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent zabbix-get\n```\n##### 安装中文\n```bash\napt -y install language-pack-zh-hans\n#英文水平高略过\n```\n##### zabbix 配置文件mysql配置项目\n```bash\nvim /etc/zabbix/zabbix_server.conf\nDBHost=10.0.0.130\n#这里mysql我装在另一台主机了\nDBName=zabbix\n#数据库名\nDBUser=zabbix\n#数据库用户\nDBPassword=123456\n#数据库密码\nscp /usr/share/zabbix-sql-scripts/mysql/server.sql.gz  root@10.0.0.130:\n#把脚本复制到mysql主机上\n```\n#### mysql配置\n```bash\napt install mysql-server\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql.service\nmysql\nmysql> create database zabbix character set utf8mb4 collate utf8mb4_bin;\nmysql> create user zabbix@'10.0.0.%' identified by '123456';\nmysql> grant all privileges on zabbix.* to zabbix@'10.0.0.%';\nmysql> set global log_bin_trust_function_creators = 1;\n#用于控制在二进制日志中记录创建函数和存储过程的权限检查。当该变量的值为 1 时，MySQL 将信任具有创建函数和存储过程权限的非特权用户，允许他们创建这些对象并将其记录在二进制日志中。\nmysql> \\! zcat /root/server.sql.gz | mysql -uzabbix -p123456 -h 10.0.0.130 zabbix\n#在这里我试了很多次，发现是我创建用户只允许10网段，我使用127登不进去，这个要注意用户授权，我本机IP是130\nmysql> set global log_bin_trust_function_creators = 0;\n```\n##### 配置nginx\n```bash\nvim /etc/zabbix/nginx.conf \n        listen          8080;\n#        server_name     example.com;\n#这里我没有配置域名，80已经被另一个配置文件监听，如果要配置80，要么增加default_server，删除另一个配置文件的default_server，要么添加域名，以请求头区分访问页面。\n```\n##### 启动zabbix，配置自启动\n```bash\nsystemctl start zabbix-server zabbix-agent nginx php8.1-fpm  &&  systemctl enable zabbix-server zabbix-agent nginx php8.1-fpm\n```\n##### 替换中文\n```bash\nwin + R 输入fonts\n#随便拷贝一个字体，这里我选择的微软雅黑\ncd /usr/share/zabbix/assets/fonts\n#zabbix字体引用目录，实际是软链接\nmv graphfont.ttf graphfont.ttf.bak\n#备份原字体\ncp  msyh.ttc  graphfont.ttf\n#替换，也可-b选项\n```\n##### 登录配置\n![起始页面检测](/images/zabbix检测.jpg)\n##### web服务连接mysql，配置文件是zabbix-server连接数据库\n![连接mysql配置](/images/zabbix-mysql.jpg)\n##### 时区选择，一般是上海\n![时区选择](/images/zabbix-时区选择.jpg)\n##### 登录页面，账号是 \"Admin\" 密码是 \"zabbix\"，注意只有\"是\"，表示zabbix-server运行正常\n![首页](/images/zabbix-login.jpg)\n##### 客户端安装agent\n```bash\nwget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb\ndpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb\napt update\napt install zabbix-agent\n```\n##### 配置agent\n```bash\nServer=10.0.0.100 \n#必须指向Zabbix Server,此为必须项\nServerActive=10.0.0.100 \n#主动模式才需要指向Zabbix Server,此处无需修改\nHostname=10.0.0.131 \n#修改为当前主机的IP,主动模式才需要,此处可选\nTimeout=30 \n#建议修改此值\n```\n##### 启动agent\n```bash\nsystem enable --now zabbix-agent\n```\n##### 添加client，这里我是修改，如果是新client应为添加。\n![首页](/images/add-client.jpg)\n##### 查看client\n![客户端部分信息](/images/client-mesg.jpg)\n到这里我们就简单完成了zabbix的配置，zabbix还有很多扩展，比如自定义监控某项参数....这里不再过多叙述，其次zabbix不仅仅可以监控linux，也可以监控windows，或者是交换机，路由器等等软硬件。感兴趣可自行尝试参考官方安装教程使用\n\n##### 参考连接\n- 官方安装教程[https://www.zabbix.com/download](https://www.zabbix.com/download)\n- 官方包仓库[https://repo.zabbix.com](https://repo.zabbix.com)\n- 阿里云镜像源[(https://mirrors.aliyun.com/zabbix](https://mirrors.aliyun.com/zabbix)\n- 清华大学镜像源[https://mirrors.tuna.tsinghua.edu.cn/zabbix](https://mirrors.tuna.tsinghua.edu.cn/zabbix)\n","source":"_posts/zabbix.md","raw":"---\ntitle: 开源监控Zabbix\ndate: 2023-06-01 14:06:42\ntags:\n---\n\n### Zabbix 介绍\n- Zabbix 是一个企业级分布式开源监控解决方案，支持实时监控数干台服务器，虚拟机和网络设备，采集百万级监控指标，适用于任何IT基础架构、服务、应用程序和资源的解决方案\n- Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。\n### 安装配置zabbix\n### 环境准备\n##### 准备3台主机\n1. zabbix、nginx、php。我这里是ubuntu22.04，ip 10.0.0.100\n2. mysql ubutnu22.04。ip 10.0.0.130\n3. client 随意 ip 10.0.0.131\n### 部署步骤\n#### zabbix,nginx,php部署\n##### 下载安装包\n```bash\nwget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb\n```\n##### 安装源\n```bash\ndpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb\napt update\napt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent zabbix-get\n```\n##### 安装中文\n```bash\napt -y install language-pack-zh-hans\n#英文水平高略过\n```\n##### zabbix 配置文件mysql配置项目\n```bash\nvim /etc/zabbix/zabbix_server.conf\nDBHost=10.0.0.130\n#这里mysql我装在另一台主机了\nDBName=zabbix\n#数据库名\nDBUser=zabbix\n#数据库用户\nDBPassword=123456\n#数据库密码\nscp /usr/share/zabbix-sql-scripts/mysql/server.sql.gz  root@10.0.0.130:\n#把脚本复制到mysql主机上\n```\n#### mysql配置\n```bash\napt install mysql-server\nsed -i 's/^bind-address/#&/' /etc/mysql/mysql.conf.d/mysqld.cnf\nsystemctl start mysql.service\nmysql\nmysql> create database zabbix character set utf8mb4 collate utf8mb4_bin;\nmysql> create user zabbix@'10.0.0.%' identified by '123456';\nmysql> grant all privileges on zabbix.* to zabbix@'10.0.0.%';\nmysql> set global log_bin_trust_function_creators = 1;\n#用于控制在二进制日志中记录创建函数和存储过程的权限检查。当该变量的值为 1 时，MySQL 将信任具有创建函数和存储过程权限的非特权用户，允许他们创建这些对象并将其记录在二进制日志中。\nmysql> \\! zcat /root/server.sql.gz | mysql -uzabbix -p123456 -h 10.0.0.130 zabbix\n#在这里我试了很多次，发现是我创建用户只允许10网段，我使用127登不进去，这个要注意用户授权，我本机IP是130\nmysql> set global log_bin_trust_function_creators = 0;\n```\n##### 配置nginx\n```bash\nvim /etc/zabbix/nginx.conf \n        listen          8080;\n#        server_name     example.com;\n#这里我没有配置域名，80已经被另一个配置文件监听，如果要配置80，要么增加default_server，删除另一个配置文件的default_server，要么添加域名，以请求头区分访问页面。\n```\n##### 启动zabbix，配置自启动\n```bash\nsystemctl start zabbix-server zabbix-agent nginx php8.1-fpm  &&  systemctl enable zabbix-server zabbix-agent nginx php8.1-fpm\n```\n##### 替换中文\n```bash\nwin + R 输入fonts\n#随便拷贝一个字体，这里我选择的微软雅黑\ncd /usr/share/zabbix/assets/fonts\n#zabbix字体引用目录，实际是软链接\nmv graphfont.ttf graphfont.ttf.bak\n#备份原字体\ncp  msyh.ttc  graphfont.ttf\n#替换，也可-b选项\n```\n##### 登录配置\n![起始页面检测](/images/zabbix检测.jpg)\n##### web服务连接mysql，配置文件是zabbix-server连接数据库\n![连接mysql配置](/images/zabbix-mysql.jpg)\n##### 时区选择，一般是上海\n![时区选择](/images/zabbix-时区选择.jpg)\n##### 登录页面，账号是 \"Admin\" 密码是 \"zabbix\"，注意只有\"是\"，表示zabbix-server运行正常\n![首页](/images/zabbix-login.jpg)\n##### 客户端安装agent\n```bash\nwget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb\ndpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb\napt update\napt install zabbix-agent\n```\n##### 配置agent\n```bash\nServer=10.0.0.100 \n#必须指向Zabbix Server,此为必须项\nServerActive=10.0.0.100 \n#主动模式才需要指向Zabbix Server,此处无需修改\nHostname=10.0.0.131 \n#修改为当前主机的IP,主动模式才需要,此处可选\nTimeout=30 \n#建议修改此值\n```\n##### 启动agent\n```bash\nsystem enable --now zabbix-agent\n```\n##### 添加client，这里我是修改，如果是新client应为添加。\n![首页](/images/add-client.jpg)\n##### 查看client\n![客户端部分信息](/images/client-mesg.jpg)\n到这里我们就简单完成了zabbix的配置，zabbix还有很多扩展，比如自定义监控某项参数....这里不再过多叙述，其次zabbix不仅仅可以监控linux，也可以监控windows，或者是交换机，路由器等等软硬件。感兴趣可自行尝试参考官方安装教程使用\n\n##### 参考连接\n- 官方安装教程[https://www.zabbix.com/download](https://www.zabbix.com/download)\n- 官方包仓库[https://repo.zabbix.com](https://repo.zabbix.com)\n- 阿里云镜像源[(https://mirrors.aliyun.com/zabbix](https://mirrors.aliyun.com/zabbix)\n- 清华大学镜像源[https://mirrors.tuna.tsinghua.edu.cn/zabbix](https://mirrors.tuna.tsinghua.edu.cn/zabbix)\n","slug":"zabbix","published":1,"updated":"2023-06-02T09:34:30.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljgs5doy000b8x8f7ltofr4j","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"Zabbix-介绍\"><a href=\"#Zabbix-介绍\" class=\"headerlink\" title=\"Zabbix 介绍\"></a>Zabbix 介绍</h3><ul>\n<li>Zabbix 是一个企业级分布式开源监控解决方案，支持实时监控数干台服务器，虚拟机和网络设备，采集百万级监控指标，适用于任何IT基础架构、服务、应用程序和资源的解决方案</li>\n<li>Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</li>\n</ul>\n<h3 id=\"安装配置zabbix\"><a href=\"#安装配置zabbix\" class=\"headerlink\" title=\"安装配置zabbix\"></a>安装配置zabbix</h3><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h5 id=\"准备3台主机\"><a href=\"#准备3台主机\" class=\"headerlink\" title=\"准备3台主机\"></a>准备3台主机</h5><ol>\n<li>zabbix、nginx、php。我这里是ubuntu22.04，ip 10.0.0.100</li>\n<li>mysql ubutnu22.04。ip 10.0.0.130</li>\n<li>client 随意 ip 10.0.0.131</li>\n</ol>\n<h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><h4 id=\"zabbix-nginx-php部署\"><a href=\"#zabbix-nginx-php部署\" class=\"headerlink\" title=\"zabbix,nginx,php部署\"></a>zabbix,nginx,php部署</h4><h5 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装源\"><a href=\"#安装源\" class=\"headerlink\" title=\"安装源\"></a>安装源</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent zabbix-get</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装中文\"><a href=\"#安装中文\" class=\"headerlink\" title=\"安装中文\"></a>安装中文</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install language-pack-zh-hans</span><br><span class=\"line\"><span class=\"comment\">#英文水平高略过</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"zabbix-配置文件mysql配置项目\"><a href=\"#zabbix-配置文件mysql配置项目\" class=\"headerlink\" title=\"zabbix 配置文件mysql配置项目\"></a>zabbix 配置文件mysql配置项目</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/zabbix/zabbix_server.conf</span><br><span class=\"line\">DBHost=10.0.0.130</span><br><span class=\"line\"><span class=\"comment\">#这里mysql我装在另一台主机了</span></span><br><span class=\"line\">DBName=zabbix</span><br><span class=\"line\"><span class=\"comment\">#数据库名</span></span><br><span class=\"line\">DBUser=zabbix</span><br><span class=\"line\"><span class=\"comment\">#数据库用户</span></span><br><span class=\"line\">DBPassword=123456</span><br><span class=\"line\"><span class=\"comment\">#数据库密码</span></span><br><span class=\"line\">scp /usr/share/zabbix-sql-scripts/mysql/server.sql.gz  root@10.0.0.130:</span><br><span class=\"line\"><span class=\"comment\">#把脚本复制到mysql主机上</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql配置\"><a href=\"#mysql配置\" class=\"headerlink\" title=\"mysql配置\"></a>mysql配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install mysql-server</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql.service</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; create database zabbix character <span class=\"built_in\">set</span> utf8mb4 collate utf8mb4_bin;</span><br><span class=\"line\">mysql&gt; create user zabbix@<span class=\"string\">&#x27;10.0.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global log_bin_trust_function_creators = 1;</span><br><span class=\"line\"><span class=\"comment\">#用于控制在二进制日志中记录创建函数和存储过程的权限检查。当该变量的值为 1 时，MySQL 将信任具有创建函数和存储过程权限的非特权用户，允许他们创建这些对象并将其记录在二进制日志中。</span></span><br><span class=\"line\">mysql&gt; \\! zcat /root/server.sql.gz | mysql -uzabbix -p123456 -h 10.0.0.130 zabbix</span><br><span class=\"line\"><span class=\"comment\">#在这里我试了很多次，发现是我创建用户只允许10网段，我使用127登不进去，这个要注意用户授权，我本机IP是130</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global log_bin_trust_function_creators = 0;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/zabbix/nginx.conf </span><br><span class=\"line\">        listen          8080;</span><br><span class=\"line\"><span class=\"comment\">#        server_name     example.com;</span></span><br><span class=\"line\"><span class=\"comment\">#这里我没有配置域名，80已经被另一个配置文件监听，如果要配置80，要么增加default_server，删除另一个配置文件的default_server，要么添加域名，以请求头区分访问页面。</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动zabbix，配置自启动\"><a href=\"#启动zabbix，配置自启动\" class=\"headerlink\" title=\"启动zabbix，配置自启动\"></a>启动zabbix，配置自启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start zabbix-server zabbix-agent nginx php8.1-fpm  &amp;&amp;  systemctl <span class=\"built_in\">enable</span> zabbix-server zabbix-agent nginx php8.1-fpm</span><br></pre></td></tr></table></figure>\n<h5 id=\"替换中文\"><a href=\"#替换中文\" class=\"headerlink\" title=\"替换中文\"></a>替换中文</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win + R 输入fonts</span><br><span class=\"line\"><span class=\"comment\">#随便拷贝一个字体，这里我选择的微软雅黑</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/zabbix/assets/fonts</span><br><span class=\"line\"><span class=\"comment\">#zabbix字体引用目录，实际是软链接</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> graphfont.ttf graphfont.ttf.bak</span><br><span class=\"line\"><span class=\"comment\">#备份原字体</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span>  msyh.ttc  graphfont.ttf</span><br><span class=\"line\"><span class=\"comment\">#替换，也可-b选项</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"登录配置\"><a href=\"#登录配置\" class=\"headerlink\" title=\"登录配置\"></a>登录配置</h5><p><img src=\"/images/zabbix%E6%A3%80%E6%B5%8B.jpg\" alt=\"起始页面检测\"></p>\n<h5 id=\"web服务连接mysql，配置文件是zabbix-server连接数据库\"><a href=\"#web服务连接mysql，配置文件是zabbix-server连接数据库\" class=\"headerlink\" title=\"web服务连接mysql，配置文件是zabbix-server连接数据库\"></a>web服务连接mysql，配置文件是zabbix-server连接数据库</h5><p><img src=\"/images/zabbix-mysql.jpg\" alt=\"连接mysql配置\"></p>\n<h5 id=\"时区选择，一般是上海\"><a href=\"#时区选择，一般是上海\" class=\"headerlink\" title=\"时区选择，一般是上海\"></a>时区选择，一般是上海</h5><p><img src=\"/images/zabbix-%E6%97%B6%E5%8C%BA%E9%80%89%E6%8B%A9.jpg\" alt=\"时区选择\"></p>\n<h5 id=\"登录页面，账号是-“Admin”-密码是-“zabbix”，注意只有”是”，表示zabbix-server运行正常\"><a href=\"#登录页面，账号是-“Admin”-密码是-“zabbix”，注意只有”是”，表示zabbix-server运行正常\" class=\"headerlink\" title=\"登录页面，账号是 “Admin” 密码是 “zabbix”，注意只有”是”，表示zabbix-server运行正常\"></a>登录页面，账号是 “Admin” 密码是 “zabbix”，注意只有”是”，表示zabbix-server运行正常</h5><p><img src=\"/images/zabbix-login.jpg\" alt=\"首页\"></p>\n<h5 id=\"客户端安装agent\"><a href=\"#客户端安装agent\" class=\"headerlink\" title=\"客户端安装agent\"></a>客户端安装agent</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class=\"line\">dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install zabbix-agent</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置agent\"><a href=\"#配置agent\" class=\"headerlink\" title=\"配置agent\"></a>配置agent</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server=10.0.0.100 </span><br><span class=\"line\"><span class=\"comment\">#必须指向Zabbix Server,此为必须项</span></span><br><span class=\"line\">ServerActive=10.0.0.100 </span><br><span class=\"line\"><span class=\"comment\">#主动模式才需要指向Zabbix Server,此处无需修改</span></span><br><span class=\"line\">Hostname=10.0.0.131 </span><br><span class=\"line\"><span class=\"comment\">#修改为当前主机的IP,主动模式才需要,此处可选</span></span><br><span class=\"line\">Timeout=30 </span><br><span class=\"line\"><span class=\"comment\">#建议修改此值</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动agent\"><a href=\"#启动agent\" class=\"headerlink\" title=\"启动agent\"></a>启动agent</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system <span class=\"built_in\">enable</span> --now zabbix-agent</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加client，这里我是修改，如果是新client应为添加。\"><a href=\"#添加client，这里我是修改，如果是新client应为添加。\" class=\"headerlink\" title=\"添加client，这里我是修改，如果是新client应为添加。\"></a>添加client，这里我是修改，如果是新client应为添加。</h5><p><img src=\"/images/add-client.jpg\" alt=\"首页\"></p>\n<h5 id=\"查看client\"><a href=\"#查看client\" class=\"headerlink\" title=\"查看client\"></a>查看client</h5><p><img src=\"/images/client-mesg.jpg\" alt=\"客户端部分信息\"><br>到这里我们就简单完成了zabbix的配置，zabbix还有很多扩展，比如自定义监控某项参数….这里不再过多叙述，其次zabbix不仅仅可以监控linux，也可以监控windows，或者是交换机，路由器等等软硬件。感兴趣可自行尝试参考官方安装教程使用</p>\n<h5 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h5><ul>\n<li>官方安装教程<a href=\"https://www.zabbix.com/download\">https://www.zabbix.com/download</a></li>\n<li>官方包仓库<a href=\"https://repo.zabbix.com/\">https://repo.zabbix.com</a></li>\n<li>阿里云镜像源<a href=\"https://mirrors.aliyun.com/zabbix\">(https://mirrors.aliyun.com/zabbix</a></li>\n<li>清华大学镜像源<a href=\"https://mirrors.tuna.tsinghua.edu.cn/zabbix\">https://mirrors.tuna.tsinghua.edu.cn/zabbix</a></li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"Zabbix-介绍\"><a href=\"#Zabbix-介绍\" class=\"headerlink\" title=\"Zabbix 介绍\"></a>Zabbix 介绍</h3><ul>\n<li>Zabbix 是一个企业级分布式开源监控解决方案，支持实时监控数干台服务器，虚拟机和网络设备，采集百万级监控指标，适用于任何IT基础架构、服务、应用程序和资源的解决方案</li>\n<li>Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</li>\n</ul>\n<h3 id=\"安装配置zabbix\"><a href=\"#安装配置zabbix\" class=\"headerlink\" title=\"安装配置zabbix\"></a>安装配置zabbix</h3><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h5 id=\"准备3台主机\"><a href=\"#准备3台主机\" class=\"headerlink\" title=\"准备3台主机\"></a>准备3台主机</h5><ol>\n<li>zabbix、nginx、php。我这里是ubuntu22.04，ip 10.0.0.100</li>\n<li>mysql ubutnu22.04。ip 10.0.0.130</li>\n<li>client 随意 ip 10.0.0.131</li>\n</ol>\n<h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><h4 id=\"zabbix-nginx-php部署\"><a href=\"#zabbix-nginx-php部署\" class=\"headerlink\" title=\"zabbix,nginx,php部署\"></a>zabbix,nginx,php部署</h4><h5 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装源\"><a href=\"#安装源\" class=\"headerlink\" title=\"安装源\"></a>安装源</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent zabbix-get</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装中文\"><a href=\"#安装中文\" class=\"headerlink\" title=\"安装中文\"></a>安装中文</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt -y install language-pack-zh-hans</span><br><span class=\"line\"><span class=\"comment\">#英文水平高略过</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"zabbix-配置文件mysql配置项目\"><a href=\"#zabbix-配置文件mysql配置项目\" class=\"headerlink\" title=\"zabbix 配置文件mysql配置项目\"></a>zabbix 配置文件mysql配置项目</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/zabbix/zabbix_server.conf</span><br><span class=\"line\">DBHost=10.0.0.130</span><br><span class=\"line\"><span class=\"comment\">#这里mysql我装在另一台主机了</span></span><br><span class=\"line\">DBName=zabbix</span><br><span class=\"line\"><span class=\"comment\">#数据库名</span></span><br><span class=\"line\">DBUser=zabbix</span><br><span class=\"line\"><span class=\"comment\">#数据库用户</span></span><br><span class=\"line\">DBPassword=123456</span><br><span class=\"line\"><span class=\"comment\">#数据库密码</span></span><br><span class=\"line\">scp /usr/share/zabbix-sql-scripts/mysql/server.sql.gz  root@10.0.0.130:</span><br><span class=\"line\"><span class=\"comment\">#把脚本复制到mysql主机上</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql配置\"><a href=\"#mysql配置\" class=\"headerlink\" title=\"mysql配置\"></a>mysql配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install mysql-server</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/^bind-address/#&amp;/&#x27;</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\">systemctl start mysql.service</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql&gt; create database zabbix character <span class=\"built_in\">set</span> utf8mb4 collate utf8mb4_bin;</span><br><span class=\"line\">mysql&gt; create user zabbix@<span class=\"string\">&#x27;10.0.0.%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class=\"string\">&#x27;10.0.0.%&#x27;</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global log_bin_trust_function_creators = 1;</span><br><span class=\"line\"><span class=\"comment\">#用于控制在二进制日志中记录创建函数和存储过程的权限检查。当该变量的值为 1 时，MySQL 将信任具有创建函数和存储过程权限的非特权用户，允许他们创建这些对象并将其记录在二进制日志中。</span></span><br><span class=\"line\">mysql&gt; \\! zcat /root/server.sql.gz | mysql -uzabbix -p123456 -h 10.0.0.130 zabbix</span><br><span class=\"line\"><span class=\"comment\">#在这里我试了很多次，发现是我创建用户只允许10网段，我使用127登不进去，这个要注意用户授权，我本机IP是130</span></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global log_bin_trust_function_creators = 0;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/zabbix/nginx.conf </span><br><span class=\"line\">        listen          8080;</span><br><span class=\"line\"><span class=\"comment\">#        server_name     example.com;</span></span><br><span class=\"line\"><span class=\"comment\">#这里我没有配置域名，80已经被另一个配置文件监听，如果要配置80，要么增加default_server，删除另一个配置文件的default_server，要么添加域名，以请求头区分访问页面。</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动zabbix，配置自启动\"><a href=\"#启动zabbix，配置自启动\" class=\"headerlink\" title=\"启动zabbix，配置自启动\"></a>启动zabbix，配置自启动</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start zabbix-server zabbix-agent nginx php8.1-fpm  &amp;&amp;  systemctl <span class=\"built_in\">enable</span> zabbix-server zabbix-agent nginx php8.1-fpm</span><br></pre></td></tr></table></figure>\n<h5 id=\"替换中文\"><a href=\"#替换中文\" class=\"headerlink\" title=\"替换中文\"></a>替换中文</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win + R 输入fonts</span><br><span class=\"line\"><span class=\"comment\">#随便拷贝一个字体，这里我选择的微软雅黑</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/zabbix/assets/fonts</span><br><span class=\"line\"><span class=\"comment\">#zabbix字体引用目录，实际是软链接</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> graphfont.ttf graphfont.ttf.bak</span><br><span class=\"line\"><span class=\"comment\">#备份原字体</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span>  msyh.ttc  graphfont.ttf</span><br><span class=\"line\"><span class=\"comment\">#替换，也可-b选项</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"登录配置\"><a href=\"#登录配置\" class=\"headerlink\" title=\"登录配置\"></a>登录配置</h5><p><img src=\"/images/zabbix%E6%A3%80%E6%B5%8B.jpg\" alt=\"起始页面检测\"></p>\n<h5 id=\"web服务连接mysql，配置文件是zabbix-server连接数据库\"><a href=\"#web服务连接mysql，配置文件是zabbix-server连接数据库\" class=\"headerlink\" title=\"web服务连接mysql，配置文件是zabbix-server连接数据库\"></a>web服务连接mysql，配置文件是zabbix-server连接数据库</h5><p><img src=\"/images/zabbix-mysql.jpg\" alt=\"连接mysql配置\"></p>\n<h5 id=\"时区选择，一般是上海\"><a href=\"#时区选择，一般是上海\" class=\"headerlink\" title=\"时区选择，一般是上海\"></a>时区选择，一般是上海</h5><p><img src=\"/images/zabbix-%E6%97%B6%E5%8C%BA%E9%80%89%E6%8B%A9.jpg\" alt=\"时区选择\"></p>\n<h5 id=\"登录页面，账号是-“Admin”-密码是-“zabbix”，注意只有”是”，表示zabbix-server运行正常\"><a href=\"#登录页面，账号是-“Admin”-密码是-“zabbix”，注意只有”是”，表示zabbix-server运行正常\" class=\"headerlink\" title=\"登录页面，账号是 “Admin” 密码是 “zabbix”，注意只有”是”，表示zabbix-server运行正常\"></a>登录页面，账号是 “Admin” 密码是 “zabbix”，注意只有”是”，表示zabbix-server运行正常</h5><p><img src=\"/images/zabbix-login.jpg\" alt=\"首页\"></p>\n<h5 id=\"客户端安装agent\"><a href=\"#客户端安装agent\" class=\"headerlink\" title=\"客户端安装agent\"></a>客户端安装agent</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class=\"line\">dpkg -i zabbix-release_6.0-4+ubuntu22.04_all.deb</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install zabbix-agent</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置agent\"><a href=\"#配置agent\" class=\"headerlink\" title=\"配置agent\"></a>配置agent</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server=10.0.0.100 </span><br><span class=\"line\"><span class=\"comment\">#必须指向Zabbix Server,此为必须项</span></span><br><span class=\"line\">ServerActive=10.0.0.100 </span><br><span class=\"line\"><span class=\"comment\">#主动模式才需要指向Zabbix Server,此处无需修改</span></span><br><span class=\"line\">Hostname=10.0.0.131 </span><br><span class=\"line\"><span class=\"comment\">#修改为当前主机的IP,主动模式才需要,此处可选</span></span><br><span class=\"line\">Timeout=30 </span><br><span class=\"line\"><span class=\"comment\">#建议修改此值</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动agent\"><a href=\"#启动agent\" class=\"headerlink\" title=\"启动agent\"></a>启动agent</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system <span class=\"built_in\">enable</span> --now zabbix-agent</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加client，这里我是修改，如果是新client应为添加。\"><a href=\"#添加client，这里我是修改，如果是新client应为添加。\" class=\"headerlink\" title=\"添加client，这里我是修改，如果是新client应为添加。\"></a>添加client，这里我是修改，如果是新client应为添加。</h5><p><img src=\"/images/add-client.jpg\" alt=\"首页\"></p>\n<h5 id=\"查看client\"><a href=\"#查看client\" class=\"headerlink\" title=\"查看client\"></a>查看client</h5><p><img src=\"/images/client-mesg.jpg\" alt=\"客户端部分信息\"><br>到这里我们就简单完成了zabbix的配置，zabbix还有很多扩展，比如自定义监控某项参数….这里不再过多叙述，其次zabbix不仅仅可以监控linux，也可以监控windows，或者是交换机，路由器等等软硬件。感兴趣可自行尝试参考官方安装教程使用</p>\n<h5 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h5><ul>\n<li>官方安装教程<a href=\"https://www.zabbix.com/download\">https://www.zabbix.com/download</a></li>\n<li>官方包仓库<a href=\"https://repo.zabbix.com/\">https://repo.zabbix.com</a></li>\n<li>阿里云镜像源<a href=\"https://mirrors.aliyun.com/zabbix\">(https://mirrors.aliyun.com/zabbix</a></li>\n<li>清华大学镜像源<a href=\"https://mirrors.tuna.tsinghua.edu.cn/zabbix\">https://mirrors.tuna.tsinghua.edu.cn/zabbix</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}